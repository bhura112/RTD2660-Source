C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE OSDMENUFUNC003
OBJECT MODULE PLACED IN .\Output\OsdMenuFunc003.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OSD\OSD003\OsdMenuFunc003.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTE
                    -ND PRINT(.\Output\OsdMenuFunc003.lst) OBJECT(.\Output\OsdMenuFunc003.obj)

line level    source

   1          
   2          #define __OSDDRAW003__
   3          
   4          #include "Core\Header\Include.h"
   5          
   6          #if(_OSD_TYPE == _OSD003)
   7          //-------------------------------------------------------------------
   8          
   9          bit CEnable(void)
  10          {
  11   1          return 1;
  12   1      }
  13          
  14          //----------------------------------------------------------------------------------------------------
  15          bit CVideoEnable(void)
  16          {
  17   1          if(bSourceVideo() || _SOURCE_YPBPR == _GET_INPUT_SOURCE() || _SOURCE_HDMI == _GET_INPUT_SOURCE())
  18   1              return 1;
  19   1          else return 0;
  20   1      }
  21          
  22          //------------------------------------------------------------------------
  23          bit CVideoNTSCEnable(void)
  24          {
  25   1          if((bSourceVideo() && (ucVideoType == ZNTSC || ucVideoType == ZNTSC_443 || ucVideoType == ZNTSC_50)) &
             -&
  26   1             (_SOURCE_YPBPR != _GET_INPUT_SOURCE()))
  27   1              return 1;
  28   1          else return 0;
  29   1      }
  30          
  31          //------------------------------------------------------------------------
  32          bit CVgaEnable(void)
  33          {
  34   1          if(_GET_INPUT_SOURCE() == _SOURCE_VGA)
  35   1              return 1;
  36   1          else return 0;
  37   1      }
  38          
  39          //---------------------------------------------------------------------------
  40          /*
  41          bit CHDMIEnable(void)
  42          {
  43              if(_GET_INPUT_SOURCE() == _SOURCE_HDMI)
  44                  return 1;
  45              else return 0;
  46          } 
  47          
  48          //---------------------------------------------------------------------------
  49          bit CDviEnable(void)
  50          {
  51              if(_GET_INPUT_SOURCE() == _SOURCE_DVI)
  52                  return 1;
  53              else return 0;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 2   

  54          }   */
  55          
  56          //---------------------------------------------------------------------------
  57          bit CTVEnable(void)
  58          {
  59   1          if(_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
  60   1              return 1;
  61   1          else return 0;
  62   1      }
  63          
  64          //---------------------------------------------------------------------------
  65          bit MDisplayRatioEnable(void)
  66          {
  67   1          if(CCalcRatio() >= 75)      // ÆÁµÄ±ÈÀý 4:3 »ò 5:4
  68   1              return _FAIL;
  69   1          
  70   1          return _TRUE;
  71   1      }
  72          
  73          //---------------------------------------------------------------------------
  74          bit MSoundEnable(void)
  75          {
  76   1              #if (_SOUND_PROCESSOR)
                  return _TRUE;
                      #else
  79   1          return _FALSE;
  80   1              #endif
  81   1      }
  82          
  83          //---------------------------------------------------------------------------
  84          bit MNJW1144Enable(void)
  85          {
  86   1              #if(AUDIO_TYPE == _AUDIO_NJW1144)
                  return 1;
                      #else
  89   1          return 0;
  90   1              #endif
  91   1      }
  92          
  93          //---------------------------------------------------------------------------
  94          #if(_CHANGE_SOURCE_METHOD == _CHANGE_SOURCE_METHOD_0)
  95          bit CMIVgaEnable(void)
  96          {
  97   1          return _VGA_SUPPORT;
  98   1      }
  99          
 100          //---------------------------------------------------------------------------
 101          bit CMIDVIEnable(void)
 102          {
 103   1          return _TMDS_SUPPORT;
 104   1      }
 105          
 106          //---------------------------------------------------------------------------
 107          bit CMIHDMIEnable(void)
 108          {
 109   1          return _HDMI_SUPPORT;
 110   1      }
 111          
 112          //---------------------------------------------------------------------------
 113          bit CMIYPBPREnable(void)
 114          {
 115   1          return _YPBPR_SUPPORT;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 3   

 116   1      }
 117          
 118          //---------------------------------------------------------------------------
 119          bit CMISVEnable(void)
 120          {
 121   1          return _VIDEO_SV_SUPPORT;
 122   1      }
 123          
 124          //---------------------------------------------------------------------------
 125          bit CMIAVEnable(void)
 126          {
 127   1          return _VIDEO_AV_SUPPORT;
 128   1      }
 129          #endif // #if(_CHANGE_SOURCE_METHOD == _CHANGE_SOURCE_METHOD_0)
 130          //---------------------------------------------------------------------------
 131          bit CMITVEnable(void)
 132          {
 133   1          return _VIDEO_TV_SUPPORT;
 134   1      }
 135          
 136          //---------------------------------------------------------------------------
 137          bit CEngEnable(void)
 138          {
 139   1          return ENGLISH_EN;
 140   1      }
 141          
 142          //---------------------------------------------------------------------------
 143          bit CCHI_S_Enable(void)
 144          {
 145   1          return LNG_CHI_S_EN;
 146   1      }
 147          
 148          //---------------------------------------------------------------------------
 149          bit CFRA_Enable(void)
 150          {
 151   1          return LNG_FRA_EN;
 152   1      }
 153          
 154          //---------------------------------------------------------------------------
 155          bit CITA_Enable(void)
 156          {
 157   1          return LNG_ITA_EN;
 158   1      }
 159          
 160          //---------------------------------------------------------------------------
 161          bit CDEU_Enable(void)
 162          {
 163   1          return LNG_DEU_EN;
 164   1      }
 165          
 166          //---------------------------------------------------------------------------
 167          bit CESP_Enable(void)
 168          {
 169   1          return LNG_ESP_EN;
 170   1      }
 171          
 172          //---------------------------------------------------------------------------
 173          bit CCHI_T_Enable(void)
 174          {
 175   1          return LNG_CHI_T_EN;
 176   1      }
 177          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 4   

 178          //---------------------------------------------------------------------------
 179          bit CJAP_Enable(void)
 180          {
 181   1          return LNG_JAP_EN;
 182   1      }
 183          
 184          //---------------------------------------------------------------------------
 185          bit CKOR_Enable(void)
 186          {
 187   1          return LNG_KOR_EN;
 188   1      }
 189          
 190          //---------------------------------------------------------------------------
 191          bit CRUS_Enable(void)
 192          {
 193   1          return LNG_RUS_EN;
 194   1      }
 195          
 196          //---------------------------------------------------------------------------
 197          bit CEnNtsc_M(void)
 198          {
 199   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_NTSC_M_SUPPORT;
                      #else
 202   1          return 0;
 203   1              #endif
 204   1      }
 205          
 206          //---------------------------------------------------------------------------
 207          bit CEnNtsc_BG(void)
 208          {
 209   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_NTSC_4_BG_SUPPORT;
                      #else
 212   1          return 0;
 213   1              #endif
 214   1      }
 215          
 216          //---------------------------------------------------------------------------
 217          bit CEnNtsc_DK(void)
 218          {
 219   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_NTSC_4_DK_SUPPORT;
                      #else
 222   1          return 0;
 223   1              #endif
 224   1      }
 225          
 226          //---------------------------------------------------------------------------
 227          bit CEnNtsc_I(void)
 228          {
 229   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_NTSC_4_I_SUPPORT;
                      #else
 232   1          return 0;
 233   1              #endif
 234   1      }
 235          
 236          //---------------------------------------------------------------------------
 237          bit CEnPal_M(void)
 238          {
 239   1              #if(_VIDEO_TV_SUPPORT)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 5   

                  return _TV_PAL_M_SUPPORT;
                      #else
 242   1          return 0;
 243   1              #endif
 244   1      }
 245          
 246          //---------------------------------------------------------------------------
 247          bit CEnPal_BG(void)
 248          {
 249   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_PAL_BG_SUPPORT;
                      #else
 252   1          return 0;
 253   1              #endif
 254   1      }
 255          
 256          //---------------------------------------------------------------------------
 257          bit CEnPal_DK(void)
 258          {
 259   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_PAL_DK_SUPPORT;
                      #else
 262   1          return 0;
 263   1              #endif
 264   1      }
 265          
 266          //---------------------------------------------------------------------------
 267          bit CEnPal_I(void)
 268          {
 269   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_PAL_I_SUPPORT;
                      #else
 272   1          return 0;
 273   1              #endif
 274   1      }
 275          
 276          //---------------------------------------------------------------------------
 277          bit CEnPal_N(void)
 278          {
 279   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_PAL_N_SUPPORT;
                      #else
 282   1          return 0;
 283   1              #endif
 284   1      }
 285          
 286          //---------------------------------------------------------------------------
 287          bit CEnSecam_BG(void)
 288          {
 289   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_SECAM_BG_SUPPORT;
                      #else
 292   1          return 0;
 293   1              #endif
 294   1      }
 295          
 296          //---------------------------------------------------------------------------
 297          bit CEnSecam_DK(void)
 298          {
 299   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_SECAM_DK_SUPPORT;
                      #else
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 6   

 302   1          return 0;
 303   1              #endif
 304   1      }
 305          
 306          //---------------------------------------------------------------------------
 307          bit CEnSecam_L(void)
 308          {
 309   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_SECAM_L_SUPPORT;
                      #else
 312   1          return 0;
 313   1              #endif
 314   1      }
 315          
 316          //---------------------------------------------------------------------------
 317          bit CEnSecam_LL(void)
 318          {
 319   1              #if(_VIDEO_TV_SUPPORT)
                  return _TV_SECAM_LL_SUPPORT;
                      #else
 322   1          return 0;
 323   1              #endif
 324   1      }
 325          
 326          //---------------------------------------------------------------------------
 327          bit COSDDoubleEN(void)
 328          {
 329   1          if(Panel[ucPanelSelect]->DHWidth < 1280 || Panel[ucPanelSelect]->DVHeight < 1024)
 330   1              return _FALSE;
 331   1          
 332   1          return _TRUE;
 333   1      }
 334          //---------------------------------------------------------------------------
 335          bit CAFCEnable(void)
 336          {
 337   1      #if(_TV_AFC)
                  return _TRUE;
              #endif
 340   1      
 341   1          return _FALSE;
 342   1      }
 343          //---------------------------------------------------------------------------
 344          
 345          
 346          
 347          //---------------------------------------------------------------------------
 348          BYTE StateColor(BYTE State)
 349          {
 350   1          switch(State)
 351   1          {
 352   2          case _ST_NORMAL:    return _MENU_NORMAL_COLOR;
 353   2          case _ST_SELECT:    return _MENU_SECECT_COLOR;
 354   2          case _ST_ADJUST:    return _MENU_ADJUST_COLOR; 
 355   2          case _ST_DISABLE:   
 356   2          default:            return _MENU_DISABLE_COLOR;     
 357   2          }
 358   1      }
 359          
 360          //---------------------------------------------------------------------------
 361          void CreatePopupMenu(BYTE ucRow,BYTE ucHeight)
 362          {
 363   1          WORD usWindowLeft;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 7   

 364   1          WORD usWindowTop;
 365   1          WORD usWindowRight;
 366   1          WORD usWindowBottom;
 367   1          
 368   1          BYTE i;
 369   1          BYTE x;
 370   1          BYTE iCurrRow;
 371   1          for(i=0;i<ucHeight;i++)
 372   1          {
 373   2              iCurrRow = ucRow + i;
 374   2              if(iCurrRow % 2)
 375   2                  x = 20;
 376   2              else 
 377   2                  x = 27;
 378   2              
 379   2              OSDLine(iCurrRow, COL(x), WIDTH(19), 0x00, BYTE_DISPLAY);
 380   2              OSDLine(iCurrRow, COL(x), WIDTH(19), 0x8C, BYTE_ATTRIB);
 381   2          }   
 382   1          
 383   1          usWindowLeft = 21 * 12;
 384   1          usWindowRight = (21 + 18) * 12;
 385   1          usWindowTop = (WORD)ucRow * 18;
 386   1          usWindowBottom = (WORD)(ucRow + ucHeight) * 18;
 387   1          
 388   1          COsdFxDrawWindow(usWindowLeft, usWindowTop, usWindowRight, usWindowBottom, tPopupMenuWindowStyle);
 389   1      }
 390          
 391          //---------------------------------------------------------------------------
 392          void ClearPopupMenu(BYTE ucRow,BYTE ucHeight)
 393          {
 394   1          BYTE i;
 395   1          BYTE x;
 396   1          BYTE iCurrRow; 
 397   1          
 398   1          for(i=0;i<ucHeight;i++)
 399   1          {
 400   2              iCurrRow = ucRow + i;
 401   2              if(iCurrRow % 2)
 402   2              {
 403   3                  x = 20;
 404   3                  SETCOLOR_SUBMENU_SELLINE(iCurrRow);
 405   3              }
 406   2              else 
 407   2              {
 408   3                  x = 27;
 409   3              }
 410   2              
 411   2              OSDLine(iCurrRow, COL(x), WIDTH(19), 0x00, BYTE_DISPLAY);
 412   2              OSDLine(iCurrRow, COL(x), WIDTH(19), 0x8C, BYTE_ATTRIB);
 413   2          }
 414   1          
 415   1          COsdFxCloseWindow(4);
 416   1      }
 417          
 418          //---------------------------------------------------------------------------
 419          void DrawAPopupMenuItem(BYTE *str,BYTE ItemIndex,BYTE ucRowStart,BYTE ucColStart,BYTE State)
 420          {
 421   1          BYTE c;
 422   1          //BYTE x;
 423   1          BYTE ucColor = StateColor(State);
 424   1          
 425   1          ItemIndex = ItemIndex + ucRowStart + 1;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 8   

 426   1          
 427   1          if(State == _ST_SELECT)
 428   1              c = 0x57;   // Select Icon
 429   1          else
 430   1              c = 0x01;   // Clear Select Icon
 431   1          
 432   1          if(ItemIndex % 2)
 433   1              ucColStart += 21;
 434   1          else
 435   1              ucColStart += 27;
 436   1          
 437   1          OSDLine(ROW(ItemIndex), COL(ucColStart), LENGTH(19), ucColor, BYTE_COLOR);
 438   1          
 439   1          Gotoxy(COL(ucColStart + 1),ROW(ItemIndex),BYTE_DISPLAY);
 440   1          OutputChar(c);
 441   1          
 442   1          CTextOutEx(str, COL(ucColStart + 3), ROW(ItemIndex));
 443   1      }
 444          
 445          //---------------------------------------------------------------------------
 446          void InitMainOsd(void)
 447          {
 448   1          BYTE i;
 449   1          
 450   1          InitOsdFrame();
 451   1          SetOSDDouble((GET_OSD_SIZE() ? 0x03 : 0x00)  | OSD_WINDOWCHAR_BLENDING);   
 452   1          
 453   1          // Draw Top Line
 454   1          OSDLine(ROW(3), COL(1), LENGTH(37), 0xA6, THE_BYTE0);
 455   1          OSDLine(ROW(3), COL(1), LENGTH(37), 0xA4, THE_BYTE1);
 456   1          OSDLine(ROW(3), COL(1), LENGTH(37), 0x11, THE_BYTE2);
 457   1          
 458   1          // Draw Bottom Line
 459   1          OSDLine(ROW(16), COL(1), LENGTH(37), 0xA6, THE_BYTE0);
 460   1          OSDLine(ROW(16), COL(1), LENGTH(37), 0xA4, THE_BYTE1);
 461   1          OSDLine(ROW(16), COL(1), LENGTH(37), 0x11, THE_BYTE2);
 462   1          
 463   1          // Draw Left Line
 464   1          for(i=0;i<12;i++)
 465   1          {
 466   2              Gotoxy(5 , 4 + i , ALL_BYTE);
 467   2              CScalerSendAddr(_OSD_DATA_PORT_92 , _NON_AUTOINC);
 468   2              *(&MCU_SCA_INF_DATA_FFF5) = 0xA6;
 469   2              *(&MCU_SCA_INF_DATA_FFF5) = 0xA5;
 470   2              *(&MCU_SCA_INF_DATA_FFF5) = 0x11;
 471   2          }
 472   1          
 473   1          // set submenu selet line color
 474   1          for(i=0;i<6;i++)
 475   1          {
 476   2              SETCOLOR_SUBMENU_SELLINE(SHOWINDEX_TO_LINE(i) + 1);
 477   2          }
 478   1          
 479   1          // Draw Window
 480   1          COsdFxDrawWindow(0,0,                                       //WORD usXStart,WORD usYStart,  
 481   1              _MAINMENU_WIDTH + 20,_MAINMENU_HEIGHT,                  //WORD usXEnd,WORD usYEnd,  
 482   1              tMainWindowStyle);                                      //BYTE *pStyle)
 483   1          
 484   1          // set osd position
 485   1          if (GET_OSD_SIZE())
 486   1          {
 487   2              SetOSDDouble(0x03 | OSD_WINDOWCHAR_BLENDING);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 9   

 488   2          }
 489   1          else
 490   1          {
 491   2              SetOSDDouble(OSD_WINDOWCHAR_BLENDING);
 492   2          }
 493   1          CSetOSDPosition(_MAINMENU_WIDTH, _MAINMENU_HEIGHT, stOsdUserData.OsdHPos, stOsdUserData.OsdVPos);
 494   1      
 495   1          COsdFxEnableOsd();
 496   1      }
 497          
 498          //---------------------------------------------------------------------------
 499          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 500          void DrawMainMenuItem(BYTE ucItem,BYTE ucState)
 501          {
 502   1          BYTE y;
 503   1          BYTE *tIcon;
 504   1          
 505   1          y = GetShowIndex(ucItem,_MI_COLOR,_MI_SOUND);
 506   1          
 507   1          if(y == _NOT_SHOW)
 508   1              return;
 509   1          
 510   1          y = SHOWINDEX_TO_LINE(y);
 511   1          
 512   1          if(!g_tMenuItem[ucItem].Enable())
 513   1          {
 514   2              ucState = _ST_DISABLE;  
 515   2          }
 516   1          
 517   1          switch(ucState)
 518   1          {
 519   2          case _ST_NORMAL:
 520   2              tIcon = tIcon_Normal[ucItem - _MI_COLOR];
 521   2              break;
 522   2          case _ST_SELECT:
 523   2              tIcon = tIcon_Select[ucItem - _MI_COLOR];
 524   2              break;
 525   2          case _ST_DISABLE:
 526   2              tIcon = tIcon_Disable[ucItem - _MI_COLOR];
 527   2              break;
 528   2          }
 529   1          
 530   1          Draw2bit3x2Icon(tIcon,1,y);
 531   1      }
 532          
 533          //---------------------------------------------------------------------------
 534          // ucItem : MainMenu\_MI_COLOR,_MI_ADJUST,_MI_OSD,_MI_TV,_MI_FUNCTION,_MI_SOUND,
 535          void DrawMainItemTitle(BYTE ucItem)
 536          {
 537   1          BYTE i;
 538   1          BYTE n;
 539   1          BYTE x; 
 540   1          BYTE Width;
 541   1          BYTE code *tFont;
 542   1          
 543   1          tFont = tMainTitle[ucItem - _MI_COLOR][GET_LANGUAGE()].Font;
 544   1          Width = tMainTitle[ucItem - _MI_COLOR][GET_LANGUAGE()].Width;
 545   1          
 546   1          CScalerLoadHardwareVLCFont(tFont, 0xE8);
 547   1          
 548   1          // 39 : OSD Width
 549   1          x = (39 - Width)/2;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 10  

 550   1          n = 0xE8;
 551   1          
 552   1          Gotoxy(x,1,BYTE_DISPLAY);
 553   1          CScalerSendAddr(_OSD_DATA_PORT_92 , _NON_AUTOINC);
 554   1          for(i=0;i<Width;i++)
 555   1          {
 556   2              *(&MCU_SCA_INF_DATA_FFF5) = n++;
 557   2          }
 558   1          
 559   1          Gotoxy(x,2,BYTE_DISPLAY);
 560   1          CScalerSendAddr(_OSD_DATA_PORT_92 , _NON_AUTOINC);
 561   1          for(i=0;i<Width;i++)
 562   1          {
 563   2              *(&MCU_SCA_INF_DATA_FFF5) = n++;
 564   2          }   
 565   1      }
 566          
 567          //---------------------------------------------------------------------------
 568          void DrawMainMenu(void)
 569          {
 570   1          BYTE i;
 571   1          BYTE ucMode;
 572   1          InitMainOsd();
 573   1      #if(_CHINESE_FONT_TYPE == _CHINESE_2_FONT)    
 574   1          LoadCHIFont(_LF_COLOR_PAGE);
 575   1      #endif    
 576   1          for(i=_MI_COLOR;i<=_MI_SOUND;i++)
 577   1          {
 578   2              if(i == ucOsdState)
 579   2              {
 580   3                  ucMode = _ST_SELECT;
 581   3                  DrawMainItemTitle(i);
 582   3              }
 583   2              else
 584   2              {
 585   3                  ucMode = _ST_NORMAL;
 586   3              }
 587   2              DrawMainMenuItem(i,     ucMode);
 588   2          }
 589   1          
 590   1          DrawSubMenu(ucOsdState);
 591   1      }
 592          
 593          //---------------------------------------------------------------------------
 594          void SubMenuTextOut(BYTE *str,BYTE y,BYTE ucColor,BYTE State)
 595          {
 596   1          // set color
 597   1          SUBMENU_LINECOLOR(y,ucColor);
 598   1          // draw menu item 
 599   1          SUBMENU_TEXTOUT(str,y);
 600   1          
 601   1          // draw select line
 602   1          if(State == _ST_SELECT || State == _ST_ADJUST)
 603   1          {
 604   2              DRAW_SUBMENU_SELLINE(y + 1);
 605   2          }
 606   1          else
 607   1          {
 608   2              CLEAR_SUBMENU_SELLINE(y + 1);
 609   2          }
 610   1      }
 611          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 11  

 612          //---------------------------------------------------------------------------
 613          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 614          void DrawBright(BYTE State)
 615          {
 616   1          BYTE y;
 617   1          BYTE ucColor,ucColor1;
 618   1          
 619   1          // get display line
 620   1          y = GetShowIndex(_MI_BRIGHTNESS,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 621   1          
 622   1          if(y == _NOT_SHOW)
 623   1              return;
 624   1          
 625   1          // get display color
 626   1          ucColor = StateColor(State);
 627   1          
 628   1          if(State == _ST_ADJUST)
 629   1          {
 630   2              ucColor1 = StateColor(_ST_SELECT);
 631   2          }
 632   1          else
 633   1          {
 634   2              ucColor1 = ucColor;
 635   2          }
 636   1          
 637   1          y = SHOWINDEX_TO_LINE(y);
 638   1          
 639   1          SubMenuTextOut(sBrightness[GET_LANGUAGE()],y,ucColor1,State);
 640   1          
 641   1          // draw slider
 642   1          OSD_SLIDER(y,stConBriData.Brightness,ucColor);
 643   1          
 644   1      }
 645          
 646          //---------------------------------------------------------------------------
 647          void BrightAdjust(BYTE ucMode)
 648          {
 649   1          BYTE y;
 650   1          
 651   1          // ucMode : _INC or _DEC
 652   1          SET_KEYREPEATENABLE();
 653   1          stConBriData.Brightness = ValueInRangeChange(0, 100, stConBriData.Brightness, _NON_LOOP | ucMode);
 654   1          CAdjustBrightness();
 655   1          ucOsdEventMsg = _SAVE_EE_COLORPROC0_MSG;
 656   1          
 657   1          // get display line
 658   1          y = GetShowIndex(_MI_BRIGHTNESS,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 659   1          
 660   1          if(y == _NOT_SHOW)
 661   1              return;
 662   1          
 663   1          y = SHOWINDEX_TO_LINE(y);
 664   1          
 665   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,stConBriData.Brightness,_MENU_SECECT_COLOR);
                      #endif
 668   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 669   1          OSD_SLIDER(y,stConBriData.Brightness,_MENU_ADJUST_COLOR);
 670   1              #endif
 671   1      }
 672          
 673          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 12  

 674          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 675          void DrawContrast(BYTE State)
 676          {
 677   1          BYTE y;
 678   1          BYTE ucColor;
 679   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 680   1          BYTE ucColor1;
 681   1              #endif
 682   1          
 683   1          // get display line
 684   1          y = GetShowIndex(_MI_CONTRAST,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 685   1          
 686   1          if(y == _NOT_SHOW)
 687   1              return;
 688   1          
 689   1          // get display color
 690   1          ucColor = StateColor(State);
 691   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 692   1          if(State == _ST_ADJUST)
 693   1          {
 694   2              ucColor1 = StateColor(_ST_SELECT);
 695   2          }
 696   1          else
 697   1          {
 698   2              ucColor1 = ucColor;
 699   2          }
 700   1              #endif      
 701   1          y = SHOWINDEX_TO_LINE(y);
 702   1          
 703   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sContrast[GET_LANGUAGE()],y,ucColor,State);
                      #endif
 706   1          
 707   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 708   1          SubMenuTextOut(sContrast[GET_LANGUAGE()],y,ucColor1,State);
 709   1              #endif
 710   1          // draw slider
 711   1          OSD_SLIDER(y,stConBriData.Contrast,ucColor);
 712   1      }
 713          
 714          //---------------------------------------------------------------------------
 715          void ContrastAdjust(BYTE ucMode)
 716          {
 717   1          // ucMode : _INC or _DEC
 718   1          BYTE y;
 719   1          
 720   1          SET_KEYREPEATENABLE();
 721   1          stConBriData.Contrast = ValueInRangeChange(0, 100, stConBriData.Contrast, _NON_LOOP | ucMode);
 722   1          CAdjustContrast();
 723   1          ucOsdEventMsg = _SAVE_EE_COLORPROC0_MSG;
 724   1          
 725   1          
 726   1          // get display line
 727   1          y = GetShowIndex(_MI_CONTRAST,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 728   1          
 729   1          if(y == _NOT_SHOW)
 730   1              return;
 731   1          
 732   1          y = SHOWINDEX_TO_LINE(y);
 733   1              #if(_KEY_TYPE == _KT_PCB2660_003)   
                  OSD_SLIDER(y,stConBriData.Contrast,_MENU_SECECT_COLOR);
                      #endif
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 13  

 736   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 737   1          OSD_SLIDER(y,stConBriData.Contrast,_MENU_ADJUST_COLOR);
 738   1              #endif
 739   1      }
 740          
 741          //---------------------------------------------------------------------------
 742          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 743          void DrawHue(BYTE State)
 744          {
 745   1          BYTE y;
 746   1          BYTE ucColor;
 747   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
 748   1          BYTE ucColor1;
 749   1              #endif
 750   1          
 751   1          // get display line
 752   1          y = GetShowIndex(_MI_HUE,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 753   1          
 754   1          if(y == _NOT_SHOW)
 755   1              return;
 756   1          
 757   1          // get display color
 758   1          ucColor = StateColor(State);
 759   1          
 760   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 761   1          if(State == _ST_ADJUST)
 762   1          {
 763   2              ucColor1 = StateColor(_ST_SELECT);
 764   2          }
 765   1          else
 766   1          {
 767   2              ucColor1 = ucColor;
 768   2          }
 769   1              #endif  
 770   1          
 771   1          y = SHOWINDEX_TO_LINE(y);
 772   1          
 773   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sHue[GET_LANGUAGE()],y,ucColor,State);
                      #endif
 776   1          
 777   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 778   1          SubMenuTextOut(sHue[GET_LANGUAGE()],y,ucColor1,State);
 779   1              #endif
 780   1          // draw slider
 781   1          OSD_SLIDER(y,GET_HUE(),ucColor);  
 782   1      }
 783          
 784          //---------------------------------------------------------------------------
 785          void HueAdjust(BYTE ucMode)
 786          {
 787   1          // ucMode : _INC or _DEC
 788   1          BYTE y;
 789   1          
 790   1          SET_KEYREPEATENABLE();
 791   1          stHueSatData.Hue = ValueInRangeChange(0, 100, stHueSatData.Hue, _NON_LOOP | ucMode);
 792   1          if(bSourceVideo())
 793   1              gmi_CAdjustVDCHue(GET_HUE());
 794   1          else
 795   1              CAdjustYpbprhue(GET_HUE());
 796   1          ucOsdEventMsg = _SAVE_EE_HUE_SAT_DATA_MSG;
 797   1          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 14  

 798   1          
 799   1          // get display line
 800   1          y = GetShowIndex(_MI_HUE,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 801   1          
 802   1          if(y == _NOT_SHOW)
 803   1              return;
 804   1          
 805   1          y = SHOWINDEX_TO_LINE(y);
 806   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,GET_HUE(),_MENU_SECECT_COLOR);
                      #endif
 809   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 810   1          OSD_SLIDER(y,GET_HUE(),_MENU_ADJUST_COLOR);
 811   1              #endif   
 812   1      }
 813          
 814          //---------------------------------------------------------------------------
 815          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 816          void DrawSaturation(BYTE State)
 817          {
 818   1          BYTE y;
 819   1          BYTE ucColor;
 820   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
 821   1          BYTE ucColor1;
 822   1              #endif  
 823   1          
 824   1          // get display line
 825   1          y = GetShowIndex(_MI_SATURATION,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 826   1          
 827   1          if(y == _NOT_SHOW)
 828   1              return;
 829   1          
 830   1          // get display color
 831   1          ucColor = StateColor(State);
 832   1          
 833   1          y = SHOWINDEX_TO_LINE(y);
 834   1          
 835   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 836   1          if(State == _ST_ADJUST)
 837   1          {
 838   2              ucColor1 = StateColor(_ST_SELECT);
 839   2          }
 840   1          else
 841   1          {
 842   2              ucColor1 = ucColor;
 843   2          }
 844   1              #endif  
 845   1          
 846   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sSaturation[GET_LANGUAGE()],y,ucColor,State);
                      #endif
 849   1          
 850   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
 851   1          SubMenuTextOut(sSaturation[GET_LANGUAGE()],y,ucColor1,State);
 852   1              #endif
 853   1          // draw slider
 854   1          OSD_SLIDER(y,GET_SATURATION(),ucColor);
 855   1      }
 856          
 857          //---------------------------------------------------------------------------
 858          void SaturationAdjust(BYTE ucMode)
 859          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 15  

 860   1          // ucMode : _INC or _DEC
 861   1          BYTE y;
 862   1          
 863   1          SET_KEYREPEATENABLE();
 864   1          stHueSatData.Saturation = ValueInRangeChange(0, 100, stHueSatData.Saturation, _NON_LOOP | ucMode);
 865   1          if(bSourceVideo())
 866   1              CVideoSetSaturation(GET_SATURATION());
 867   1          else
 868   1              CAdjustYpbprSaturation(GET_SATURATION());
 869   1          ucOsdEventMsg = _SAVE_EE_HUE_SAT_DATA_MSG;            
 870   1          
 871   1          
 872   1          // get display line
 873   1          y = GetShowIndex(_MI_SATURATION,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 874   1          
 875   1          if(y == _NOT_SHOW)
 876   1              return;
 877   1          
 878   1          y = SHOWINDEX_TO_LINE(y);
 879   1          
 880   1              #if(_KEY_TYPE == _KT_PCB2660_003)   
                  OSD_SLIDER(y,GET_SATURATION(),_MENU_SECECT_COLOR);
                      #endif
 883   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)    
 884   1          OSD_SLIDER(y,GET_SATURATION(),_MENU_ADJUST_COLOR);
 885   1              #endif  
 886   1      }
 887          
 888          //---------------------------------------------------------------------------
 889          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 890          void DrawColorTemp(BYTE State)
 891          {
 892   1          BYTE y;
 893   1          BYTE ucColor;
 894   1          char *pStr;
 895   1          
 896   1          // get display line
 897   1          y = GetShowIndex(_MI_COLORTEMP,BEGIN(_MI_BRIGHTNESS),END(_MI_COLORTEMP));
 898   1          
 899   1          if(y == _NOT_SHOW)
 900   1              return;
 901   1          
 902   1          // get display color
 903   1          ucColor = StateColor(State);
 904   1          
 905   1          y = SHOWINDEX_TO_LINE(y);
 906   1          
 907   1          SubMenuTextOut(sColorTemp[GET_LANGUAGE()],y,ucColor,State);
 908   1          
 909   1          switch(GET_COLOR_TEMP_TYPE())
 910   1          {
 911   2          case _CT_9300:          pStr = s9300[GET_LANGUAGE()];       break;
 912   2          case _CT_6500:          pStr = s6500[GET_LANGUAGE()];       break;
 913   2          case _CT_USER:
 914   2          default:                pStr = sUser[GET_LANGUAGE()];       break;
 915   2          }       
 916   1          
 917   1          SUBMENU_RIGHT_TEXTOUT(pStr, y);  
 918   1      }
 919          
 920          //---------------------------------------------------------------------------
 921          // ucItem : MainMenu\Color\_MI_BRIGHTNESS,_MI_CONTRAST,_MI_HUE,_MI_SATURATION,_MI_COLORTEMP,
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 16  

 922          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 923          void DrawColorPageMenuItem(BYTE ucItem,BYTE ucState)
 924          {
 925   1          if(!g_tMenuItem[ucItem].Enable())
 926   1          {
 927   2              ucState = _ST_DISABLE;  
 928   2          }
 929   1          
 930   1          switch(ucItem)
 931   1          {
 932   2          case _MI_BRIGHTNESS:        DrawBright(ucState);        break;
 933   2          case _MI_CONTRAST:          DrawContrast(ucState);      break;
 934   2          case _MI_HUE:               DrawHue(ucState);           break;
 935   2          case _MI_SATURATION:        DrawSaturation(ucState);    break;
 936   2          case _MI_COLORTEMP:         DrawColorTemp(ucState);     break;
 937   2          }
 938   1      }
 939          
 940          //---------------------------------------------------------------------------
 941          //  SUBMENU_TEXTOUT(sSpace,Row);
 942          void DrawPageNullLine(BYTE MenuBegin,BYTE MenuEnd)
 943          {
 944   1          BYTE ucCount = GetShowCount(MenuBegin,MenuEnd);
 945   1          
 946   1          for(;ucCount<6;ucCount++)
 947   1          {
 948   2              SUBMENU_TEXTOUT(sSpace,SHOWINDEX_TO_LINE(ucCount));
 949   2          }
 950   1      }
 951          
 952          //---------------------------------------------------------------------------
 953          // MainMenu\Color\_MI_BRIGHTNESS,_MI_CONTRAST,_MI_HUE,_MI_SATURATION,_MI_COLORTEMP,
 954          void DrawColorPage(void)
 955          {
 956   1          BYTE i;
 957   1          BYTE ucState;
 958   1          
 959   1          for(i=_MI_BRIGHTNESS;i<=_MI_COLORTEMP;i++)
 960   1          {
 961   2              if(i == ucOsdState)
 962   2              {
 963   3                  ucState = _ST_SELECT;
 964   3              }
 965   2              else
 966   2              {
 967   3                  ucState = _ST_NORMAL;
 968   3              }
 969   2              
 970   2              DrawColorPageMenuItem(i,        ucState);
 971   2          }
 972   1          DrawPageNullLine(_MI_BRIGHTNESS,_MI_COLORTEMP);
 973   1      }
 974          
 975          //---------------------------------------------------------------------------
 976          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 977          void DrawAutoAdjust(BYTE State)
 978          {
 979   1          BYTE y;
 980   1          BYTE ucColor;
 981   1          
 982   1          // get display line
 983   1          y = GetShowIndex(_MI_AUTOADJUST,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 17  

 984   1          
 985   1          if(y == _NOT_SHOW)
 986   1              return;
 987   1          
 988   1          // get display color
 989   1          ucColor = StateColor(State);
 990   1          
 991   1          y = SHOWINDEX_TO_LINE(y);
 992   1          
 993   1          SubMenuTextOut(sAutoConfig[GET_LANGUAGE()],y,ucColor,State);
 994   1          
 995   1      }
 996          
 997          //---------------------------------------------------------------------------
 998          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
 999          void DrawHPosition(BYTE State)
1000          {
1001   1          BYTE y;
1002   1          BYTE ucColor;
1003   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)      
1004   1          BYTE ucColor1;
1005   1              #endif  
1006   1          
1007   1          // get display line
1008   1          y = GetShowIndex(_MI_HPOSITION,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1009   1          
1010   1          if(y == _NOT_SHOW)
1011   1              return;
1012   1          
1013   1          // get display color
1014   1          ucColor = StateColor(State);
1015   1          
1016   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1017   1          if(State == _ST_ADJUST)
1018   1          {
1019   2              ucColor1 = StateColor(_ST_SELECT);
1020   2          }
1021   1          else
1022   1          {
1023   2              ucColor1 = ucColor;
1024   2          }
1025   1              #endif  
1026   1          
1027   1          y = SHOWINDEX_TO_LINE(y);
1028   1          
1029   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                      SubMenuTextOut(sHPosition[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1032   1          
1033   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1034   1          SubMenuTextOut(sHPosition[GET_LANGUAGE()],y,ucColor1,State);
1035   1              #endif
1036   1          
1037   1          // draw slider
1038   1          OSD_SLIDER(y,COsdCtrlGetHPosition(),ucColor); 
1039   1      }
1040          
1041          //---------------------------------------------------------------------------
1042          void HPositionAdjust(BYTE ucMode)
1043          {
1044   1          // ucMode : _INC or _DEC
1045   1          BYTE y;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 18  

1046   1          
1047   1          SET_KEYREPEATENABLE();
1048   1          
1049   1          stModeUserData.HPosition = ValueInRangeChange(stModeUserCenterData.CenterHPos - _HPOSITION_BIAS,
1050   1              stModeUserCenterData.CenterHPos + _HPOSITION_BIAS,
1051   1              stModeUserData.HPosition,_NON_LOOP | ucMode);
1052   1          
1053   1          ucOsdEventMsg = _SAVE_EE_MODEUSERDATA_MSG;
1054   1          CAdjustHPosition();
1055   1          
1056   1          // get display line
1057   1          y = GetShowIndex(_MI_HPOSITION,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1058   1          
1059   1          if(y == _NOT_SHOW)
1060   1              return;
1061   1          
1062   1          y = SHOWINDEX_TO_LINE(y);
1063   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,COsdCtrlGetHPosition(),_MENU_SECECT_COLOR);
                      #endif
1066   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1067   1          OSD_SLIDER(y,COsdCtrlGetHPosition(),_MENU_ADJUST_COLOR);
1068   1              #endif
1069   1      }
1070          
1071          //---------------------------------------------------------------------------
1072          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1073          void DrawVPosition(BYTE State)
1074          {
1075   1          BYTE y;
1076   1          BYTE ucColor;
1077   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1078   1          BYTE ucColor1;
1079   1              #endif
1080   1          
1081   1          // get display line
1082   1          y = GetShowIndex(_MI_VPOSITION,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1083   1          
1084   1          if(y == _NOT_SHOW)
1085   1              return;
1086   1          
1087   1          // get display color
1088   1          ucColor = StateColor(State);
1089   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1090   1          if(State == _ST_ADJUST)
1091   1          {
1092   2              ucColor1 = StateColor(_ST_SELECT);
1093   2          }
1094   1          else
1095   1          {
1096   2              ucColor1 = ucColor;
1097   2          }   
1098   1              #endif
1099   1          
1100   1          y = SHOWINDEX_TO_LINE(y);
1101   1          
1102   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sVPosition[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1105   1          
1106   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1107   1          SubMenuTextOut(sVPosition[GET_LANGUAGE()],y,ucColor1,State);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 19  

1108   1              #endif
1109   1          // draw slider
1110   1          OSD_SLIDER(y,COsdCtrlGetVPosition(),ucColor);  
1111   1      }
1112          
1113          //---------------------------------------------------------------------------
1114          void VPositionAdjust(BYTE ucMode)
1115          {
1116   1          // ucMode : _INC or _DEC
1117   1          BYTE y;
1118   1          
1119   1          SET_KEYREPEATENABLE();
1120   1          
1121   1          stModeUserData.VPosition = ValueInRangeChange(stModeUserCenterData.CenterVPos - _VPOSITION_BIAS,
1122   1              stModeUserCenterData.CenterVPos + _VPOSITION_BIAS,
1123   1              stModeUserData.VPosition,
1124   1              _NON_LOOP | ucMode);
1125   1          
1126   1          ucOsdEventMsg = _SAVE_EE_MODEUSERDATA_MSG;
1127   1          CAdjustVPosition();
1128   1          
1129   1          // get display line
1130   1          y = GetShowIndex(_MI_VPOSITION,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1131   1          
1132   1          if(y == _NOT_SHOW)
1133   1              return;
1134   1          
1135   1          y = SHOWINDEX_TO_LINE(y);
1136   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,COsdCtrlGetVPosition(),_MENU_SECECT_COLOR);
                      #endif
1139   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1140   1          OSD_SLIDER(y,COsdCtrlGetVPosition(),_MENU_ADJUST_COLOR);
1141   1              #endif
1142   1      }
1143          
1144          //---------------------------------------------------------------------------
1145          void PhaseAdjust(BYTE ucMode)
1146          {
1147   1          // ucMode : _INC or _DEC
1148   1          BYTE y;
1149   1          
1150   1          SET_KEYREPEATENABLE();
1151   1          
1152   1          stModeUserData.Phase = ValueInRangeChange(0, 63, stModeUserData.Phase, _NON_LOOP | ucMode);
1153   1          
1154   1          ucOsdEventMsg = _SAVE_EE_MODEUSERDATA_MSG;
1155   1          CAdjustPhase(stModeUserData.Phase);
1156   1          
1157   1          // get display line
1158   1          y = GetShowIndex(_MI_PHASE,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1159   1          
1160   1          if(y == _NOT_SHOW)
1161   1              return;
1162   1          
1163   1          y = SHOWINDEX_TO_LINE(y);
1164   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSDSlider(y, 30, 10, stModeUserData.Phase, 63, _MENU_SECECT_COLOR);
                      #endif
1167   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1168   1          OSDSlider(y, 30, 10, stModeUserData.Phase, 63, _MENU_ADJUST_COLOR);
1169   1              #endif
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 20  

1170   1      }
1171          
1172          //---------------------------------------------------------------------------
1173          void ClockAdjust(BYTE ucMode)
1174          {
1175   1          // ucMode : _INC or _DEC
1176   1          BYTE y;
1177   1          
1178   1          SET_KEYREPEATENABLE();
1179   1          
1180   1          // stModeUserData.VPosition = ValueInRangeChange(stModeUserCenterData.CenterVPos - _VPOSITION_BIAS,stM
             -odeUserCenterData.CenterVPos + _VPOSITION_BIAS,stModeUserData.VPosition,_NON_LOOP | ucMode);
1181   1          stModeUserData.Clock = ValueInRangeChange(COsdFxGetAdcClockRange(_GET_CLOCKRANGE_MIN), COsdFxGetAdcClo
             -ckRange(_GET_CLOCKRANGE_MAX), stModeUserData.Clock, _NON_LOOP | ucMode);
1182   1          
1183   1          ucOsdEventMsg = _SAVE_EE_MODEUSERDATA_MSG;
1184   1                 //080324
1185   1      ///     CAdjustAdcClock(stModeUserData.Clock);
1186   1              CAdjustAdcClock(stModeUserData.Clock, 2);
1187   1          
1188   1          // get display line
1189   1          y = GetShowIndex(_MI_CLOCK,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1190   1          
1191   1          if(y == _NOT_SHOW)
1192   1              return;
1193   1          
1194   1          y = SHOWINDEX_TO_LINE(y);
1195   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,COsdCtrlGetClock(),_MENU_SECECT_COLOR);
                      #endif
1198   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1199   1          OSD_SLIDER(y,COsdCtrlGetClock(),_MENU_ADJUST_COLOR);
1200   1              #endif
1201   1      }
1202          
1203          //---------------------------------------------------------------------------
1204          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1205          void DrawPhase(BYTE State)
1206          {
1207   1          BYTE y;
1208   1          BYTE ucColor;
1209   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1210   1          BYTE ucColor1;
1211   1              #endif
1212   1          
1213   1          // get display line
1214   1          y = GetShowIndex(_MI_PHASE,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1215   1          
1216   1          if(y == _NOT_SHOW)
1217   1              return;
1218   1          
1219   1          // get display color
1220   1          ucColor = StateColor(State);
1221   1          
1222   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1223   1          if(State == _ST_ADJUST)
1224   1          {
1225   2              ucColor1 = StateColor(_ST_SELECT);
1226   2          }
1227   1          else
1228   1          {
1229   2              ucColor1 = ucColor;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 21  

1230   2          }       
1231   1              #endif
1232   1          
1233   1          y = SHOWINDEX_TO_LINE(y);
1234   1          
1235   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1236   1          SubMenuTextOut(sPhase[GET_LANGUAGE()],y,ucColor1,State);
1237   1              #endif
1238   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sPhase[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1241   1          // draw slider
1242   1          OSDSlider(y, 30, 10, stModeUserData.Phase, 63, ucColor);
1243   1      }
1244          
1245          //---------------------------------------------------------------------------
1246          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1247          void DrawClock(BYTE State)
1248          {
1249   1          BYTE y;
1250   1          BYTE ucColor;
1251   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1252   1          BYTE ucColor1;
1253   1              #endif  
1254   1          
1255   1          // get display line
1256   1          y = GetShowIndex(_MI_CLOCK,BEGIN(_MI_AUTOADJUST),END(_MI_CLOCK));
1257   1          
1258   1          if(y == _NOT_SHOW)
1259   1              return;
1260   1          
1261   1          // get display color
1262   1          ucColor = StateColor(State);
1263   1          
1264   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1265   1          if(State == _ST_ADJUST)
1266   1          {
1267   2              ucColor1 = StateColor(_ST_SELECT);
1268   2          }
1269   1          else
1270   1          {
1271   2              ucColor1 = ucColor;
1272   2          }   
1273   1              #endif  
1274   1          
1275   1          y = SHOWINDEX_TO_LINE(y);
1276   1          
1277   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1278   1          SubMenuTextOut(sClock[GET_LANGUAGE()],y,ucColor1,State);
1279   1              #endif
1280   1          
1281   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sClock[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1284   1          
1285   1          // draw slider
1286   1          OSD_SLIDER(y,COsdCtrlGetClock(),ucColor);
1287   1          
1288   1      }
1289          
1290          //---------------------------------------------------------------------------
1291          // ucItem : MainMenu\Adjust\_MI_AUTOADJUST,_MI_HPOSITION,_MI_VPOSITION,_MI_PHASE,_MI_CLOCK,
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 22  

1292          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1293          void DrawAdjustPageMenuItem(BYTE ucItem,BYTE ucState)
1294          {
1295   1          if(!g_tMenuItem[ucItem].Enable())
1296   1          {
1297   2              ucState = _ST_DISABLE;  
1298   2          }
1299   1          
1300   1          switch(ucItem)
1301   1          {
1302   2          case _MI_AUTOADJUST:        DrawAutoAdjust(ucState);        break;
1303   2          case _MI_HPOSITION:         DrawHPosition(ucState);         break;
1304   2          case _MI_VPOSITION:         DrawVPosition(ucState);         break;
1305   2          case _MI_PHASE:             DrawPhase(ucState);             break;
1306   2          case _MI_CLOCK:             DrawClock(ucState);             break;
1307   2          }
1308   1      }
1309          
1310          //---------------------------------------------------------------------------
1311          // MainMenu\Adjust\_MI_AUTOADJUST,_MI_HPOSITION,_MI_VPOSITION,_MI_PHASE,_MI_CLOCK,
1312          void DrawAdjustPage(void)
1313          {
1314   1          BYTE i;
1315   1          BYTE ucState;
1316   1          
1317   1          for(i=_MI_AUTOADJUST;i<=_MI_CLOCK;i++)
1318   1          {
1319   2              if(i == ucOsdState)
1320   2              {
1321   3                  ucState = _ST_SELECT;
1322   3              }
1323   2              else
1324   2              {
1325   3                  ucState = _ST_NORMAL;
1326   3              }
1327   2              
1328   2              DrawAdjustPageMenuItem(i,       ucState);
1329   2          }
1330   1          DrawPageNullLine(_MI_AUTOADJUST,_MI_CLOCK);
1331   1      }
1332          
1333          //---------------------------------------------------------------------------
1334          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1335          void DrawLanguage(BYTE State)
1336          {
1337   1          BYTE y;
1338   1          BYTE ucColor;
1339   1          
1340   1          // get display line
1341   1          y = GetShowIndex(_MI_LANGUAGE,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
1342   1          
1343   1          if(y == _NOT_SHOW)
1344   1              return;
1345   1          
1346   1          // get display color
1347   1          ucColor = StateColor(State);
1348   1          
1349   1          y = SHOWINDEX_TO_LINE(y);
1350   1          
1351   1          SubMenuTextOut(sLanguage[GET_LANGUAGE()],y,ucColor,State);
1352   1          
1353   1          SUBMENU_RIGHT_TEXTOUT(sLanguageName[GET_LANGUAGE()],y);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 23  

1354   1      }
1355          
1356          //---------------------------------------------------------------------------
1357          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1358          void DrawOSDHPosition(BYTE State)
1359          {
1360   1          BYTE y;
1361   1          BYTE ucColor;
1362   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1363   1          BYTE ucColor1;
1364   1              #endif
1365   1          
1366   1          // get display line
1367   1          y = GetShowIndex(_MI_OSD_HPOSITION,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
1368   1          
1369   1          if(y == _NOT_SHOW)
1370   1              return;
1371   1          
1372   1          // get display color
1373   1          ucColor = StateColor(State);
1374   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1375   1          if(State == _ST_ADJUST)
1376   1          {
1377   2              ucColor1 = StateColor(_ST_SELECT);
1378   2          }
1379   1          else
1380   1          {
1381   2              ucColor1 = ucColor;
1382   2          }   
1383   1              #endif  
1384   1          
1385   1          y = SHOWINDEX_TO_LINE(y);
1386   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sHPosition[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1389   1          
1390   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1391   1          SubMenuTextOut(sHPosition[GET_LANGUAGE()],y,ucColor1,State);
1392   1              #endif
1393   1          // draw slider
1394   1          OSD_SLIDER(y,stOsdUserData.OsdHPos,ucColor);
1395   1      }
1396          
1397          //---------------------------------------------------------------------------
1398          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1399          void DrawOSDVPosition(BYTE State)
1400          {
1401   1          BYTE y;
1402   1          BYTE ucColor;
1403   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1404   1          BYTE ucColor1;
1405   1              #endif  
1406   1          
1407   1          // get display line
1408   1          y = GetShowIndex(_MI_OSD_VPOSITION,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
1409   1          
1410   1          if(y == _NOT_SHOW)
1411   1              return;
1412   1          
1413   1          // get display color
1414   1          ucColor = StateColor(State);
1415   1          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 24  

1416   1          y = SHOWINDEX_TO_LINE(y);
1417   1          
1418   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)      
1419   1          if(State == _ST_ADJUST)
1420   1          {
1421   2              ucColor1 = StateColor(_ST_SELECT);
1422   2          }
1423   1          else
1424   1          {
1425   2              ucColor1 = ucColor;
1426   2          }   
1427   1          
1428   1          SubMenuTextOut(sVPosition[GET_LANGUAGE()],y,ucColor1,State);
1429   1              #endif
1430   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sVPosition[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1433   1          
1434   1          // draw slider
1435   1          OSD_SLIDER(y,stOsdUserData.OsdVPos,ucColor);
1436   1      }
1437          
1438          //---------------------------------------------------------------------------
1439          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1440          void DrawOSDTimer(BYTE State)
1441          {
1442   1          BYTE y;
1443   1          BYTE ucColor;
1444   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1445   1          BYTE ucColor1;
1446   1              #endif  
1447   1          
1448   1          // get display line
1449   1          y = GetShowIndex(_MI_TIMER,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
1450   1          
1451   1          if(y == _NOT_SHOW)
1452   1              return;
1453   1          
1454   1          // get display color
1455   1          ucColor = StateColor(State);
1456   1          
1457   1          y = SHOWINDEX_TO_LINE(y);
1458   1          
1459   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
1460   1          if(State == _ST_ADJUST)
1461   1          {
1462   2              ucColor1 = StateColor(_ST_SELECT);
1463   2          }
1464   1          else
1465   1          {
1466   2              ucColor1 = ucColor;
1467   2          }   
1468   1          
1469   1          SubMenuTextOut(sTimer[GET_LANGUAGE()],y,ucColor1,State);
1470   1              #endif
1471   1          
1472   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sTimer[GET_LANGUAGE()],y,ucColor,State);
                      #endif
1475   1          
1476   1          OSDLine(y, _MSG_COL, LENGTH(10), ucColor, BYTE_COLOR);
1477   1          if (stOsdUserData.OsdTimeout < 5)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 25  

1478   1          {
1479   2              stOsdUserData.OsdTimeout = 0;
1480   2              SUBMENU_RIGHT_TEXTOUT(sOff[GET_LANGUAGE()], y);
1481   2          }
1482   1          else
1483   1          {       
1484   2              CShowNumber(_MSG_COL, y, GET_OSDTIMEOUT());
1485   2          }
1486   1      }
1487          
1488          //---------------------------------------------------------------------------
1489          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1490          void DrawDouble(BYTE State)
1491          {
1492   1          BYTE y;
1493   1          BYTE ucColor;
1494   1          BYTE *pStr;
1495   1          
1496   1          // get display line
1497   1          y = GetShowIndex(_MI_DOUBLE,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
1498   1          
1499   1          if(y == _NOT_SHOW)
1500   1              return;
1501   1          
1502   1          // get display color
1503   1          ucColor = StateColor(State);
1504   1          
1505   1          y = SHOWINDEX_TO_LINE(y);
1506   1          
1507   1          SubMenuTextOut(sDouble[GET_LANGUAGE()],y,ucColor,State);
1508   1          
1509   1          if(GET_OSD_SIZE())
1510   1              pStr = sOn[GET_LANGUAGE()];
1511   1          else pStr = sOff[GET_LANGUAGE()];
1512   1          SUBMENU_RIGHT_TEXTOUT(pStr, y);
1513   1      }
1514          
1515          //---------------------------------------------------------------------------
1516          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1517          void DrawTransparent(BYTE State)
1518          {
1519   1          BYTE y;
1520   1          BYTE ucColor;
1521   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1522   1          BYTE ucColor1;
1523   1              #endif  
1524   1          
1525   1          // get display line
1526   1          y = GetShowIndex(_MI_TRANSPARENT,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
1527   1          
1528   1          if(y == _NOT_SHOW)
1529   1          {
1530   2              return;
1531   2          }
1532   1          
1533   1          // get display color
1534   1          ucColor = StateColor(State);
1535   1          
1536   1          y = SHOWINDEX_TO_LINE(y);
1537   1          
1538   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
1539   1          if(State == _ST_ADJUST)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 26  

1540   1          {
1541   2              ucColor1 = StateColor(_ST_SELECT);
1542   2          }
1543   1          else
1544   1          {
1545   2              ucColor1 = ucColor;
1546   2          }   
1547   1          
1548   1          SubMenuTextOut(sTransparent[GET_LANGUAGE()],y,ucColor1,State);
1549   1              #endif
1550   1          
1551   1              #if(_KEY_TYPE == _KT_PCB2660_003)   
                  SubMenuTextOut(sTransparent[GET_LANGUAGE()],y,ucColor,State);
                      #endif  
1554   1          
1555   1          OSDLine(y, _MSG_COL, LENGTH(10), ucColor, BYTE_COLOR);
1556   1          if (0 == GET_OSDBLENDING())
1557   1              SUBMENU_RIGHT_TEXTOUT(sOff[GET_LANGUAGE()], y);
1558   1          else
1559   1              CShowNumber(_MSG_COL, y, GET_OSDBLENDING());
1560   1      }
1561          
1562          //---------------------------------------------------------------------------
1563          // ucItem : MainMenu\OSD\_MI_LANGUAGE,_MI_OSD_HPOSITION,_MI_OSD_VPOSITION,_MI_TIMER,_MI_DOUBLE,_MI_TRANSPA
             -RENT,
1564          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1565          void DrawOsdPageMenuItem(BYTE ucItem,BYTE ucState)
1566          {
1567   1          if(!g_tMenuItem[ucItem].Enable())
1568   1          {   
1569   2              ucState = _ST_DISABLE;  
1570   2          }
1571   1          
1572   1          switch(ucItem)
1573   1          {
1574   2          case _MI_LANGUAGE:              DrawLanguage(ucState);              break;
1575   2          case _MI_OSD_HPOSITION:         DrawOSDHPosition(ucState);          break;
1576   2          case _MI_OSD_VPOSITION:         DrawOSDVPosition(ucState);          break;
1577   2          case _MI_TIMER:                 DrawOSDTimer(ucState);              break;
1578   2          case _MI_DOUBLE:                DrawDouble(ucState);                break;
1579   2          case _MI_TRANSPARENT:           DrawTransparent(ucState);           break;
1580   2          }
1581   1      }
1582          
1583          //---------------------------------------------------------------------------
1584          // MainMenu\OSD\_MI_LANGUAGE,_MI_OSD_HPOSITION,_MI_OSD_VPOSITION,_MI_TIMER,_MI_DOUBLE,_MI_TRANSPARENT,
1585          void DrawOSDPage(void)
1586          {
1587   1          BYTE i;
1588   1          BYTE ucState;
1589   1          
1590   1          for(i=_MI_LANGUAGE;i<=_MI_TRANSPARENT;i++)
1591   1          {
1592   2              if(i == ucOsdState)
1593   2              {
1594   3                  ucState = _ST_SELECT;
1595   3              }
1596   2              else
1597   2              {
1598   3                  ucState = _ST_NORMAL;
1599   3              }
1600   2              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 27  

1601   2              DrawOsdPageMenuItem(i,      ucState);
1602   2          }
1603   1          DrawPageNullLine(_MI_LANGUAGE,_MI_TRANSPARENT);
1604   1          
1605   1      }
1606          
1607          //---------------------------------------------------------------------------
1608          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1609          void DrawChannel(BYTE State)
1610          {
1611   1          BYTE y;
1612   1          BYTE ucColor;
1613   1          
1614   1          // get display line
1615   1          y = GetShowIndex(_MI_CHANNEL,BEGIN(ucStartItem),END(ucEndItem));
1616   1          
1617   1          if(y == _NOT_SHOW)
1618   1              return;
1619   1          
1620   1          // get display color
1621   1          ucColor = StateColor(State);
1622   1          
1623   1          y = SHOWINDEX_TO_LINE(y);
1624   1          
1625   1          SubMenuTextOut(sChannel[GET_LANGUAGE()],y,ucColor,State);
1626   1          CShowNumber(_MSG_COL, y, stTvInfo.CurChn);
1627   1      }
1628          
1629          //---------------------------------------------------------------------------
1630          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1631          void DrawSystem(BYTE State)
1632          {
1633   1              #if(_VIDEO_TV_SUPPORT)
                  BYTE y;
                  BYTE ucColor;
                  BYTE *pStr;
                  
                  // get display line
                  y = GetShowIndex(_MI_SYSTEM,BEGIN(ucStartItem),END(ucEndItem));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  // get display color
                  ucColor = StateColor(State);
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  SubMenuTextOut(sSystem[GET_LANGUAGE()],y,ucColor,State);
                  
                  switch(ucTVType)
                  {
                  case _TV_NTSC_M:        pStr = sNTSC_M;         break;
                  case _TV_NTSC_4_BG:     pStr = sNTSC_4_BG;      break;
                  case _TV_NTSC_4_DK:     pStr = sNTSC_4_DK;      break;
                  case _TV_NTSC_4_I:      pStr = sNTSC_4_I;       break;
                  case _TV_PAL_M:         pStr = sPAL_M;          break;
                      
                  case _TV_PAL_BG:        pStr = sPAL_BG;         break;
                  case _TV_PAL_I:         pStr = sPAL_I;          break;
                  case _TV_PAL_DK:        pStr = sPAL_DK;         break;
                  case _TV_PAL_N:         pStr = sPAL_N;          break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 28  

                      
                  case _TV_SECAM_BG:      pStr = sSECAM_BG;       break;
                  case _TV_SECAM_DK:      pStr = sSECAM_DK;       break;
                  case _TV_SECAM_L:       pStr = sSECAM_L;        break;
                  case _TV_SECAM_LL:      pStr = sSECAM_LL;       break;
                      
                  }
                  
                  OSDLine(y, COL(_MSG_COL), LENGTH(12), 0x00, BYTE_DISPLAY);
              #if (_NTSC_SEARCH_TABLE)
                  pStr = sTVTypeN[_GET_TV_TYPE()];
              #endif
                  SUBMENU_RIGHT_TEXTOUT(pStr, y);
                      #else 
1677   1          State = State;
1678   1              #endif   
1679   1      }
1680          
1681          //---------------------------------------------------------------------------
1682          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1683          void DrawAutoSearch(BYTE State)
1684          {
1685   1          BYTE y;
1686   1          BYTE ucColor;
1687   1          
1688   1          // get display line
1689   1          y = GetShowIndex(_MI_AUTOSEARCH,BEGIN(ucStartItem),END(ucEndItem));
1690   1          
1691   1          if(y == _NOT_SHOW)
1692   1              return;
1693   1          
1694   1          // get display color
1695   1          ucColor = StateColor(State);
1696   1          
1697   1          y = SHOWINDEX_TO_LINE(y);
1698   1          
1699   1          SubMenuTextOut(sAutoSearch[GET_LANGUAGE()],y,ucColor,State);
1700   1          
1701   1      }
1702          
1703          //---------------------------------------------------------------------------
1704          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1705          void DrawManualSearch(BYTE State)
1706          {
1707   1          BYTE y;
1708   1          BYTE ucColor;
1709   1          
1710   1          // get display line
1711   1          y = GetShowIndex(_MI_MANUALSEARCH,BEGIN(ucStartItem),END(ucEndItem));
1712   1          
1713   1          if(y == _NOT_SHOW)
1714   1              return;
1715   1          
1716   1          // get display color
1717   1          ucColor = StateColor(State);
1718   1          
1719   1          y = SHOWINDEX_TO_LINE(y);
1720   1          
1721   1          SubMenuTextOut(sManualSearch[GET_LANGUAGE()],y,ucColor,State);
1722   1          
1723   1      }
1724          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 29  

1725          //---------------------------------------------------------------------------
1726          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1727          void DrawTuning(BYTE State)
1728          {
1729   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE y;
                  BYTE ucColor;
              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
                  BYTE ucColor1;
              #endif  
                  
                  // get display line
                  y = GetShowIndex(_MI_TUNING,BEGIN(ucStartItem),END(ucEndItem));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  // get display color
                  ucColor = StateColor(State);
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
                  if(State == _ST_ADJUST)
                  {
                      ucColor1 = StateColor(_ST_SELECT);
                  }
                  else
                  {
                      ucColor1 = ucColor;
                  }       
                  
                  SubMenuTextOut(sTuning[GET_LANGUAGE()],y,ucColor1,State);
              #endif
                  
              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sTuning[GET_LANGUAGE()],y,ucColor,State);
              #endif
                  
                  OSDLine(y, _MSG_COL, LENGTH(10), ucColor, BYTE_COLOR);
                  CShowFreq(CLoadChannelFreq(stTvInfo.CurChn), _MSG_COL, y);
              
              #else
1768   1      
1769   1          State = State;
1770   1      
1771   1      #endif
1772   1      
1773   1      }
1774          
1775          //---------------------------------------------------------------------------
1776          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1777          void DrawSkip(BYTE State)
1778          {
1779   1              #if(_VIDEO_TV_SUPPORT)
                  BYTE y;
                  BYTE ucColor;
                  BYTE *pStr;
                  bit fSkip;
                  
                  // get display line
                  y = GetShowIndex(_MI_SKIP,BEGIN(ucStartItem),END(ucEndItem));
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 30  

                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  // get display color
                  ucColor = StateColor(State);
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  SubMenuTextOut(sSkip[GET_LANGUAGE()],y,ucColor,State);
                  
                  fSkip = CLoadChannelSkip(stTvInfo.CurChn);
                  
                  if(fSkip)
                      pStr = sOn[GET_LANGUAGE()];
                  else 
                      pStr = sOff[GET_LANGUAGE()];
                  
                  SUBMENU_RIGHT_TEXTOUT(pStr, y);
                      #else   
1807   1          State = State;
1808   1              #endif
1809   1      }
1810          //---------------------------------------------------------------------------
1811          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1812          void DrawSwap(BYTE State)
1813          {
1814   1      #if(_VIDEO_TV_SUPPORT)
              
                  BYTE y;
                  BYTE ucColor;
                  
                  // get display line
                  y = GetShowIndex(_MI_SWAP,BEGIN(ucStartItem),END(ucEndItem));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  // get display color
                  ucColor = StateColor(State);
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  SubMenuTextOut(sSwap[GET_LANGUAGE()],y,ucColor,State);
                  
                  CShowNumber(_MSG_COL, y, stTvInfo.CurChn);
              
              #else
1835   1          
1836   1          State = State;
1837   1      
1838   1      #endif
1839   1      }
1840          //---------------------------------------------------------------------------
1841          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1842          void DrawAFC(BYTE State)
1843          {
1844   1      #if(_VIDEO_TV_SUPPORT && _TV_AFC)
              
                  BYTE y;
                  BYTE ucColor;
                  
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 31  

                  // get display line
                  y = GetShowIndex(_MI_AFC,BEGIN(ucStartItem),END(ucEndItem));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  // get display color
                  ucColor = StateColor(State);
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  SubMenuTextOut(sAFC[GET_LANGUAGE()],y,ucColor,State);
                                      
                  SUBMENU_RIGHT_TEXTOUT(SOnOff[GET_AFC_MODE()][GET_LANGUAGE()], y);
              
              #else
1865   1          
1866   1          State = State;
1867   1      
1868   1      #endif
1869   1      }//---------------------------------------------------------------------------
1870          
1871          // ucItem : MainMenu\TV\_MI_CHANNEL,_MI_SYSTEM,_MI_AUTOSEARCH,_MI_MANUALSEARCH,_MI_TUNING,_MI_SKIP,
1872          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1873          void DrawTVPageMenuItem(BYTE ucItem,BYTE ucState)
1874          {
1875   1          if(!g_tMenuItem[ucItem].Enable())
1876   1          {
1877   2              ucState = _ST_DISABLE;  
1878   2          }
1879   1          
1880   1          switch(ucItem)
1881   1          {
1882   2          case _MI_CHANNEL:               DrawChannel(ucState);               break;
1883   2          case _MI_SYSTEM:                DrawSystem(ucState);                break;
1884   2          case _MI_AUTOSEARCH:            DrawAutoSearch(ucState);            break;
1885   2          case _MI_MANUALSEARCH:          DrawManualSearch(ucState);          break;
1886   2          case _MI_TUNING:                DrawTuning(ucState);                break;
1887   2          case _MI_SKIP:                  DrawSkip(ucState);                  break;
1888   2          case _MI_SWAP:                  DrawSwap(ucState);                  break;
1889   2          case _MI_AFC:                   DrawAFC(ucState);                   break;
1890   2          }
1891   1      }
1892          
1893          //---------------------------------------------------------------------------
1894          // MainMenu\TV\_MI_CHANNEL,_MI_SYSTEM,_MI_AUTOSEARCH,_MI_MANUALSEARCH,_MI_TUNING,_MI_SKIP,
1895          void DrawTVPage(void)
1896          {
1897   1          BYTE i;
1898   1          BYTE ucState;
1899   1          
1900   1          for(i=ucStartItem;i<=ucEndItem;i++)
1901   1          {
1902   2              if(i == ucOsdState)
1903   2              {
1904   3                  ucState = _ST_SELECT;
1905   3              }
1906   2              else
1907   2              {
1908   3                  ucState = _ST_NORMAL;
1909   3              }
1910   2              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 32  

1911   2              DrawTVPageMenuItem(i,       ucState);
1912   2          }
1913   1          DrawPageNullLine(ucStartItem,ucEndItem);
1914   1      }
1915          
1916          //---------------------------------------------------------------------------
1917          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1918          void DrawReset(BYTE State)
1919          {
1920   1          BYTE y;
1921   1          BYTE ucColor;
1922   1          
1923   1          // get display line
1924   1          y = GetShowIndex(_MI_RESET,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
1925   1          
1926   1          if(y == _NOT_SHOW)
1927   1              return;
1928   1          
1929   1          // get display color
1930   1          ucColor = StateColor(State);
1931   1          
1932   1          y = SHOWINDEX_TO_LINE(y);
1933   1          
1934   1          SubMenuTextOut(sReset[GET_LANGUAGE()],y,ucColor,State);
1935   1      }
1936          
1937          //---------------------------------------------------------------------------
1938          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1939          void DrawDisplayRatio(BYTE State)
1940          {
1941   1          BYTE y;
1942   1          BYTE ucColor;
1943   1          BYTE *pStr;
1944   1          
1945   1          // get display line
1946   1          y = GetShowIndex(_MI_DISPLAYRATIO,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
1947   1          
1948   1          if(y == _NOT_SHOW)
1949   1              return;
1950   1          
1951   1          // get display color
1952   1          ucColor = StateColor(State);
1953   1          
1954   1          y = SHOWINDEX_TO_LINE(y);
1955   1          
1956   1          SubMenuTextOut(sDisplayRatio[GET_LANGUAGE()],y,ucColor,State);
1957   1          
1958   1              if(GET_DISPLAYMODE() == _DISPMODE_FULL)
1959   1              {
1960   2                      pStr = s16_9;
1961   2              }
1962   1              else if(GET_DISPLAYMODE() == _DISPMODE_43)
1963   1              {
1964   2                      pStr = s4_3;
1965   2              }
1966   1              else
1967   1              {
1968   2                      pStr = sAuto;
1969   2              }
1970   1          
1971   1          SUBMENU_RIGHT_TEXTOUT(pStr, y);
1972   1          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 33  

1973   1      }
1974          
1975          //---------------------------------------------------------------------------
1976          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
1977          void DrawAutoPowerDown(BYTE State)
1978          {
1979   1          BYTE y;
1980   1          BYTE ucColor;
1981   1          BYTE *pStr;
1982   1          
1983   1          // get display line
1984   1          y = GetShowIndex(_MI_AUTOPOWERDOWN,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
1985   1          
1986   1          if(y == _NOT_SHOW)
1987   1              return;
1988   1          
1989   1          // get display color
1990   1          ucColor = StateColor(State);
1991   1          
1992   1          y = SHOWINDEX_TO_LINE(y);
1993   1          
1994   1          SubMenuTextOut(sAutoPowerDown[GET_LANGUAGE()],y,ucColor,State);
1995   1          
1996   1          switch(_GET_POWER_DOWN_TIME())
1997   1          {
1998   2          case 0x00:          pStr = sOff[GET_LANGUAGE()];    break;
1999   2          case 0x01:          pStr = s15Min[GET_LANGUAGE()];  break;
2000   2          case 0x02:          pStr = s30Min[GET_LANGUAGE()];  break;
2001   2          case 0x03:          pStr = s45Min[GET_LANGUAGE()];  break;
2002   2          case 0x04:          pStr = s60Min[GET_LANGUAGE()];  break;
2003   2          case 0x05:          pStr = s75Min[GET_LANGUAGE()];  break;
2004   2          case 0x06:          pStr = s90Min[GET_LANGUAGE()];  break;
2005   2          case 0x07:          pStr = s105Min[GET_LANGUAGE()]; break;
2006   2          case 0x08:          pStr = s120Min[GET_LANGUAGE()]; break;
2007   2          }
2008   1          
2009   1          SUBMENU_RIGHT_TEXTOUT(pStr, y);
2010   1          
2011   1      }
2012          
2013          //---------------------------------------------------------------------------
2014          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2015          void DrawBlueScreen(BYTE State)
2016          {
2017   1          BYTE y;
2018   1          BYTE ucColor;
2019   1          BYTE *pStr;
2020   1          
2021   1          // get display line
2022   1          y = GetShowIndex(_MI_BLUESCREEN,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
2023   1          
2024   1          if(y == _NOT_SHOW)
2025   1              return;
2026   1          
2027   1          // get display color
2028   1          ucColor = StateColor(State);
2029   1          
2030   1          y = SHOWINDEX_TO_LINE(y);
2031   1          
2032   1          SubMenuTextOut(sBlueScreen[GET_LANGUAGE()],y,ucColor,State);
2033   1          
2034   1          if(_GET_BLUE_BACKGROUND())
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 34  

2035   1          {
2036   2              pStr = sOn[GET_LANGUAGE()];
2037   2          }
2038   1          else
2039   1          {
2040   2              pStr = sOff[GET_LANGUAGE()];
2041   2          }
2042   1          
2043   1          SUBMENU_RIGHT_TEXTOUT(pStr, y);
2044   1      }
2045          
2046          //---------------------------------------------------------------------------
2047          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2048          void DrawSharpness(BYTE State)
2049          {
2050   1          BYTE y;
2051   1          BYTE ucColor;
2052   1          
2053   1          // get display line
2054   1          y = GetShowIndex(_MI_SHARPNESS,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
2055   1          
2056   1          if(y == _NOT_SHOW)
2057   1              return;
2058   1          
2059   1          // get display color
2060   1          ucColor = StateColor(State);
2061   1          
2062   1          y = SHOWINDEX_TO_LINE(y);
2063   1          
2064   1          SubMenuTextOut(sSharpness[GET_LANGUAGE()],y,ucColor,State);
2065   1             
2066   1          CShowNumber(_MSG_COL, y, GET_PEAKING_CORING());
2067   1      }
2068          
2069          //---------------------------------------------------------------------------  
2070          // ucItem : MainMenu\Function\_MI_RESET,_MI_DISPLAYRATIO,_MI_AUTOPOWERDOWN,_MI_BLUESCREEN,_MI_SHARPNESS
2071          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2072          void DrawFuncPageMenuItem(BYTE ucItem,BYTE ucState)
2073          {
2074   1          if(!g_tMenuItem[ucItem].Enable())
2075   1          {
2076   2              ucState = _ST_DISABLE;  
2077   2          }
2078   1          
2079   1          switch(ucItem)
2080   1          {
2081   2          case _MI_RESET:             DrawReset(ucState);             break;
2082   2          case _MI_DISPLAYRATIO:      DrawDisplayRatio(ucState);      break;
2083   2          case _MI_AUTOPOWERDOWN:     DrawAutoPowerDown(ucState);     break;
2084   2          case _MI_BLUESCREEN:        DrawBlueScreen(ucState);        break;
2085   2          case _MI_SHARPNESS:         DrawSharpness(ucState);         break;
2086   2          }
2087   1      }
2088          
2089          //---------------------------------------------------------------------------
2090          // MainMenu\Function\_MI_RESET,_MI_DISPLAYRATIO,_MI_AUTOPOWERDOWN,_MI_BLUESCREEN,_MI_SHARPNESS
2091          void DrawFuncPage(void)
2092          {
2093   1          BYTE i;
2094   1          BYTE ucState;
2095   1          
2096   1          for(i=_MI_RESET;i<=_MI_SHARPNESS;i++)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 35  

2097   1          {
2098   2              if(i == ucOsdState)
2099   2              {
2100   3                  ucState = _ST_SELECT;
2101   3              }
2102   2              else
2103   2              {
2104   3                  ucState = _ST_NORMAL;
2105   3              }
2106   2              
2107   2              DrawFuncPageMenuItem(i,     ucState);
2108   2          }
2109   1          DrawPageNullLine(_MI_RESET,_MI_SHARPNESS);
2110   1      }
2111          
2112          //---------------------------------------------------------------------------
2113          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2114          void DrawVolume(BYTE State)
2115          {
2116   1          BYTE y;
2117   1          BYTE ucColor;
2118   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
2119   1          BYTE ucColor1;
2120   1              #endif  
2121   1          
2122   1          // get display line
2123   1          y = GetShowIndex(_MI_VOLUME,BEGIN(_MI_VOLUME),END(_MI_BBE));
2124   1          
2125   1          if(y == _NOT_SHOW)
2126   1              return;
2127   1          
2128   1          // get display color
2129   1          ucColor = StateColor(State);
2130   1          
2131   1          y = SHOWINDEX_TO_LINE(y);
2132   1          
2133   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)      
2134   1          if(State == _ST_ADJUST)
2135   1          {
2136   2              ucColor1 = StateColor(_ST_SELECT);
2137   2          }
2138   1          else
2139   1          {
2140   2              ucColor1 = ucColor;
2141   2          }   
2142   1          
2143   1          SubMenuTextOut(sVolume[GET_LANGUAGE()],y,ucColor1,State);
2144   1              #endif
2145   1          
2146   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sVolume[GET_LANGUAGE()],y,ucColor,State);
                      #endif
2149   1          
2150   1          // draw slider
2151   1          OSD_SLIDER(y,GET_VOLUME(),ucColor);
2152   1      
2153   1      }
2154          
2155          //---------------------------------------------------------------------------
2156          void VolumeAdjust(BYTE ucMode)
2157          {
2158   1          BYTE y;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 36  

2159   1          
2160   1          SET_KEYREPEATENABLE();
2161   1          stAudioData.Volume = ValueInRangeChange(0, 100, stAudioData.Volume, _NON_LOOP | ucMode);
2162   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
2163   1      
2164   1          if(GET_VOLUME() != 0)
2165   1          {
2166   2                      CLR_AUDIO_MUTE();
2167   2          }                        //20080304
2168   1          
2169   1          // get display line
2170   1          y = GetShowIndex(_MI_VOLUME,BEGIN(_MI_VOLUME),END(_MI_BBE));
2171   1          
2172   1          if(y == _NOT_SHOW)
2173   1              return;
2174   1          
2175   1          y = SHOWINDEX_TO_LINE(y);
2176   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,GET_VOLUME(),_MENU_SECECT_COLOR);
                      #endif
2179   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2180   1          OSD_SLIDER(y,GET_VOLUME(),_MENU_ADJUST_COLOR);
2181   1              #endif
2182   1      
2183   1          if (_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV && bTVNoSignal == 1)
2184   1              return;
2185   1      
2186   1          CSetVolume();
2187   1      }
2188          
2189          //---------------------------------------------------------------------------
2190          void CBalanceAdjust(BYTE ucMode)
2191          {
2192   1          BYTE y;
2193   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  BYTE ucColor;
                      #endif
2196   1          
2197   1          // get display line
2198   1          y = GetShowIndex(_MI_BALANCE,BEGIN(_MI_VOLUME),END(_MI_BBE));
2199   1          y = SHOWINDEX_TO_LINE(y);
2200   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  // get display color
                  ucColor = StateColor(_ST_SELECT);
                      #endif
2204   1          
2205   1          CLR_AUDIO_MUTE();
2206   1          SET_KEYREPEATENABLE();
2207   1          stAudioData.Balance = ValueInRangeChange(0, 100, stAudioData.Balance, _NON_LOOP | ucMode);
2208   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y, stAudioData.Balance, ucColor);
                      #endif
2211   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2212   1          OSD_SLIDER(y, stAudioData.Balance, _MENU_ADJUST_COLOR);
2213   1              #endif
2214   1          
2215   1              #if(_SOUND_PROCESSOR == _ON)
                  CSetAudioProcessor(stAudioData.Balance, stAudioData.Bass, stAudioData.Treble);
                      #endif
2218   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
2219   1      }
2220          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 37  

2221          //---------------------------------------------------------------------------
2222          void CBassAdjust(BYTE ucMode)
2223          {
2224   1          BYTE y;
2225   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  BYTE ucColor;
                      #endif
2228   1          
2229   1          // get display line
2230   1          y = GetShowIndex(_MI_BASS,BEGIN(_MI_VOLUME),END(_MI_BBE));
2231   1          y = SHOWINDEX_TO_LINE(y);
2232   1          // get display color
2233   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  ucColor = StateColor(_ST_SELECT);
                      #endif
2236   1          
2237   1          CLR_AUDIO_MUTE();
2238   1          SET_KEYREPEATENABLE();
2239   1          stAudioData.Bass = ValueInRangeChange(0, 100, stAudioData.Bass, _NON_LOOP | ucMode);
2240   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y, stAudioData.Bass, ucColor);
                      #endif
2243   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2244   1          OSD_SLIDER(y, stAudioData.Bass, _MENU_ADJUST_COLOR);
2245   1              #endif
2246   1              #if(_SOUND_PROCESSOR == _ON)
                  CSetAudioProcessor(stAudioData.Balance, stAudioData.Bass, stAudioData.Treble);
                      #endif
2249   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
2250   1      }
2251          
2252          //---------------------------------------------------------------------------
2253          void CTrebleAdjust(BYTE ucMode)
2254          {
2255   1          BYTE y;
2256   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  BYTE ucColor;
                      #endif
2259   1          
2260   1          // get display line
2261   1          y = GetShowIndex(_MI_TREBLE,BEGIN(_MI_VOLUME),END(_MI_BBE));
2262   1          y = SHOWINDEX_TO_LINE(y);
2263   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  // get display color
                  ucColor = StateColor(_ST_SELECT);
                      #endif
2267   1          
2268   1          CLR_AUDIO_MUTE();
2269   1          SET_KEYREPEATENABLE();
2270   1          stAudioData.Treble = ValueInRangeChange(0, 100, stAudioData.Treble, _NON_LOOP | ucMode);
2271   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y, stAudioData.Treble, ucColor);
                      #endif
2274   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2275   1          OSD_SLIDER(y, stAudioData.Treble, _MENU_ADJUST_COLOR);
2276   1              #endif
2277   1          
2278   1              #if(_SOUND_PROCESSOR == _ON)
                  CSetAudioProcessor(stAudioData.Balance, stAudioData.Bass, stAudioData.Treble);
                      #endif
2281   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
2282   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 38  

2283          
2284          //---------------------------------------------------------------------------
2285          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2286          void DrawBalance(BYTE State)
2287          {
2288   1          BYTE y;
2289   1          BYTE ucColor;
2290   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
2291   1          BYTE ucColor1;
2292   1              #endif  
2293   1          
2294   1          // get display line
2295   1          y = GetShowIndex(_MI_BALANCE,BEGIN(_MI_VOLUME),END(_MI_BBE));
2296   1          
2297   1          if(y == _NOT_SHOW)
2298   1              return;
2299   1          
2300   1          // get display color
2301   1          ucColor = StateColor(State);
2302   1          
2303   1          y = SHOWINDEX_TO_LINE(y);
2304   1          
2305   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2306   1          if(State == _ST_ADJUST)
2307   1          {
2308   2              ucColor1 = StateColor(_ST_SELECT);
2309   2          }
2310   1          else
2311   1          {
2312   2              ucColor1 = ucColor;
2313   2          }   
2314   1          
2315   1          SubMenuTextOut(sBalance[GET_LANGUAGE()],y,ucColor1,State);
2316   1              #endif  
2317   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sBalance[GET_LANGUAGE()],y,ucColor,State);
                      #endif
2320   1          // draw slider
2321   1          OSD_SLIDER(y, stAudioData.Balance, ucColor);
2322   1      }
2323          
2324          //---------------------------------------------------------------------------
2325          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2326          void DrawBass(BYTE State)
2327          {
2328   1          BYTE y;
2329   1          BYTE ucColor;
2330   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
2331   1          BYTE ucColor1;
2332   1              #endif
2333   1          
2334   1          // get display line
2335   1          y = GetShowIndex(_MI_BASS,BEGIN(_MI_VOLUME),END(_MI_BBE));
2336   1          
2337   1          if(y == _NOT_SHOW)
2338   1              return;
2339   1          
2340   1          // get display color
2341   1          ucColor = StateColor(State);
2342   1          
2343   1          y = SHOWINDEX_TO_LINE(y);
2344   1          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 39  

2345   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2346   1          if(State == _ST_ADJUST)
2347   1          {
2348   2              ucColor1 = StateColor(_ST_SELECT);
2349   2          }
2350   1          else
2351   1          {
2352   2              ucColor1 = ucColor;
2353   2          }
2354   1          SubMenuTextOut(sBass[GET_LANGUAGE()],y,ucColor1,State);
2355   1              #endif
2356   1          
2357   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sBass[GET_LANGUAGE()],y,ucColor,State);
                      #endif
2360   1          
2361   1          // draw slider
2362   1          OSD_SLIDER(y, stAudioData.Bass, ucColor);
2363   1      }
2364          
2365          //---------------------------------------------------------------------------
2366          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2367          void DrawTreble(BYTE State)
2368          {
2369   1          BYTE y;
2370   1          BYTE ucColor;
2371   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
2372   1          BYTE ucColor1;
2373   1              #endif
2374   1          
2375   1          // get display line
2376   1          y = GetShowIndex(_MI_TREBLE,BEGIN(_MI_VOLUME),END(_MI_BBE));
2377   1          
2378   1          if(y == _NOT_SHOW)
2379   1              return;
2380   1          
2381   1          // get display color
2382   1          ucColor = StateColor(State);
2383   1          y = SHOWINDEX_TO_LINE(y);
2384   1          
2385   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)  
2386   1          if(State == _ST_ADJUST)
2387   1          {
2388   2              ucColor1 = StateColor(_ST_SELECT);
2389   2          }
2390   1          else
2391   1          {
2392   2              ucColor1 = ucColor;
2393   2          }
2394   1          SubMenuTextOut(sTreble[GET_LANGUAGE()],y,ucColor1,State);
2395   1              #endif
2396   1          
2397   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sTreble[GET_LANGUAGE()],y,ucColor,State);
                      #endif
2400   1          // draw slider
2401   1          OSD_SLIDER(y, stAudioData.Treble, ucColor);
2402   1      }
2403          
2404          //---------------------------------------------------------------------------
2405          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2406          void DrawSRS(BYTE State)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 40  

2407          {
2408   1          BYTE y;
2409   1          BYTE ucColor;
2410   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2411   1          BYTE ucColor1;
2412   1              #endif
2413   1          
2414   1          // get display line
2415   1          y = GetShowIndex(_MI_SRS,BEGIN(_MI_VOLUME),END(_MI_BBE));
2416   1          
2417   1          if(y == _NOT_SHOW)
2418   1              return;
2419   1          
2420   1          // get display color
2421   1          ucColor = StateColor(State);
2422   1          
2423   1          y = SHOWINDEX_TO_LINE(y);
2424   1          
2425   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2426   1          if(State == _ST_ADJUST)
2427   1          {
2428   2              ucColor1 = StateColor(_ST_SELECT);
2429   2          }
2430   1          else
2431   1          {
2432   2              ucColor1 = ucColor;
2433   2          }
2434   1          SubMenuTextOut(sSRS[GET_LANGUAGE()],y,ucColor1,State);
2435   1              #endif
2436   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sSRS[GET_LANGUAGE()],y,ucColor,State);
                      #endif
2439   1          // draw slider
2440   1          //  OSD_SLIDER(y, stAudioData.Balance, ucColor);
2441   1      }
2442          
2443          //---------------------------------------------------------------------------
2444          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2445          void DrawBBE(BYTE State)
2446          {
2447   1          BYTE y;
2448   1          BYTE ucColor;
2449   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2450   1          BYTE ucColor1;
2451   1              #endif
2452   1          
2453   1          // get display line
2454   1          y = GetShowIndex(_MI_BBE,BEGIN(_MI_VOLUME),END(_MI_BBE));
2455   1          
2456   1          if(y == _NOT_SHOW)
2457   1              return;
2458   1          
2459   1          // get display color
2460   1          ucColor = StateColor(State);
2461   1          
2462   1          y = SHOWINDEX_TO_LINE(y);
2463   1          
2464   1              #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2465   1          if(State == _ST_ADJUST)
2466   1          {
2467   2              ucColor1 = StateColor(_ST_SELECT);
2468   2          }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 41  

2469   1          else
2470   1          {
2471   2              ucColor1 = ucColor;
2472   2          }   
2473   1          SubMenuTextOut(sBBE[GET_LANGUAGE()],y,ucColor1,State);
2474   1              #endif
2475   1          
2476   1              #if(_KEY_TYPE == _KT_PCB2660_003)
                  SubMenuTextOut(sBBE[GET_LANGUAGE()],y,ucColor,State);
                      #endif
2479   1          
2480   1          // draw slider
2481   1          //  OSD_SLIDER(y, stAudioData.Balance, ucColor);
2482   1      }
2483          
2484          //---------------------------------------------------------------------------
2485          // ucItem : MainMenu\Sound\_MI_VOLUME,_MI_BALANCE,_MI_BASS,_MI_TREBLE,_MI_SRS,_MI_BBE,
2486          //ucState : _ST_NORMAL,_ST_SELECT,_ST_DISABLE 
2487          void DrawSoundPageMenuItem(BYTE ucItem,BYTE ucState)
2488          {
2489   1          if(!g_tMenuItem[ucItem].Enable())
2490   1          {
2491   2              ucState = _ST_DISABLE;  
2492   2          }
2493   1          
2494   1          switch(ucItem)
2495   1          {
2496   2          case _MI_VOLUME:        DrawVolume(ucState);        break;
2497   2          case _MI_BALANCE:       DrawBalance(ucState);       break;
2498   2          case _MI_BASS:          DrawBass(ucState);          break;
2499   2          case _MI_TREBLE:        DrawTreble(ucState);        break;
2500   2          case _MI_SRS:           DrawSRS(ucState);           break;
2501   2          case _MI_BBE:           DrawBBE(ucState);           break;
2502   2          }
2503   1      }
2504          
2505          //---------------------------------------------------------------------------
2506          // MainMenu\Sound\_MI_VOLUME,_MI_BALANCE,_MI_BASS,_MI_TREBLE,_MI_SRS,_MI_BBE,
2507          void DrawSoundPage(void)
2508          {
2509   1          BYTE i;
2510   1          BYTE ucState;
2511   1          
2512   1          for(i=_MI_VOLUME;i<=_MI_BBE;i++)
2513   1          {
2514   2              if(i == ucOsdState)
2515   2              {
2516   3                  ucState = _ST_SELECT;
2517   3              }
2518   2              else
2519   2              {
2520   3                  ucState = _ST_NORMAL;
2521   3              }
2522   2              
2523   2              DrawSoundPageMenuItem(i,        ucState);
2524   2          }
2525   1          DrawPageNullLine(_MI_VOLUME,_MI_BBE);
2526   1      }
2527          
2528          //---------------------------------------------------------------------------
2529          // ucPageIndex : MainMenu\_MI_COLOR,_MI_ADJUST,_MI_OSD,_MI_TV,_MI_FUNCTION,_MI_SOUND,
2530          void DrawSubMenu(BYTE ucPageIndex)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 42  

2531          {
2532   1          switch(ucPageIndex)
2533   1          {
2534   2          case _MI_COLOR:             DrawColorPage();        break;
2535   2          case _MI_ADJUST:            DrawAdjustPage();       break;
2536   2          case _MI_OSD:               DrawOSDPage();          break;
2537   2          case _MI_TV:                DrawTVPage();           break;
2538   2          case _MI_FUNCTION:          DrawFuncPage();         break;
2539   2          case _MI_SOUND:             DrawSoundPage();        break;
2540   2          }
2541   1          
2542   1      }
2543          //---------------------------------------------------------------------------
2544          
2545          
2546          //---------------------------------------------------------------------------
2547          void MMenuNoneProc(void)
2548          {
2549   1          if (!CTVEnable() && ucOsdEventMsg >= _OE_SC_CH_DEC) // Only for TV
2550   1          {
2551   2              return;
2552   2          }
2553   1          
2554   1          switch(ucOsdEventMsg)
2555   1          {
2556   2              // Enter main menu
2557   2          case _OE_ENTER_SUBMENU:     MMenuNoneEnterSubMenu();        break;
2558   2              
2559   2              // Enter Source menu
2560   2          case _OE_CHANGE_SOURCE:
2561   2              if(_SLEEP_STATE == ucCurrState)
2562   2              {
2563   3                      CModeSetFreeRun();
2564   3                  CPowerLVDSOn();
2565   3                  CModeResetMode();
2566   3                  CPowerPanelOn();
2567   3                  CPowerLightPowerOn();
2568   3              }
2569   2              else
2570   2              {
2571   3                  if (bLIGHTPOWER == _LIGHT_OFF)
2572   3                     CPowerLightPowerOn();
2573   3              }
2574   2      
2575   2      #if(_CHANGE_SOURCE_METHOD == _CHANGE_SOURCE_METHOD_0)
2576   2              DrawSourceMenu();               
2577   2      #elif(_CHANGE_SOURCE_METHOD == _CHANGE_SOURCE_METHOD_1)
                      ucOsdEventMsg = _CHANGE_SOURCE_MSG;
                      bChangeSource();
              #endif
2581   2              break;
2582   2      
2583   2      #if(_FAC_OSD) 
                  case _OE_FAC_OPEN:          DrawFactoryMenu();              break;
              #endif
2586   2              // Enter short cut menu
2587   2          case _OE_SC_BRIGHTNESS:     EnterSCBright();                break;
2588   2          case _OE_SC_VOLUME:         
2589   2      #if(_CHINESE_FONT_TYPE == _CHINESE_2_FONT)
2590   2              LoadCHIFont(_LF_SOUND_PAGE);
2591   2      #endif
2592   2              EnterSCVolume();                
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 43  

2593   2              break;
2594   2              
2595   2          case _OE_SC_MUTE:           CSetMuteState();                break;
2596   2          case _OE_DISPLAY:           CDisplayCurrentSourceMessage(); break;
2597   2              
2598   2      #if(_VIDEO_TV_SUPPORT)
              
                  case _OE_SC_CH_INC: 
                  case _OE_SC_CH_DEC:
                      if (!CMITVEnable())
                          return;
                      CChangeChannel((ucOsdEventMsg == _OE_SC_CH_DEC) ? 0 : 1);
                      COsdDispOsdTimerEvent();
                      bDrawMute = 0;
                      break;
                      
                  case _OE_SC_INPUT_NUM0:
                  case _OE_SC_INPUT_NUM1:
                  case _OE_SC_INPUT_NUM2:
                  case _OE_SC_INPUT_NUM3:
                  case _OE_SC_INPUT_NUM4:
                  case _OE_SC_INPUT_NUM5:
                  case _OE_SC_INPUT_NUM6:
                  case _OE_SC_INPUT_NUM7:
                  case _OE_SC_INPUT_NUM8:
                  case _OE_SC_INPUT_NUM9:
                      COsdDispOsdTimerEvent();
                      EnterSCInputNum();              
                      MScInputChNumProc();
                      break;
                  case _OE_SC_INPUT_CH:       EnterSCInputNum();              break;
                  case _OE_SC_RETURN:
                      COsdDispOsdTimerEvent();
                      pData[0]        = stTvInfo.CurChn;
                      stTvInfo.CurChn = ucPrevChannel;
                      ucPrevChannel   = pData[0];
                      
                      CMuteOn();
                      CModeResetTVMode();
                      CSetTVChannel(stTvInfo.CurChn);
                      ucOsdEventMsg = _SAVE_EE_TV_DATA_MSG;
                      break;
              #endif
2636   2          }
2637   1      }    
2638          //---------------------------------------------------------------------------
2639          void MMenuNoneEnterSubMenu(void)
2640          {
2641   1          // Draw osd
2642   1          ucOsdState = _MI_COLOR;
2643   1          
2644   1          DrawMainMenu();
2645   1          CShowMode(13,17);
2646   1          
2647   1          bDrawMute = 0;
2648   1          COsdFxEnableOsd();
2649   1      }
2650          //---------------------------------------------------------------------------
2651          
2652          
2653          
2654          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 44  

2655          // MainMenu\Color,Adjust,OSD,TV,Function,Sound,
2656          // MainMenu\_MI_COLOR,_MI_ADJUST,_MI_OSD,_MI_TV,_MI_FUNCTION,_MI_SOUND,
2657          void MMainMenuProc(void)
2658          {
2659   1          switch(ucOsdEventMsg)
2660   1          {
2661   2          case _OE_ADJ_INC:           MMainMenuValueAdj(_INC);            break;
2662   2          case _OE_ADJ_DEC:           MMainMenuValueAdj(_DEC);            break;
2663   2          case _OE_MENU_NEXT:         MMainMenuMenuAdj(_NEXT);            break;
2664   2          case _OE_MENU_PREV:         MMainMenuMenuAdj(_PREV);            break;
2665   2          case _OE_ENTER_SUBMENU:     MMainMenuEnterSubMenu();            break;
2666   2          case _OE_RETURN_UPMENU:     MMainMenuReturnUpMenu();            break;
2667   2              
2668   2          }
2669   1      }
2670          //---------------------------------------------------------------------------
2671          void MMainMenuValueAdj(BYTE ucMode)
2672          {
2673   1          // ucMode : _INC or _DEC
2674   1          ucMode = ucMode;        // test code
2675   1      }
2676          //---------------------------------------------------------------------------
2677          void MainMenuItemChgClear(void)
2678          {
2679   1          BYTE i;
2680   1          
2681   1          // Clear Title
2682   1          OSDClear(ROW(1), HEIGHT(2), COL(0), WIDTH(39), 0x00, BYTE_DISPLAY);
2683   1          
2684   1          // clear sub menu
2685   1          for(i=0;i<6;i++)
2686   1          {
2687   2              OSDLine(SHOWINDEX_TO_LINE(i), COL(7), LENGTH(38), 0x00, BYTE_DISPLAY);
2688   2              OSDLine(SHOWINDEX_TO_LINE(i), COL(7), LENGTH(38), 0x8C, BYTE_ATTRIB);
2689   2          }
2690   1          
2691   1      }
2692          //---------------------------------------------------------------------------
2693          void MMainMenuMenuAdj(BYTE ucMode)
2694          {
2695   1          // ucMode : _NEXT or _Prev
2696   1          
2697   1          BYTE ucNewItem = AdjustMenuItem(_MI_COLOR,_MI_SOUND,ucMode);
2698   1          if(ucNewItem == ucOsdState)
2699   1              return;
2700   1          
2701   1          // 1. Clear Current Menu
2702   1          DrawMainMenuItem(ucOsdState,    _ST_NORMAL);
2703   1          MainMenuItemChgClear();
2704   1          
2705   1          
2706   1          // 2. Change ucOsdState
2707   1          ucOsdState = ucNewItem;
2708   1          
2709   1          // 3. Draw New Item
2710   1          
2711   1      #if(_CHINESE_FONT_TYPE == _CHINESE_2_FONT)    
2712   1          LoadCHIFont(ucOsdState - _MI_COLOR);
2713   1          if(ucOsdState == _MI_OSD)
2714   1              COsdLoad1BitFont(FntLangaugeName,0x60,0x18,tFntLangaugeNameCharWidth);
2715   1      #endif    
2716   1          DrawMainMenuItem(ucOsdState,    _ST_SELECT);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 45  

2717   1          DrawMainItemTitle(ucOsdState);
2718   1      
2719   1          switch(ucOsdState)
2720   1          {
2721   2          case _MI_COLOR:             
2722   2          case _MI_ADJUST:
2723   2          case _MI_OSD:
2724   2          case _MI_FUNCTION:
2725   2          case _MI_SOUND:
2726   2              ucStartItem = 0;
2727   2              ucEndItem   = 0;
2728   2              break;
2729   2      
2730   2          case _MI_TV:
2731   2              ucStartItem = _MI_CHANNEL;
2732   2              ucEndItem   = _MI_SKIP;
2733   2              break;
2734   2      
2735   2          }
2736   1      
2737   1          DrawSubMenu(ucOsdState);
2738   1          
2739   1          
2740   1      }
2741          //---------------------------------------------------------------------------
2742          void MMainMenuEnterSubMenu(void)
2743          {
2744   1          // 1. Before Enter SubMenu
2745   1          // Insert code to here ...
2746   1          
2747   1          
2748   1          // 2. Change ucOsdState
2749   1          switch(ucOsdState)
2750   1          {
2751   2          case _MI_COLOR:                 
2752   2              ucOsdState = _MI_BRIGHTNESS;        
2753   2              DrawColorPageMenuItem(ucOsdState,_ST_SELECT);
2754   2              break;
2755   2          case _MI_ADJUST:            
2756   2              ucOsdState = _MI_AUTOADJUST; 
2757   2              DrawAdjustPageMenuItem(ucOsdState,_ST_SELECT);
2758   2              break;
2759   2          case _MI_OSD:               
2760   2              ucOsdState = _MI_LANGUAGE;          
2761   2              DrawOsdPageMenuItem(ucOsdState,_ST_SELECT);
2762   2              break;
2763   2          case _MI_TV:                
2764   2              ucOsdState  = ucStartItem;//_MI_CHANNEL;           
2765   2              DrawTVPageMenuItem(ucOsdState,_ST_SELECT);
2766   2              break;
2767   2          case _MI_FUNCTION:          
2768   2              ucOsdState = _MI_RESET;             
2769   2              DrawFuncPageMenuItem(ucOsdState,_ST_SELECT);
2770   2              break;
2771   2          case _MI_SOUND:             
2772   2              ucOsdState = _MI_VOLUME;            
2773   2              DrawSoundPageMenuItem(ucOsdState,_ST_SELECT);
2774   2              break;
2775   2          }
2776   1          
2777   1          // 3. Now enter sub menu
2778   1          // Insert code to here ...
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 46  

2779   1          
2780   1          
2781   1      }
2782          //---------------------------------------------------------------------------
2783          void MMainMenuReturnUpMenu(void)
2784          {
2785   1          // 1. Before Return UpMenu
2786   1          // Insert code to here ...
2787   1          
2788   1          // 2. Change ucOsdState
2789   1          COsdDispOsdTimerEvent();
2790   1          // 3. Now Return to upmenu
2791   1          // Insert code to here ...
2792   1      }
2793          //---------------------------------------------------------------------------
2794          
2795          //---------------------------------------------------------------------------
2796          // MainMenu\Color\Brightness,Contrast,Hue,Saturation,ColorTemp,
2797          // MainMenu\Color\_MI_BRIGHTNESS,_MI_CONTRAST,_MI_HUE,_MI_SATURATION,_MI_COLORTEMP,
2798          void MColorProc(void)
2799          {
2800   1          switch(ucOsdEventMsg)
2801   1          {
2802   2          case _OE_ADJ_INC:           MColorValueAdj(_INC);               break;
2803   2          case _OE_ADJ_DEC:           MColorValueAdj(_DEC);               break;
2804   2          case _OE_MENU_NEXT:         MColorMenuAdj(_NEXT);               break;
2805   2          case _OE_MENU_PREV:         MColorMenuAdj(_PREV);               break;
2806   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2807   2          case _OE_ENTER_SUBMENU:     MColorEnterSubMenu();               break;
2808   2      #endif
2809   2          case _OE_RETURN_UPMENU:     MColorReturnUpMenu();               break;
2810   2          }
2811   1      }
2812          //---------------------------------------------------------------------------
2813          void MColorValueAdj(BYTE ucMode)
2814          {
2815   1          // ucMode : _INC or _DEC
2816   1          switch(ucOsdState)
2817   1          {
2818   2          case _MI_BRIGHTNESS:          
2819   2              BrightAdjust(ucMode);
2820   2              break;
2821   2      
2822   2          case _MI_CONTRAST:            
2823   2              ContrastAdjust(ucMode);
2824   2              break;
2825   2      
2826   2          case _MI_HUE:                 
2827   2              HueAdjust(ucMode);
2828   2              break;
2829   2      
2830   2          case _MI_SATURATION:      
2831   2              SaturationAdjust(ucMode);
2832   2              break;
2833   2      
2834   2          case _MI_COLORTEMP:           
2835   2              EnterColorTempMenu();               
2836   2              break;
2837   2          }
2838   1      }
2839          //---------------------------------------------------------------------------
2840          void MColorMenuAdj(BYTE ucMode)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 47  

2841          {
2842   1          // ucMode : _NEXT or _Prev
2843   1          BYTE ucNewItem = AdjustMenuItem(_MI_BRIGHTNESS,_MI_COLORTEMP,ucMode);
2844   1          if(ucNewItem == ucOsdState)
2845   1              return;
2846   1          
2847   1          // 1. Clear Current Menu
2848   1          // Insert code to here
2849   1          DrawColorPageMenuItem(ucOsdState,_ST_NORMAL);
2850   1          
2851   1          // 2. Change ucOsdState
2852   1          ucOsdState = ucNewItem;
2853   1          
2854   1          // 3. Draw New Item
2855   1          DrawColorPageMenuItem(ucOsdState,_ST_SELECT);
2856   1          
2857   1      }
2858          
2859          //---------------------------------------------------------------------------
2860          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2861          void MColorEnterSubMenu(void)
2862          {
2863   1          // 1. Before Enter SubMenu
2864   1          // Insert code to here ...
2865   1          
2866   1          
2867   1          // 2. Change ucOsdState
2868   1          switch(ucOsdState)
2869   1          {
2870   2          case _MI_BRIGHTNESS: 
2871   2              DrawBright(_ST_ADJUST);
2872   2              ucOsdState = _MI_BRIGHTADJ;
2873   2              break;
2874   2      
2875   2          case _MI_CONTRAST:
2876   2              DrawContrast(_ST_ADJUST);
2877   2              ucOsdState = _MI_CONTRASTADJ;
2878   2              break;
2879   2      
2880   2          case _MI_HUE:
2881   2              DrawHue(_ST_ADJUST);
2882   2              ucOsdState = _MI_HUEADJ;
2883   2              break;
2884   2      
2885   2          case _MI_SATURATION:    
2886   2              DrawSaturation(_ST_ADJUST);
2887   2              ucOsdState = _MI_SATURATIONADJ;
2888   2              break;
2889   2      
2890   2          case _MI_COLORTEMP:
2891   2              DrawColorTemp(_ST_ADJUST);
2892   2              EnterColorTempMenu();       
2893   2              break;
2894   2          }
2895   1      }
2896          #endif
2897          
2898          //---------------------------------------------------------------------------
2899          void MColorReturnUpMenu(void)
2900          {
2901   1          // 1. Before Return UpMenu
2902   1          DrawColorPageMenuItem(ucOsdState,_ST_NORMAL);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 48  

2903   1          
2904   1          // 2. Change ucOsdState
2905   1          ucOsdState = _MI_COLOR;
2906   1          
2907   1          // 3. Now Return to upmenu
2908   1          // Insert code to here ...
2909   1      }
2910          //---------------------------------------------------------------------------
2911          
2912          
2913          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
2914          //---------------------------------------------------------------------------
2915          // MainMenu\Color\Brightness\BrigntAdj
2916          // MainMenu\Color\Brightness\_MI_BRIGHTADJ
2917          void MBrightnessProc(void)
2918          {
2919   1          switch(ucOsdEventMsg)
2920   1          {
2921   2          case _OE_ADJ_INC:           
2922   2              MBrightnessValueAdj(_INC);          
2923   2              break;
2924   2              
2925   2          case _OE_ADJ_DEC:           
2926   2              MBrightnessValueAdj(_DEC);          
2927   2              break;
2928   2              
2929   2          case _OE_MENU_NEXT:         
2930   2              MBrightnessReturnUpMenu();
2931   2              MColorMenuAdj(_NEXT);               
2932   2              break;
2933   2              
2934   2          case _OE_MENU_PREV:         
2935   2              MBrightnessReturnUpMenu();
2936   2              MColorMenuAdj(_PREV);               
2937   2              break;
2938   2              
2939   2          case _OE_ENTER_SUBMENU:     
2940   2              MColorEnterSubMenu();               
2941   2              break;
2942   2              
2943   2          case _OE_RETURN_UPMENU:     
2944   2              MBrightnessReturnUpMenu();          
2945   2              break;
2946   2              
2947   2          }
2948   1      }
2949          //---------------------------------------------------------------------------
2950          void MBrightnessValueAdj(BYTE ucMode)
2951          {
2952   1          BrightAdjust(ucMode);
2953   1      }
2954          //---------------------------------------------------------------------------
2955          void MBrightnessReturnUpMenu(void)
2956          {
2957   1          // 1. Before Return UpMenu
2958   1          DrawBright(_ST_SELECT);
2959   1          
2960   1          // 2. Change ucOsdState
2961   1          ucOsdState = _MI_BRIGHTNESS;
2962   1          
2963   1          // 3. Now Return to upmenu
2964   1          // Insert code to here ...
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 49  

2965   1      } 
2966          //---------------------------------------------------------------------------
2967          // MainMenu\Color\Contrast\ContrastAdj
2968          // MainMenu\Color\Contrast\_MI_CONTRASTADJ
2969          void MContrastProc(void)
2970          {
2971   1          switch(ucOsdEventMsg)
2972   1          {
2973   2          case _OE_ADJ_INC:           
2974   2              MContrastValueAdj(_INC);            
2975   2              break;
2976   2              
2977   2          case _OE_ADJ_DEC:           
2978   2              MContrastValueAdj(_DEC);            
2979   2              break;
2980   2              
2981   2          case _OE_MENU_NEXT:         
2982   2              MContrastReturnUpMenu();
2983   2              MColorMenuAdj(_NEXT);               
2984   2              break;
2985   2              
2986   2          case _OE_MENU_PREV:         
2987   2              MContrastReturnUpMenu();
2988   2              MColorMenuAdj(_PREV);               
2989   2              break;
2990   2              
2991   2          case _OE_ENTER_SUBMENU:     
2992   2              MColorEnterSubMenu();               
2993   2              break;
2994   2              
2995   2          case _OE_RETURN_UPMENU:     
2996   2              MContrastReturnUpMenu();            
2997   2              break;
2998   2          }
2999   1      }
3000          //---------------------------------------------------------------------------
3001          void MContrastValueAdj(BYTE ucMode)
3002          {
3003   1          ContrastAdjust(ucMode);
3004   1      }
3005          //---------------------------------------------------------------------------
3006          void MContrastReturnUpMenu(void)
3007          {
3008   1          // 1. Before Return UpMenu
3009   1          DrawContrast(_ST_SELECT);
3010   1          
3011   1          // 2. Change ucOsdState
3012   1          ucOsdState = _MI_CONTRAST;
3013   1          
3014   1          // 3. Now Return to upmenu
3015   1          // Insert code to here ...
3016   1      }
3017          //---------------------------------------------------------------------------
3018          // MainMenu\Color\Hue\HueAdj
3019          // MainMenu\Color\Hue\_MI_HUEADJ
3020          void MHueProc(void)
3021          {
3022   1          switch(ucOsdEventMsg)
3023   1          {
3024   2          case _OE_ADJ_INC:           
3025   2              MHueValueAdj(_INC);               
3026   2              break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 50  

3027   2              
3028   2          case _OE_ADJ_DEC:           
3029   2              MHueValueAdj(_DEC);               
3030   2              break;
3031   2              
3032   2          case _OE_MENU_NEXT:         
3033   2              MHueReturnUpMenu();
3034   2              MColorMenuAdj(_NEXT);             
3035   2              break;
3036   2              
3037   2          case _OE_MENU_PREV:         
3038   2              MHueReturnUpMenu();
3039   2              MColorMenuAdj(_PREV);             
3040   2              break;
3041   2              
3042   2          case _OE_ENTER_SUBMENU:     
3043   2              MColorEnterSubMenu();             
3044   2              break;
3045   2              
3046   2          case _OE_RETURN_UPMENU:     
3047   2              MHueReturnUpMenu();               
3048   2              break;
3049   2              
3050   2          }
3051   1      }
3052          //---------------------------------------------------------------------------
3053          void MHueValueAdj(BYTE ucMode)
3054          {
3055   1          HueAdjust(ucMode);
3056   1      }
3057          //---------------------------------------------------------------------------
3058          void MHueReturnUpMenu(void)
3059          {
3060   1          // 1. Before Return UpMenu
3061   1          DrawHue(_ST_SELECT);
3062   1          
3063   1          // 2. Change ucOsdState
3064   1          ucOsdState = _MI_HUE;
3065   1          
3066   1          // 3. Now Return to upmenu
3067   1          // Insert code to here ...
3068   1      }
3069          //---------------------------------------------------------------------------
3070          // MainMenu\Color\Saturation\SaturationAdj 
3071          // MainMenu\Color\Saturation\_MI_SATURATIONADJ
3072          void MSaturationProc(void)
3073          {
3074   1          switch(ucOsdEventMsg)
3075   1          {
3076   2          case _OE_ADJ_INC:           
3077   2              MSaturationValueAdj(_INC);            
3078   2              break;
3079   2              
3080   2          case _OE_ADJ_DEC:           
3081   2              MSaturationValueAdj(_DEC);            
3082   2              break;
3083   2              
3084   2          case _OE_MENU_NEXT:         
3085   2              MSaturationReturnUpMenu();
3086   2              MColorMenuAdj(_NEXT);                 
3087   2              break;
3088   2              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 51  

3089   2          case _OE_MENU_PREV:         
3090   2              MSaturationReturnUpMenu();
3091   2              MColorMenuAdj(_PREV);                
3092   2              break;
3093   2              
3094   2          case _OE_ENTER_SUBMENU:     
3095   2              MColorEnterSubMenu();                 
3096   2              break;
3097   2              
3098   2          case _OE_RETURN_UPMENU:     
3099   2              MSaturationReturnUpMenu();            
3100   2              break;
3101   2              
3102   2          }
3103   1      }
3104          //---------------------------------------------------------------------------
3105          void MSaturationValueAdj(BYTE ucMode)
3106          {
3107   1          SaturationAdjust(ucMode);
3108   1      }
3109          //---------------------------------------------------------------------------
3110          void MSaturationReturnUpMenu(void)
3111          {
3112   1          // 1. Before Return UpMenu
3113   1          DrawSaturation(_ST_SELECT);
3114   1          
3115   1          // 2. Change ucOsdState
3116   1          ucOsdState = _MI_SATURATION;
3117   1          
3118   1          // 3. Now Return to upmenu
3119   1          // Insert code to here ...
3120   1      }
3121          #endif
3122          
3123          //---------------------------------------------------------------------------
3124          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3125          void DrawAPopupMenuItem1(BYTE *str,BYTE ItemIndex,BYTE ucRowStart,BYTE ucColStart,BYTE State)
3126          {
3127   1          BYTE c;
3128   1          //BYTE x;
3129   1          BYTE ucColor = StateColor(State);
3130   1          
3131   1          ItemIndex = ItemIndex + ucRowStart + 1;
3132   1          
3133   1          if(State == _ST_DISABLE || State == _ST_NORMAL)
3134   1              c = 0x01;   // Clear Select Icon
3135   1          else
3136   1              c = 0x57;   // Select Icon
3137   1          
3138   1          if(ItemIndex % 2)
3139   1              ucColStart += 21;
3140   1          else
3141   1              ucColStart += 27;
3142   1          
3143   1          OSDLine(ROW(ItemIndex), COL(ucColStart), LENGTH(19), ucColor, BYTE_COLOR);
3144   1          
3145   1          Gotoxy(COL(ucColStart + 1),ROW(ItemIndex),BYTE_DISPLAY);
3146   1          OutputChar(c);
3147   1          
3148   1          CTextOutEx(str, COL(ucColStart + 3), ROW(ItemIndex));
3149   1          
3150   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 52  

3151          #endif
3152          
3153          //---------------------------------------------------------------------------
3154          #define _PM_COLORTMP_ROW_START                      11
3155          #define _PM_COLORTMP_ROW_HEIGHT                     5
3156          #define _PM_COLORTMP_COL_START                      3
3157          
3158          void DrawColorTempMenuItem(BYTE ucItem,BYTE ucState)
3159          {
3160   1          BYTE y;
3161   1          BYTE *pStr;
3162   1          
3163   1          if(!g_tMenuItem[ucItem].Enable())
3164   1          {
3165   2              ucState = _ST_DISABLE;  
3166   2          }
3167   1          
3168   1          // get display line
3169   1          y = GetShowIndex(ucItem,BEGIN(_MI_9300),END(_MI_USER));
3170   1          
3171   1          if(y == _NOT_SHOW)
3172   1              return;
3173   1          
3174   1          
3175   1          switch(ucItem)
3176   1          {
3177   2          case _MI_9300:          pStr = s9300[GET_LANGUAGE()];   break;
3178   2          case _MI_6500:          pStr = s6500[GET_LANGUAGE()];   break;
3179   2          case _MI_USER:          pStr = sUser[GET_LANGUAGE()];   break;
3180   2          }
3181   1          
3182   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3183   1          DrawAPopupMenuItem1(pStr,y,_PM_COLORTMP_ROW_START,_PM_COLORTMP_COL_START,ucState);
3184   1      #elif(_KEY_TYPE == _KT_PCB2660_003)
                  DrawAPopupMenuItem(pStr,y,_PM_COLORTMP_ROW_START,_PM_COLORTMP_COL_START,ucState);
              #endif    
3187   1      }
3188          
3189          //---------------------------------------------------------------------------
3190          void EnterColorTempMenu(void)
3191          {
3192   1          BYTE i;
3193   1          BYTE ucMode;
3194   1          
3195   1          CreatePopupMenu(_PM_COLORTMP_ROW_START, _PM_COLORTMP_ROW_HEIGHT);
3196   1          
3197   1          switch(GET_COLOR_TEMP_TYPE())
3198   1          {
3199   2          case _CT_9300:      ucOsdState = _MI_9300;      break;
3200   2          case _CT_6500:      ucOsdState = _MI_6500;      break;
3201   2          case _CT_USER:      
3202   2          default:            ucOsdState = _MI_USER;      break;
3203   2          }
3204   1          
3205   1          for(i=_MI_9300;i<=_MI_USER;i++)
3206   1          {
3207   2              if(i == ucOsdState)
3208   2                  ucMode = _ST_SELECT;
3209   2              else
3210   2                  ucMode = _ST_NORMAL;
3211   2              
3212   2              DrawColorTempMenuItem(i,ucMode);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 53  

3213   2          }
3214   1          
3215   1      }
3216          //---------------------------------------------------------------------------
3217          void ClearColorTempMenu(void)
3218          {
3219   1          ClearPopupMenu(_PM_COLORTMP_ROW_START, _PM_COLORTMP_ROW_HEIGHT);
3220   1      }
3221          //---------------------------------------------------------------------------
3222          
3223          
3224          // MainMenu\Color\ColorTemp\9300,6500,User,
3225          // MainMenu\Color\ColorTemp\_MI_9300,_MI_6500,_MI_USER,
3226          void MColorTempProc(void)
3227          {
3228   1          switch(ucOsdEventMsg)
3229   1          {
3230   2          case _OE_ADJ_INC:           
3231   2              break;
3232   2              
3233   2          case _OE_ADJ_DEC:           
3234   2              break;
3235   2              
3236   2          case _OE_MENU_NEXT:         
3237   2              MColorTempMenuAdj(_NEXT);           
3238   2              break;
3239   2              
3240   2          case _OE_MENU_PREV:         
3241   2              MColorTempMenuAdj(_PREV);           
3242   2              break;
3243   2              
3244   2          case _OE_ENTER_SUBMENU:     
3245   2              MColorTempEnterSubMenu();           
3246   2              break;
3247   2              
3248   2          case _OE_RETURN_UPMENU:     
3249   2              MColorTempReturnUpMenu();           
3250   2              break;
3251   2          }
3252   1      } 
3253          
3254          //---------------------------------------------------------------------------
3255          void MColorTempMenuAdj(BYTE ucMode)
3256          {
3257   1          // ucMode : _NEXT or _Prev
3258   1          
3259   1          BYTE ucNewItem = AdjustMenuItem(_MI_9300,_MI_USER,ucMode);
3260   1          if(ucNewItem == ucOsdState)
3261   1              return;
3262   1          
3263   1          // 1. Clear Current Menu
3264   1          DrawColorTempMenuItem(ucOsdState,_ST_NORMAL);
3265   1          
3266   1          // 2. Change ucOsdState
3267   1          ucOsdState = ucNewItem;
3268   1          
3269   1          switch(ucOsdState)
3270   1          {
3271   2          case _MI_9300:     SET_COLOR_TEMP_TYPE(_CT_9300);   break;
3272   2          case _MI_6500:     SET_COLOR_TEMP_TYPE(_CT_6500);   break;
3273   2          case _MI_USER:     SET_COLOR_TEMP_TYPE(_CT_USER);   break;
3274   2          }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 54  

3275   1          
3276   1          CEepromLoadColorTempData();
3277   1          CAdjustContrast();
3278   1          ucOsdEventMsg = _SAVE_EE_SYSTEMDATA_MSG;
3279   1          
3280   1          // 3. Draw New Item
3281   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  DrawColorTempMenuItem(ucOsdState,_ST_SELECT);
              #endif
3284   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3285   1          DrawColorTempMenuItem(ucOsdState,_ST_ADJUST);
3286   1      #endif
3287   1      }
3288          //---------------------------------------------------------------------------
3289          void MColorTempEnterSubMenu(void)
3290          {
3291   1          if (GET_COLOR_TEMP_TYPE() == _CT_USER)
3292   1              EnterColorTempUserMenu();
3293   1          else
3294   1              MColorTempReturnUpMenu();
3295   1      }
3296          //---------------------------------------------------------------------------
3297          void MColorTempReturnUpMenu(void)
3298          {
3299   1          // 1. Before Return UpMenu
3300   1          ClearColorTempMenu();
3301   1          
3302   1          // 2. Change ucOsdState
3303   1          ucOsdState = _MI_COLORTEMP;
3304   1          
3305   1          // 3. Now Return to upmenu
3306   1          DrawColorPage();
3307   1      }
3308          
3309          //---------------------------------------------------------------------------
3310          #define _PM_COLORUSER_ROW_START                     11
3311          #define _PM_COLORUSER_ROW_HEIGHT                    5
3312          #define _PM_COLORUSER_COL_START                     3
3313          
3314          void DrawColorUSERMenuItem(BYTE ucItem,BYTE ucState)
3315          {        
3316   1          BYTE color;
3317   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3318   1          BYTE ucRow, ucCol;
3319   1          BYTE ucValue;
3320   1      #endif
3321   1          // get display color
3322   1          color = StateColor(ucState);
3323   1          
3324   1          switch(ucItem)
3325   1          {
3326   2          case _MI_USER_R:   
3327   2      #if(_KEY_TYPE == _KT_PCB2660_003)
                      if (_ST_SELECT == ucState)
                             color = 0xF0;
                      OSDSlider(12, 30, 8, stColorTempData.ColorTemp[_RED], 255,color);     
              #endif
3332   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3333   2              ucValue = stColorTempData.ColorTemp[_RED];
3334   2              ucRow = 12;
3335   2              ucCol = 30;
3336   2              if (_ST_ADJUST== ucState)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 55  

3337   2              {
3338   3                  color = 0xF0;               
3339   3              }
3340   2      #endif
3341   2              break;
3342   2              
3343   2          case _MI_USER_G:
3344   2      #if(_KEY_TYPE == _KT_PCB2660_003)           
                      if (_ST_SELECT == ucState)
                             color = 0xD0;
                      OSDSlider(13, 24, 8, stColorTempData.ColorTemp[_GREEN], 255,color);   
              #endif
3349   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3350   2              ucValue = stColorTempData.ColorTemp[_GREEN];
3351   2              ucRow = 13;
3352   2              ucCol = 24;
3353   2              if (_ST_ADJUST== ucState)
3354   2              {
3355   3                  color = 0xD0;
3356   3                  
3357   3              }
3358   2      #endif
3359   2              break;
3360   2              
3361   2          case _MI_USER_B:
3362   2      #if(_KEY_TYPE == _KT_PCB2660_003)           
                      if (_ST_SELECT == ucState)
                             color = 0xE0;
                      OSDSlider(14, 30, 8, stColorTempData.ColorTemp[_BLUE], 255,color);
              #endif   
3367   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3368   2              ucRow = 14;
3369   2              ucCol = 30;
3370   2              ucValue = stColorTempData.ColorTemp[_BLUE];
3371   2              if (_ST_ADJUST== ucState)
3372   2              {
3373   3                  color = 0xE0;
3374   3              }
3375   2      #endif
3376   2              break;
3377   2          }
3378   1          
3379   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3380   1          OSDSlider(ucRow, ucCol, 8, ucValue, 255,color);
3381   1      #endif
3382   1          
3383   1      }
3384          
3385          //---------------------------------------------------------------------------
3386          void EnterColorTempUserMenu(void)
3387          {
3388   1          BYTE i;
3389   1          BYTE ucMode;
3390   1          
3391   1          CreatePopupMenu(_PM_COLORUSER_ROW_START, _PM_COLORUSER_ROW_HEIGHT);
3392   1          
3393   1          ucOsdState = _MI_USER_R;
3394   1          
3395   1          OSDLine(12, COL(29), LENGTH(1), 0xF0, BYTE_COLOR);
3396   1          Gotoxy(29, 12, BYTE_DISPLAY);
3397   1          OutputChar(0x26); // "R"
3398   1          OSDLine(13, COL(23), LENGTH(2), 0xD0, BYTE_COLOR);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 56  

3399   1          Gotoxy(23, 13, BYTE_DISPLAY);
3400   1          OutputChar(0x17); // "G"
3401   1          OutputChar(0x18); // "G"
3402   1          OSDLine(14, COL(29), LENGTH(1), 0xE0, BYTE_COLOR);
3403   1          Gotoxy(29, 14, BYTE_DISPLAY);
3404   1          OutputChar(0x12); // "B"
3405   1          
3406   1          for(i=_MI_USER_R;i<=_MI_USER_B;i++)
3407   1          {
3408   2              if(i == ucOsdState)
3409   2                  ucMode = _ST_SELECT;
3410   2              else
3411   2                  ucMode = _ST_NORMAL;
3412   2              
3413   2              DrawColorUSERMenuItem(i,ucMode);
3414   2          }
3415   1          
3416   1      }
3417          //---------------------------------------------------------------------------
3418          void ClearColorUSERMenu(void)
3419          {
3420   1          ClearPopupMenu(_PM_COLORUSER_ROW_START, _PM_COLORUSER_ROW_HEIGHT);
3421   1      }
3422          //---------------------------------------------------------------------------
3423          // MainMenu\Color\ColorTemp\9300,6500,User,
3424          // MainMenu\Color\ColorTemp\_MI_USER_R,_MI_USER_G,_MI_USER_B,
3425          void MColorUserProc(void)
3426          {
3427   1          switch(ucOsdEventMsg)
3428   1          {
3429   2          case _OE_ADJ_INC:           MColorUserValueAdj(_INC);           break;
3430   2          case _OE_ADJ_DEC:           MColorUserValueAdj(_DEC);           break;
3431   2          case _OE_MENU_NEXT:         MColorUserMenuAdj(_NEXT);           break;
3432   2          case _OE_MENU_PREV:         MColorUserMenuAdj(_PREV);           break;
3433   2          case _OE_ENTER_SUBMENU:  
3434   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)        
3435   2              MColorUserEnterSubMenu();   
3436   2              break;
3437   2      #endif
3438   2          case _OE_RETURN_UPMENU:     MColorUserReturnUpMenu();           break;
3439   2              
3440   2          }
3441   1      }
3442          //---------------------------------------------------------------------------
3443          void MColorUserValueAdj(BYTE ucMode)
3444          {
3445   1          // ucMode : _INC or _DEC
3446   1          switch(ucOsdState)
3447   1          {
3448   2          case _MI_USER_R:     
3449   2              ColorRAdjust(ucMode);   
3450   2              break;
3451   2          case _MI_USER_G:     
3452   2              ColorGAdjust(ucMode);   
3453   2              break;
3454   2          case _MI_USER_B:     
3455   2              ColorBAdjust(ucMode);  
3456   2              break;
3457   2          }
3458   1          DrawColorUSERMenuItem(ucOsdState,_ST_SELECT);
3459   1          
3460   1          CAdjustContrast();
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 57  

3461   1          ucOsdEventMsg = _SAVE_EE_COLORPROC1_MSG;
3462   1      }
3463          //---------------------------------------------------------------------------
3464          void MColorUserMenuAdj(BYTE ucMode)
3465          {
3466   1          // ucMode : _NEXT or _Prev
3467   1          
3468   1          BYTE ucNewItem = AdjustMenuItem(_MI_USER_R,_MI_USER_B,ucMode);
3469   1          if(ucNewItem == ucOsdState)
3470   1              return;
3471   1          
3472   1          // 1. Clear Current Menu
3473   1          DrawColorUSERMenuItem(ucOsdState,_ST_NORMAL);
3474   1          
3475   1          // 2. Change ucOsdState
3476   1          ucOsdState = ucNewItem;
3477   1          
3478   1          // 1. Clear Current Menu
3479   1          DrawColorUSERMenuItem(ucOsdState,_ST_SELECT);
3480   1      }
3481          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3482          void MColorUserEnterSubMenu(void)
3483          {
3484   1          // 1. Before Enter SubMenu
3485   1          // Insert code to here ...
3486   1          
3487   1          
3488   1          // 2. Change ucOsdState
3489   1          switch(ucOsdState)
3490   1          {
3491   2          case _MI_USER_R:       
3492   2              DrawColorUSERMenuItem(ucOsdState,_ST_ADJUST);
3493   2              ucOsdState = _MI_USER_RADJ;
3494   2              break;
3495   2          case _MI_USER_G:
3496   2              DrawColorUSERMenuItem(ucOsdState,_ST_ADJUST);
3497   2              ucOsdState = _MI_USER_GADJ;
3498   2              break;
3499   2          case _MI_USER_B:
3500   2              DrawColorUSERMenuItem(ucOsdState,_ST_ADJUST);
3501   2              ucOsdState = _MI_USER_BADJ;
3502   2              break;
3503   2              
3504   2          }
3505   1          
3506   1          // 3. Now enter sub menu
3507   1          // Insert code to here ...
3508   1      }
3509          #endif
3510          
3511          //---------------------------------------------------------------------------
3512          void MColorUserReturnUpMenu(void)
3513          {
3514   1          ClearColorUSERMenu();
3515   1          EnterColorTempMenu();
3516   1      }
3517          
3518          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3519          //---------------------------------------------------------------------------
3520          //
3521          //
3522          void MRProc(void)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 58  

3523          {
3524   1          switch(ucOsdEventMsg)
3525   1          {
3526   2          case _OE_ADJ_INC:           
3527   2              MRValueAdj(_INC);               
3528   2              break;
3529   2              
3530   2          case _OE_ADJ_DEC:           
3531   2              MRValueAdj(_DEC);               
3532   2              break;
3533   2              
3534   2          case _OE_MENU_NEXT:   
3535   2              MRReturnUpMenu();
3536   2              MColorUserMenuAdj(_NEXT);
3537   2              break;
3538   2              
3539   2          case _OE_MENU_PREV: 
3540   2              MRReturnUpMenu();
3541   2              MColorUserMenuAdj(_PREV);
3542   2              break;
3543   2              
3544   2          case _OE_ENTER_SUBMENU: 
3545   2              
3546   2              break;
3547   2              
3548   2          case _OE_RETURN_UPMENU:     
3549   2              MRReturnUpMenu();               
3550   2              break;
3551   2              
3552   2          }
3553   1      }
3554          //---------------------------------------------------------------------------
3555          void MRValueAdj(BYTE ucMode)
3556          {
3557   1          ColorRAdjust(ucMode);
3558   1          CAdjustContrast();
3559   1          ucOsdEventMsg = _SAVE_EE_COLORPROC1_MSG;    
3560   1      }
3561          //---------------------------------------------------------------------------
3562          void MRReturnUpMenu(void)
3563          {
3564   1          // 1. Before Return UpMenu
3565   1          DrawColorUSERMenuItem(_MI_USER_R, _ST_SELECT);  
3566   1          
3567   1          // 2. Change ucOsdState
3568   1          ucOsdState = _MI_USER_R;
3569   1          
3570   1          // 3. Now Return to upmenu
3571   1          // Insert code to here ...
3572   1          
3573   1      }
3574          //---------------------------------------------------------------------------
3575          //
3576          //
3577          void MGProc(void)
3578          {
3579   1          switch(ucOsdEventMsg)
3580   1          {
3581   2          case _OE_ADJ_INC:           
3582   2              MGValueAdj(_INC);               
3583   2              break;
3584   2              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 59  

3585   2          case _OE_ADJ_DEC:           
3586   2              MGValueAdj(_DEC);               
3587   2              break;
3588   2              
3589   2          case _OE_MENU_NEXT:   
3590   2              MGReturnUpMenu();
3591   2              MColorUserMenuAdj(_NEXT);
3592   2              break;
3593   2              
3594   2          case _OE_MENU_PREV: 
3595   2              MGReturnUpMenu();
3596   2              MColorUserMenuAdj(_PREV);
3597   2              break;
3598   2              
3599   2          case _OE_ENTER_SUBMENU:    
3600   2              break;
3601   2              
3602   2          case _OE_RETURN_UPMENU:     
3603   2              MGReturnUpMenu();               
3604   2              break;
3605   2              
3606   2          }
3607   1      }
3608          //---------------------------------------------------------------------------
3609          void MGValueAdj(BYTE ucMode)
3610          {
3611   1          ColorGAdjust(ucMode);
3612   1          CAdjustContrast();
3613   1          ucOsdEventMsg = _SAVE_EE_COLORPROC1_MSG;    
3614   1      }
3615          //---------------------------------------------------------------------------
3616          void MGReturnUpMenu(void)
3617          {
3618   1          // 1. Before Return UpMenu
3619   1          DrawColorUSERMenuItem(_MI_USER_G, _ST_SELECT);  
3620   1          
3621   1          // 2. Change ucOsdState
3622   1          ucOsdState = _MI_USER_G;
3623   1          
3624   1          // 3. Now Return to upmenu
3625   1          // Insert code to here ...
3626   1          
3627   1      }
3628          //---------------------------------------------------------------------------
3629          //
3630          //
3631          void MBProc(void)
3632          {
3633   1          switch(ucOsdEventMsg)
3634   1          {
3635   2          case _OE_ADJ_INC:           
3636   2              MBValueAdj(_INC);               
3637   2              break;
3638   2              
3639   2          case _OE_ADJ_DEC:           
3640   2              MBValueAdj(_DEC);               
3641   2              break;
3642   2              
3643   2          case _OE_MENU_NEXT:
3644   2              MBReturnUpMenu();
3645   2              MColorUserMenuAdj(_NEXT);
3646   2              break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 60  

3647   2              
3648   2          case _OE_MENU_PREV:
3649   2              MBReturnUpMenu();
3650   2              MColorUserMenuAdj(_PREV);
3651   2              break;
3652   2              
3653   2          case _OE_ENTER_SUBMENU:
3654   2              break;
3655   2              
3656   2          case _OE_RETURN_UPMENU:     
3657   2              MBReturnUpMenu();               
3658   2              break;
3659   2              
3660   2          }
3661   1      }
3662          //---------------------------------------------------------------------------
3663          void MBValueAdj(BYTE ucMode)
3664          {
3665   1          ColorBAdjust(ucMode);
3666   1          CAdjustContrast();
3667   1          ucOsdEventMsg = _SAVE_EE_COLORPROC1_MSG;
3668   1      }
3669          //---------------------------------------------------------------------------
3670          void MBReturnUpMenu(void)
3671          {
3672   1          // 1. Before Return UpMenu
3673   1          DrawColorUSERMenuItem(_MI_USER_B, _ST_SELECT);
3674   1          
3675   1          // 2. Change ucOsdState
3676   1          ucOsdState = _MI_USER_B;
3677   1          
3678   1          // 3. Now Return to upmenu
3679   1          // Insert code to here ...   
3680   1      }
3681          #endif
3682          
3683          
3684          
3685          //---------------------------------------------------------------------------
3686          void ColorRAdjust(BYTE ucMode)
3687          {
3688   1          // ucMode : _INC or _DEC
3689   1          SET_KEYREPEATENABLE();
3690   1          stColorTempData.ColorTemp[_RED] = ValueInRangeChange(0, 255, stColorTempData.ColorTemp[_RED], _NON_LOO
             -P | ucMode);
3691   1          
3692   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  DrawColorUSERMenuItem(_MI_USER_R, _ST_SELECT);
              #endif
3695   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3696   1          DrawColorUSERMenuItem(_MI_USER_R, _ST_ADJUST);
3697   1      #endif
3698   1      }
3699          //---------------------------------------------------------------------------
3700          void ColorGAdjust(BYTE ucMode)
3701          {
3702   1          // ucMode : _INC or _DEC
3703   1          SET_KEYREPEATENABLE();
3704   1          stColorTempData.ColorTemp[_GREEN] = ValueInRangeChange(0, 255, stColorTempData.ColorTemp[_GREEN], _NON
             -_LOOP | ucMode);
3705   1          
3706   1      #if(_KEY_TYPE == _KT_PCB2660_003)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 61  

                  DrawColorUSERMenuItem(_MI_USER_G, _ST_SELECT);
              #endif
3709   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3710   1          DrawColorUSERMenuItem(_MI_USER_G, _ST_ADJUST);
3711   1      #endif
3712   1      }
3713          //---------------------------------------------------------------------------
3714          void ColorBAdjust(BYTE ucMode)
3715          {
3716   1          // ucMode : _INC or _DEC
3717   1          SET_KEYREPEATENABLE();
3718   1          stColorTempData.ColorTemp[_BLUE] = ValueInRangeChange(0, 255, stColorTempData.ColorTemp[_BLUE], _NON_L
             -OOP | ucMode);
3719   1          
3720   1          
3721   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  DrawColorUSERMenuItem(_MI_USER_B, _ST_SELECT);
              #endif
3724   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3725   1          DrawColorUSERMenuItem(_MI_USER_B, _ST_ADJUST);
3726   1      #endif
3727   1      }
3728          
3729          //---------------------------------------------------------------------------
3730          // MainMenu\Adjust\AutoAdjust,HPosition,VPosition,Phase,Clock,
3731          // MainMenu\Adjust\_MI_AUTOADJUST,_MI_HPOSITION,_MI_VPOSITION,_MI_PHASE,_MI_CLOCK,
3732          void MAdjustProc(void)
3733          {
3734   1          switch(ucOsdEventMsg)
3735   1          {
3736   2          case _OE_ADJ_INC:           MAdjustValueAdj(_INC);              break;
3737   2          case _OE_ADJ_DEC:           MAdjustValueAdj(_DEC);              break;
3738   2          case _OE_MENU_NEXT:         MAdjustMenuAdj(_NEXT);              break;
3739   2          case _OE_MENU_PREV:         MAdjustMenuAdj(_PREV);              break;
3740   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3741   2          case _OE_ENTER_SUBMENU:     MAdjustEnterSubMenu();              break;
3742   2      #endif
3743   2          case _OE_RETURN_UPMENU:     MAdjustReturnUpMenu();              break;
3744   2              
3745   2          }
3746   1      }
3747          //---------------------------------------------------------------------------
3748          void MAdjustValueAdj(BYTE ucMode)
3749          {
3750   1          // ucMode : _INC or _DEC
3751   1          switch(ucOsdState)
3752   1          {
3753   2          case _MI_AUTOADJUST:        EnterAutoConfigMenu();          break;
3754   2          case _MI_HPOSITION:         HPositionAdjust(ucMode);        break;
3755   2          case _MI_VPOSITION:         VPositionAdjust(ucMode);        break;
3756   2          case _MI_PHASE:             PhaseAdjust(ucMode);            break;
3757   2          case _MI_CLOCK:             ClockAdjust(ucMode);            break;
3758   2          }
3759   1      }
3760          //---------------------------------------------------------------------------
3761          void MAdjustMenuAdj(BYTE ucMode)
3762          {
3763   1          // ucMode : _NEXT or _Prev
3764   1          
3765   1          BYTE ucNewItem = AdjustMenuItem(_MI_AUTOADJUST,_MI_CLOCK,ucMode);
3766   1          if(ucNewItem == ucOsdState)
3767   1              return;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 62  

3768   1          
3769   1          // 1. Clear Current Menu
3770   1          DrawAdjustPageMenuItem(ucOsdState,_ST_NORMAL);
3771   1          
3772   1          // 2. Change ucOsdState
3773   1          ucOsdState = ucNewItem;
3774   1          
3775   1          // 3. Draw New Item
3776   1          DrawAdjustPageMenuItem(ucOsdState,_ST_SELECT);
3777   1          
3778   1      }
3779          
3780          //---------------------------------------------------------------------------
3781          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3782          void MAdjustEnterSubMenu(void)
3783          {
3784   1          // 1. Before Enter SubMenu
3785   1          // Insert code to here ...
3786   1          
3787   1          
3788   1          // 2. Change ucOsdState
3789   1          switch(ucOsdState)
3790   1          {
3791   2          case _MI_AUTOADJUST: 
3792   2              DrawAutoAdjust(_ST_ADJUST);
3793   2              EnterAutoConfigMenu();
3794   2              break;
3795   2                                      
3796   2          case _MI_HPOSITION:
3797   2              DrawHPosition(_ST_ADJUST);
3798   2              ucOsdState = _MI_ADJUST_HPOSITIONADJ;
3799   2              break;
3800   2                                      
3801   2          case _MI_VPOSITION:
3802   2              DrawVPosition(_ST_ADJUST);
3803   2              ucOsdState = _MI_ADJUST_VPOSITIONADJ;
3804   2              break;
3805   2              
3806   2          case _MI_PHASE: 
3807   2              DrawPhase(_ST_ADJUST);
3808   2              ucOsdState = _MI_ADJUST_PHASEADJ;
3809   2              break;
3810   2              
3811   2          case _MI_CLOCK:                                                                                       
             -          
3812   2              DrawClock(_ST_ADJUST);
3813   2              ucOsdState = _MI_ADJUST_CLOCKADJ;
3814   2              break;
3815   2          }
3816   1      }
3817          #endif
3818          //---------------------------------------------------------------------------
3819          void MAdjustReturnUpMenu(void)
3820          {
3821   1          // 1. Before Return UpMenu
3822   1          DrawAdjustPageMenuItem(ucOsdState,_ST_NORMAL);
3823   1          
3824   1          // 2. Change ucOsdState
3825   1          ucOsdState = _MI_ADJUST;
3826   1          
3827   1          // 3. Now Return to upmenu
3828   1          // Insert code to here ...
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 63  

3829   1      }
3830          //---------------------------------------------------------------------------
3831          
3832          #define _PM_AUTOCONFIG_ROW_START                    4
3833          #define _PM_AUTOCONFIG_ROW_HEIGHT                   4
3834          #define _PM_AUTOCONFIG_COL_START                    3
3835          
3836          void DrawAutoConfigMenuItem(BYTE ucItem,BYTE ucState)
3837          {
3838   1          BYTE y;
3839   1          BYTE *pStr;
3840   1          
3841   1          if(!g_tMenuItem[ucItem].Enable())
3842   1          {
3843   2              ucState = _ST_DISABLE;  
3844   2          }
3845   1          
3846   1          // get display line
3847   1          y = GetShowIndex(ucItem,BEGIN(_MI_AUTOADJUST_OK),END(_MI_AUTOADJUST_CANCEL));
3848   1          
3849   1          if(y == _NOT_SHOW)
3850   1              return;
3851   1          
3852   1          
3853   1          switch(ucItem)
3854   1          {
3855   2          case _MI_AUTOADJUST_OK:         pStr = sOK[GET_LANGUAGE()];     break;
3856   2          case _MI_AUTOADJUST_CANCEL:     pStr = sCancel[GET_LANGUAGE()]; break;
3857   2          }
3858   1          
3859   1          DrawAPopupMenuItem(pStr,y,_PM_AUTOCONFIG_ROW_START,_PM_AUTOCONFIG_COL_START,ucState);
3860   1          
3861   1      }
3862          
3863          //---------------------------------------------------------------------------
3864          void EnterAutoConfigMenu(void)
3865          {
3866   1          CreatePopupMenu(_PM_AUTOCONFIG_ROW_START, _PM_AUTOCONFIG_ROW_HEIGHT);
3867   1          
3868   1          ucOsdState = _MI_AUTOADJUST_CANCEL;
3869   1          
3870   1          DrawAutoConfigMenuItem(_MI_AUTOADJUST_OK,_ST_NORMAL);
3871   1          DrawAutoConfigMenuItem(_MI_AUTOADJUST_CANCEL,_ST_SELECT);   
3872   1      }
3873          //---------------------------------------------------------------------------
3874          void ClearAutoConfigMenu(void)
3875          {
3876   1          ClearPopupMenu(_PM_AUTOCONFIG_ROW_START, _PM_AUTOCONFIG_ROW_HEIGHT);
3877   1      }
3878          //---------------------------------------------------------------------------
3879          
3880          
3881          //---------------------------------------------------------------------------
3882          // MainMenu\Adjust\AutoAdjust\AutoAdjust_OK,AutoAdjust_Cancel,
3883          // MainMenu\Adjust\AutoAdjust\_MI_AUTOADJUST_OK,_MI_AUTOADJUST_CANCEL,
3884          void MAutoAdjustProc(void)
3885          {
3886   1          switch(ucOsdEventMsg)
3887   1          {
3888   2          case _OE_ADJ_INC:           MAutoAdjustValueAdj(_INC);          break;
3889   2          case _OE_ADJ_DEC:           MAutoAdjustValueAdj(_DEC);          break;
3890   2          case _OE_MENU_NEXT:         MAutoAdjustMenuAdj(_NEXT);          break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 64  

3891   2          case _OE_MENU_PREV:         MAutoAdjustMenuAdj(_PREV);          break;
3892   2          case _OE_ENTER_SUBMENU:     MAutoAdjustEnterSubMenu();          break;
3893   2          case _OE_RETURN_UPMENU:     MAutoAdjustReturnUpMenu();          break;
3894   2              
3895   2          }
3896   1      }
3897          //---------------------------------------------------------------------------
3898          void MAutoAdjustValueAdj(BYTE ucMode)
3899          {
3900   1          // ucMode : _INC or _DEC
3901   1          ucMode = ucMode;        // test code
3902   1      }
3903          //---------------------------------------------------------------------------
3904          void MAutoAdjustMenuAdj(BYTE ucMode)
3905          {
3906   1          // ucMode : _NEXT or _Prev
3907   1          
3908   1          BYTE ucNewItem = AdjustMenuItem(_MI_AUTOADJUST_OK,_MI_AUTOADJUST_CANCEL,ucMode);
3909   1          if(ucNewItem == ucOsdState)
3910   1              return;
3911   1          
3912   1          // 1. Clear Current Menu
3913   1          DrawAutoConfigMenuItem(ucOsdState,_ST_NORMAL);
3914   1          
3915   1          // 2. Change ucOsdState
3916   1          ucOsdState = ucNewItem;
3917   1          
3918   1          // 3. Draw New Item
3919   1          DrawAutoConfigMenuItem(ucOsdState,_ST_SELECT);
3920   1          
3921   1      }
3922          //---------------------------------------------------------------------------
3923          void MAutoAdjustEnterSubMenu(void)
3924          {
3925   1          bit fDoAuto = 0;
3926   1          
3927   1          if(ucOsdState == _MI_AUTOADJUST_OK)
3928   1              fDoAuto = 1;
3929   1          
3930   1          MAutoAdjustReturnUpMenu();
3931   1          
3932   1          if(fDoAuto)
3933   1          {
3934   2              CAutoDoAutoConfig();
3935   2              CAutoDoWhiteBalance();
3936   2              DrawHPosition(_ST_NORMAL);
3937   2              DrawVPosition(_ST_NORMAL);
3938   2              DrawPhase(_ST_NORMAL);
3939   2              DrawClock(_ST_NORMAL);
3940   2              
3941   2          }
3942   1      }
3943          //---------------------------------------------------------------------------
3944          void MAutoAdjustReturnUpMenu(void)
3945          {
3946   1          // 1. Before Return UpMenu
3947   1          ClearAutoConfigMenu();
3948   1          
3949   1          // 2. Change ucOsdState
3950   1          ucOsdState = _MI_AUTOADJUST;
3951   1          
3952   1          // 3. Now Return to upmenu
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 65  

3953   1          DrawAdjustPage();
3954   1      }
3955          
3956          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
3957          //---------------------------------------------------------------------------
3958          // MainMenu\Adjust\HPosition\HPositionAdj
3959          // MainMenu\Adjust\HPosition\_MI_ADJUST_HPOSITIONADJ
3960          void MAdjustHPositionProc(void)
3961          {
3962   1          switch(ucOsdEventMsg)
3963   1          {
3964   2          case _OE_ADJ_INC:           MAdjustHPositionValueAdj(_INC);               break;
3965   2          case _OE_ADJ_DEC:           MAdjustHPositionValueAdj(_DEC);               break;
3966   2          case _OE_MENU_NEXT:         MColorMenuAdj(_NEXT);                         break;
3967   2          case _OE_MENU_PREV:         MColorMenuAdj(_PREV);                         break;
3968   2          case _OE_ENTER_SUBMENU:     MColorEnterSubMenu();                         break;
3969   2          case _OE_RETURN_UPMENU:     MAdjustHPositionReturnUpMenu();               break;
3970   2              
3971   2          }
3972   1      }
3973          //---------------------------------------------------------------------------
3974          void MAdjustHPositionValueAdj(BYTE ucMode)
3975          {
3976   1          HPositionAdjust(ucMode);
3977   1      }
3978          //---------------------------------------------------------------------------
3979          void MAdjustHPositionReturnUpMenu(void)
3980          {
3981   1          // 1. Before Return UpMenu
3982   1          DrawHPosition(_ST_SELECT);
3983   1          
3984   1          // 2. Change ucOsdState
3985   1          ucOsdState = _MI_HPOSITION;
3986   1          
3987   1          // 3. Now Return to upmenu
3988   1          // Insert code to here ...
3989   1      }
3990          //---------------------------------------------------------------------------
3991          // MainMenu\Adjust\VPosition\VPositionAdj
3992          // MainMenu\Adjust\VPosition\_MI_ADJUST_VPOSITIONADJ
3993          void MAdjustVPositionProc(void)
3994          {
3995   1          switch(ucOsdEventMsg)
3996   1          {
3997   2          case _OE_ADJ_INC:          
3998   2              MAdjustVPositionValueAdj(_INC);               
3999   2              break;
4000   2              
4001   2          case _OE_ADJ_DEC:          
4002   2              MAdjustVPositionValueAdj(_DEC);               
4003   2              break;
4004   2              
4005   2          case _OE_MENU_NEXT:         
4006   2              MAdjustVPositionReturnUpMenu();
4007   2              MAdjustMenuAdj(_NEXT);
4008   2              break;
4009   2              
4010   2          case _OE_MENU_PREV:         
4011   2              MAdjustVPositionReturnUpMenu();
4012   2              MAdjustMenuAdj(_PREV);
4013   2              break;
4014   2              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 66  

4015   2          case _OE_ENTER_SUBMENU:     
4016   2              
4017   2              break;
4018   2              
4019   2          case _OE_RETURN_UPMENU:     
4020   2              MAdjustVPositionReturnUpMenu();               
4021   2              break;
4022   2          }
4023   1      }
4024          //---------------------------------------------------------------------------
4025          void MAdjustVPositionValueAdj(BYTE ucMode)
4026          {
4027   1          VPositionAdjust(ucMode);
4028   1      }
4029          //---------------------------------------------------------------------------
4030          void MAdjustVPositionReturnUpMenu(void)
4031          {
4032   1          // 1. Before Return UpMenu
4033   1          DrawVPosition(_ST_SELECT);
4034   1          
4035   1          // 2. Change ucOsdState
4036   1          ucOsdState = _MI_VPOSITION;
4037   1          
4038   1          // 3. Now Return to upmenu
4039   1          // Insert code to here ...
4040   1      }
4041          //---------------------------------------------------------------------------
4042          // MainMenu\Adjust\Phase\PhaseAdj
4043          // MainMenu\Adjust\Phase\_MI_PHASEADJ
4044          void MAdjustPhaseProc(void)
4045          {
4046   1          switch(ucOsdEventMsg)
4047   1          {
4048   2          case _OE_ADJ_INC:          
4049   2              MAdjustPhaseValueAdj(_INC);               
4050   2              break;
4051   2              
4052   2          case _OE_ADJ_DEC:          
4053   2              MAdjustPhaseValueAdj(_DEC);
4054   2              break;
4055   2              
4056   2          case _OE_MENU_NEXT:       
4057   2              MAdjustPhaseReturnUpMenu();
4058   2              MAdjustMenuAdj(_NEXT);
4059   2              break;
4060   2              
4061   2          case _OE_MENU_PREV:        
4062   2              MAdjustPhaseReturnUpMenu();
4063   2              MAdjustMenuAdj(_PREV);
4064   2              break;
4065   2              
4066   2          case _OE_ENTER_SUBMENU:     
4067   2              
4068   2              break;
4069   2              
4070   2          case _OE_RETURN_UPMENU:     
4071   2              MAdjustPhaseReturnUpMenu();               
4072   2              break;
4073   2              
4074   2          }
4075   1      }
4076          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 67  

4077          void MAdjustPhaseValueAdj(BYTE ucMode)
4078          {
4079   1          PhaseAdjust(ucMode);
4080   1      }
4081          //---------------------------------------------------------------------------
4082          void MAdjustPhaseReturnUpMenu(void)
4083          {
4084   1          // 1. Before Return UpMenu
4085   1          DrawPhase(_ST_SELECT);
4086   1          
4087   1          // 2. Change ucOsdState
4088   1          ucOsdState = _MI_PHASE;
4089   1          
4090   1          // 3. Now Return to upmenu
4091   1          // Insert code to here ...
4092   1      }
4093          //---------------------------------------------------------------------------
4094          // MainMenu\Adjust\Clock\ClockAdj
4095          // MainMenu\Adjust\Clock\_MI_CLOCKADJ
4096          void MAdjustClockProc(void)
4097          {
4098   1          switch(ucOsdEventMsg)
4099   1          {
4100   2          case _OE_ADJ_INC:          
4101   2              MAdjustClockValueAdj(_INC);               
4102   2              break;
4103   2              
4104   2          case _OE_ADJ_DEC:          
4105   2              MAdjustClockValueAdj(_DEC);               
4106   2              break;
4107   2              
4108   2          case _OE_MENU_NEXT:         
4109   2              MAdjustClockReturnUpMenu();
4110   2              MAdjustMenuAdj(_NEXT);
4111   2              break;
4112   2                                      
4113   2          case _OE_MENU_PREV:         
4114   2              MAdjustClockReturnUpMenu();       
4115   2              MAdjustMenuAdj(_PREV);
4116   2              break;
4117   2                                      
4118   2          case _OE_ENTER_SUBMENU:     
4119   2              
4120   2              break;
4121   2              
4122   2          case _OE_RETURN_UPMENU:     
4123   2              MAdjustClockReturnUpMenu();               
4124   2              break;
4125   2          }
4126   1      }
4127          //---------------------------------------------------------------------------
4128          void MAdjustClockValueAdj(BYTE ucMode)
4129          {
4130   1          ClockAdjust(ucMode);
4131   1      }
4132          //---------------------------------------------------------------------------
4133          void MAdjustClockReturnUpMenu(void)
4134          {
4135   1          // 1. Before Return UpMenu
4136   1          DrawClock(_ST_SELECT);
4137   1          
4138   1          // 2. Change ucOsdState
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 68  

4139   1          ucOsdState = _MI_CLOCK;
4140   1          
4141   1          // 3. Now Return to upmenu
4142   1          // Insert code to here ...
4143   1      }
4144          //---------------------------------------------------------------------------
4145          #endif
4146          
4147          
4148          //---------------------------------------------------------------------------
4149          // MainMenu\OSD\Language,HPosition,VPosition,Timer,Double,Transparent,
4150          // MainMenu\OSD\_MI_LANGUAGE,_MI_OSD_HPOSITION,_MI_OSD_VPOSITION,_MI_TIMER,_MI_DOUBLE,_MI_TRANSPARENT,
4151          void MOSDProc(void)
4152          {
4153   1          switch(ucOsdEventMsg)
4154   1          {
4155   2          case _OE_ADJ_INC:           MOSDValueAdj(_INC);                 break;
4156   2          case _OE_ADJ_DEC:           MOSDValueAdj(_DEC);                 break;
4157   2          case _OE_MENU_NEXT:         MOSDMenuAdj(_NEXT);                 break;
4158   2          case _OE_MENU_PREV:         MOSDMenuAdj(_PREV);                 break;
4159   2          case _OE_ENTER_SUBMENU:     MOSDEnterSubMenu();                 break;
4160   2          case _OE_RETURN_UPMENU:     MOSDReturnUpMenu();                 break;
4161   2              
4162   2          }
4163   1      }
4164          //---------------------------------------------------------------------------
4165          void MOSDValueAdj(BYTE ucMode)
4166          {
4167   1          // ucMode : _INC or _DEC
4168   1          // 1. Before Enter SubMenu
4169   1          // Insert code to here ...
4170   1          ucMode = ucMode;
4171   1          
4172   1          // 2. Change ucOsdState
4173   1          switch(ucOsdState)
4174   1          {
4175   2          case _MI_LANGUAGE:          EnterLanguageMenu();                break;
4176   2          case _MI_OSD_HPOSITION:     COSDHPositionAdj(ucMode);           break;
4177   2          case _MI_OSD_VPOSITION:     COSDVPositionAdj(ucMode);           break;
4178   2          case _MI_TIMER:             MTimerAdjValue(ucMode);             break;
4179   2          case _MI_DOUBLE:            EnterDoubleMenu();                  break;
4180   2          case _MI_TRANSPARENT:       CTransparentAdj(ucMode);            break;
4181   2          }
4182   1          
4183   1          // 3. Now enter sub menu
4184   1          // Insert code to here ...
4185   1          
4186   1      }
4187          //---------------------------------------------------------------------------
4188          void MOSDMenuAdj(BYTE ucMode)
4189          {
4190   1          // ucMode : _NEXT or _Prev
4191   1          
4192   1          BYTE ucNewItem = AdjustMenuItem(_MI_LANGUAGE,_MI_TRANSPARENT,ucMode);
4193   1          if(ucNewItem == ucOsdState)
4194   1              return;
4195   1          
4196   1          // 1. Clear Current Menu
4197   1          DrawOsdPageMenuItem(ucOsdState,_ST_NORMAL);
4198   1          
4199   1          // 2. Change ucOsdState
4200   1          ucOsdState = ucNewItem;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 69  

4201   1          
4202   1          // 3. Draw New Item
4203   1          DrawOsdPageMenuItem(ucOsdState,_ST_SELECT);
4204   1          
4205   1      }
4206          //---------------------------------------------------------------------------
4207          void MOSDEnterSubMenu(void)
4208          {
4209   1          // 1. Before Enter SubMenu
4210   1          // Insert code to here ...
4211   1          
4212   1          
4213   1          // 2. Change ucOsdState
4214   1          switch(ucOsdState)
4215   1          {
4216   2          case _MI_LANGUAGE:
4217   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4218   2              DrawLanguage(_ST_ADJUST);
4219   2      #endif
4220   2              EnterLanguageMenu();
4221   2              break;
4222   2      
4223   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4224   2          case _MI_OSD_HPOSITION:
4225   2              DrawOSDHPosition(_ST_ADJUST);
4226   2              ucOsdState = _MI_OSD_HPOSITIONADJ;
4227   2              break;
4228   2      
4229   2          case _MI_OSD_VPOSITION:
4230   2              DrawOSDVPosition(_ST_ADJUST);
4231   2              ucOsdState = _MI_OSD_VPOSITIONADJ;
4232   2              break;
4233   2              
4234   2          case _MI_TIMER:
4235   2              DrawOSDTimer(_ST_ADJUST);
4236   2              ucOsdState = _MI_TIMERADJ;
4237   2              break;
4238   2      #endif
4239   2      
4240   2          case _MI_DOUBLE:
4241   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4242   2              DrawDouble(_ST_ADJUST);
4243   2              EnterDoubleMenu();
4244   2      #endif
4245   2      #if(_KEY_TYPE == _KT_PCB2660_003)
                      ucOsdState = _MI_DOUBLE_ON;
              #endif
4248   2              break;
4249   2      
4250   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4251   2          case _MI_TRANSPARENT:
4252   2              DrawTransparent(_ST_ADJUST);
4253   2              ucOsdState = _MI_TRANSPARENTADJ;
4254   2              break;
4255   2      #endif
4256   2          }
4257   1          
4258   1          // 3. Now enter sub menu
4259   1          // Insert code to here ...
4260   1          
4261   1          
4262   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 70  

4263          //---------------------------------------------------------------------------
4264          void MOSDReturnUpMenu(void)
4265          {
4266   1          // 1. Before Return UpMenu
4267   1          DrawOsdPageMenuItem(ucOsdState,_ST_NORMAL);
4268   1          
4269   1          // 2. Change ucOsdState
4270   1          ucOsdState = _MI_OSD;
4271   1          
4272   1          // 3. Now Return to upmenu
4273   1          // Insert code to here ...
4274   1      }
4275          //---------------------------------------------------------------------------
4276          
4277          #define _PM_LANGUAGE_ROW_START                      4
4278          //#define _PM_LANGUAGE_ROW_HEIGHT                       5
4279          #define _PM_LANGUAGE_COL_START                      1
4280          
4281          void DrawLangaugeMenuItem(BYTE ucItem,BYTE ucState)
4282          {
4283   1          BYTE y;
4284   1          
4285   1          if(!g_tMenuItem[ucItem].Enable())
4286   1          {
4287   2              ucState = _ST_DISABLE;  
4288   2          }
4289   1          
4290   1          // get display line
4291   1          y = GetShowIndex(ucItem,BEGIN(_MI_ENGLISH),END(_MI_RUS));
4292   1          
4293   1          if(y == _NOT_SHOW)
4294   1              return;
4295   1          
4296   1          DrawAPopupMenuItem(sLanguageName[ucItem - _MI_ENGLISH],y,_PM_LANGUAGE_ROW_START,_PM_LANGUAGE_COL_START
             -,ucState);
4297   1          
4298   1      }
4299          
4300          //---------------------------------------------------------------------------
4301          void EnterLanguageMenu(void)
4302          {
4303   1          BYTE i;
4304   1          BYTE ucMode;
4305   1          BYTE ucCount;
4306   1          
4307   1          ucCount = GetShowCount(BEGIN(_MI_ENGLISH),END(_MI_RUS));
4308   1          
4309   1          CreatePopupMenu(_PM_LANGUAGE_ROW_START, ucCount + 2);
4310   1          
4311   1          ucOsdState = GET_LANGUAGE() + _MI_ENGLISH;
4312   1          
4313   1          for(i=_MI_ENGLISH;i<=_MI_RUS;i++)
4314   1          {
4315   2              if(i == ucOsdState)
4316   2                  ucMode = _ST_SELECT;
4317   2              else
4318   2                  ucMode = _ST_NORMAL;
4319   2              
4320   2              DrawLangaugeMenuItem(i,ucMode);
4321   2          }
4322   1          
4323   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 71  

4324          //---------------------------------------------------------------------------
4325          void ClearLangaugeMenu(void)
4326          {
4327   1          BYTE ucCount;
4328   1          
4329   1          ucCount = GetShowCount(BEGIN(_MI_ENGLISH),END(_MI_RUS));
4330   1          
4331   1          ClearPopupMenu(_PM_LANGUAGE_ROW_START, ucCount + 2);
4332   1      }
4333          //---------------------------------------------------------------------------
4334          
4335          
4336          
4337          //---------------------------------------------------------------------------
4338          // MainMenu\OSD\Language\English,CHI_S,FRA,ITA,DEU,ESP,CHI_T,JAP,KOR,RUS,
4339          // MainMenu\OSD\Language\_MI_ENGLISH,_MI_CHI_S,_MI_FRA,_MI_ITA,_MI_DEU,_MI_ESP,_MI_CHI_T,_MI_JAP,_MI_KOR,_
             -MI_RUS,
4340          void MLanguageProc(void)
4341          {
4342   1          switch(ucOsdEventMsg)
4343   1          {
4344   2          case _OE_ADJ_INC:           MLanguageValueAdj(_INC);            break;
4345   2          case _OE_ADJ_DEC:           MLanguageValueAdj(_DEC);            break;
4346   2          case _OE_MENU_NEXT:         MLanguageMenuAdj(_NEXT);            break;
4347   2          case _OE_MENU_PREV:         MLanguageMenuAdj(_PREV);            break;
4348   2          case _OE_ENTER_SUBMENU:     MLanguageEnterSubMenu();            break;
4349   2          case _OE_RETURN_UPMENU:     MLanguageReturnUpMenu();            break;
4350   2              
4351   2          }
4352   1      }
4353          //---------------------------------------------------------------------------
4354          void MLanguageValueAdj(BYTE ucMode)
4355          {
4356   1          // ucMode : _INC or _DEC
4357   1          ucMode = ucMode;        // test code
4358   1      }
4359          //---------------------------------------------------------------------------
4360          void MLanguageMenuAdj(BYTE ucMode)
4361          {
4362   1          // ucMode : _NEXT or _Prev
4363   1          
4364   1          BYTE ucNewItem = AdjustMenuItem(_MI_ENGLISH,_MI_RUS,ucMode);
4365   1          if(ucNewItem == ucOsdState)
4366   1              return;
4367   1          
4368   1          // 1. Clear Current Menu
4369   1          DrawLangaugeMenuItem(ucOsdState,_ST_NORMAL);
4370   1          
4371   1          // 2. Change ucOsdState
4372   1          ucOsdState = ucNewItem;
4373   1          
4374   1          // 3. Draw New Item
4375   1          DrawLangaugeMenuItem(ucOsdState,_ST_SELECT);
4376   1      }
4377          //---------------------------------------------------------------------------
4378          void MLanguageEnterSubMenu(void)
4379          {
4380   1          SET_LANGUAGE(ucOsdState - _MI_ENGLISH);
4381   1          MainMenuItemChgClear();
4382   1          
4383   1      #if(_CHINESE_FONT_TYPE == _CHINESE_2_FONT)
4384   1          LoadCHIFont(_LF_OSD_PAGE);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 72  

4385   1      #endif
4386   1          LoadLanguageFont();
4387   1          DrawMainItemTitle(_MI_OSD);
4388   1          MLanguageReturnUpMenu();
4389   1          
4390   1          ucOsdEventMsg = _SAVE_EE_OSDUSERDATA_MSG;            
4391   1      }
4392          //---------------------------------------------------------------------------
4393          void MLanguageReturnUpMenu(void)
4394          {
4395   1          // 1. Before Return UpMenu
4396   1          ClearLangaugeMenu();
4397   1          
4398   1          // 2. Change ucOsdState
4399   1          ucOsdState = _MI_LANGUAGE;
4400   1          
4401   1          // 3. Now Return to upmenu
4402   1          DrawOSDPage();
4403   1      }
4404          //---------------------------------------------------------------------------
4405          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4406          void MTimerProc(void)
4407          {
4408   1          switch(ucOsdEventMsg)
4409   1          {
4410   2          case _OE_ADJ_INC:      MTimerAdjValue(_INC);     break;
4411   2          case _OE_ADJ_DEC:      MTimerAdjValue(_DEC);     break;
4412   2          case _OE_MENU_NEXT:    
4413   2              MTimerReturnUpMenu();     
4414   2              MOSDMenuAdj(_NEXT);
4415   2              break;
4416   2                                      
4417   2          case _OE_MENU_PREV:
4418   2              MTimerReturnUpMenu();
4419   2              MOSDMenuAdj(_PREV);
4420   2              break;
4421   2                                      
4422   2          case _OE_ENTER_SUBMENU:
4423   2              break;
4424   2              
4425   2          case _OE_RETURN_UPMENU: MTimerReturnUpMenu();    break;
4426   2                                      
4427   2          }
4428   1      }
4429          
4430          //---------------------------------------------------------------------------
4431          void MTimerReturnUpMenu(void)
4432          {
4433   1          // 1. Before Return UpMenu
4434   1          //  DrawBright(_ST_SELECT);
4435   1          DrawOSDTimer(_ST_SELECT);
4436   1          
4437   1          // 2. Change ucOsdState
4438   1          ucOsdState = _MI_TIMER;
4439   1          
4440   1          // 3. Now Return to upmenu
4441   1          // Insert code to here ...
4442   1      }
4443          #endif
4444          
4445          //---------------------------------------------------------------------------
4446          void MTimerAdjValue(BYTE ucMode)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 73  

4447          {
4448   1          BYTE y;
4449   1          BYTE idata ucTemp = GET_OSDTIMEOUT()/5;
4450   1          
4451   1          // get display line
4452   1          y = GetShowIndex(_MI_TIMER,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
4453   1          
4454   1          if(y == _NOT_SHOW)
4455   1              return;
4456   1          
4457   1          y = SHOWINDEX_TO_LINE(y);
4458   1          
4459   1          OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x8C, BYTE_ATTRIB);
4460   1          OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x00, BYTE_DISPLAY);
4461   1          
4462   1          ucTemp = ValueInRangeChange(0, 12, ucTemp, _LOOP | ucMode);
4463   1          SET_OSDTIMEOUT(ucTemp * 5);
4464   1          
4465   1          // draw
4466   1          OSDLine(ROW(y), _MSG_COL, LENGTH(10), StateColor(_ST_ADJUST), BYTE_COLOR);
4467   1          
4468   1          if (ucTemp == 0)
4469   1              SUBMENU_RIGHT_TEXTOUT(sOff[GET_LANGUAGE()], y);
4470   1          else
4471   1              CShowNumber(_MSG_COL, y, GET_OSDTIMEOUT());
4472   1          
4473   1          ucOsdEventMsg = _SAVE_EE_OSDUSERDATA_MSG;
4474   1      }
4475          
4476          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4477          //---------------------------------------------------------------------------
4478          // MainMenu\OSD\HPosition\HPositionAdj
4479          // MainMenu\OSD\HPosition\_MI_OSD_HPOSITIONADJ
4480          void MHPositionProc(void)
4481          {
4482   1          switch(ucOsdEventMsg)
4483   1          {
4484   2          case _OE_ADJ_INC:
4485   2              MHPositionValueAdj(_INC);               
4486   2              break;
4487   2              
4488   2          case _OE_ADJ_DEC:
4489   2              MHPositionValueAdj(_DEC);
4490   2              break;
4491   2              
4492   2          case _OE_MENU_NEXT:
4493   2              MHPositionReturnUpMenu(); 
4494   2              MOSDMenuAdj(_NEXT);
4495   2              break;
4496   2              
4497   2          case _OE_MENU_PREV:         
4498   2              MHPositionReturnUpMenu(); 
4499   2              MOSDMenuAdj(_PREV);
4500   2              break;
4501   2              
4502   2          case _OE_ENTER_SUBMENU:     
4503   2              
4504   2              break;
4505   2              
4506   2          case _OE_RETURN_UPMENU:     
4507   2              MHPositionReturnUpMenu();               
4508   2              break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 74  

4509   2              
4510   2          }
4511   1      }
4512          //---------------------------------------------------------------------------
4513          void MHPositionValueAdj(BYTE ucMode)
4514          {
4515   1          COSDHPositionAdj(ucMode);
4516   1      }
4517          //---------------------------------------------------------------------------
4518          void MHPositionReturnUpMenu(void)
4519          {
4520   1          // 1. Before Return UpMenu
4521   1          DrawOSDHPosition(_ST_SELECT);
4522   1          
4523   1          // 2. Change ucOsdState
4524   1          ucOsdState = _MI_OSD_HPOSITION;
4525   1          
4526   1          // 3. Now Return to upmenu
4527   1          // Insert code to here ...
4528   1      }
4529          //---------------------------------------------------------------------------
4530          // MainMenu\OSD\VPosition\VPositionAdj
4531          // MainMenu\OSD\VPosition\_MI_OSD_VPOSITIONADJ
4532          void MVPositionProc(void)
4533          {
4534   1          switch(ucOsdEventMsg)
4535   1          {
4536   2          case _OE_ADJ_INC:           
4537   2              MVPositionValueAdj(_INC);               
4538   2              break;
4539   2              
4540   2          case _OE_ADJ_DEC:           
4541   2              MVPositionValueAdj(_DEC);               
4542   2              break;
4543   2              
4544   2          case _OE_MENU_NEXT:
4545   2              MVPositionReturnUpMenu();
4546   2              MOSDMenuAdj(_NEXT);
4547   2              break;
4548   2              
4549   2          case _OE_MENU_PREV:
4550   2              MVPositionReturnUpMenu();
4551   2              MOSDMenuAdj(_PREV);
4552   2              break;
4553   2              
4554   2          case _OE_ENTER_SUBMENU:
4555   2              
4556   2              break;
4557   2              
4558   2          case _OE_RETURN_UPMENU:     
4559   2              MVPositionReturnUpMenu();               
4560   2              break;
4561   2              
4562   2          }
4563   1      }
4564          //---------------------------------------------------------------------------
4565          void MVPositionValueAdj(BYTE ucMode)
4566          {
4567   1          COSDVPositionAdj(ucMode);
4568   1      }
4569          //---------------------------------------------------------------------------
4570          void MVPositionReturnUpMenu(void)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 75  

4571          {
4572   1          // 1. Before Return UpMenu
4573   1          DrawOSDVPosition(_ST_SELECT);
4574   1          
4575   1          // 2. Change ucOsdState
4576   1          ucOsdState = _MI_OSD_VPOSITION;
4577   1          
4578   1          // 3. Now Return to upmenu
4579   1          // Insert code to here ...
4580   1      }
4581          
4582          //---------------------------------------------------------------------------
4583          #endif
4584          
4585          
4586          #define _PM_DOUBLE_ROW_START                        11
4587          #define _PM_DOUBLE_ROW_HEIGHT                       4
4588          #define _PM_DOUBLE_COL_START                        3
4589          
4590          void DrawDoubleMenuItem(BYTE ucItem,BYTE ucState)
4591          {
4592   1          BYTE y;
4593   1          BYTE *pStr;
4594   1          
4595   1          if(!g_tMenuItem[ucItem].Enable())
4596   1          {
4597   2              ucState = _ST_DISABLE;  
4598   2          }
4599   1          
4600   1          // get display line
4601   1          y = GetShowIndex(ucItem,BEGIN(_MI_DOUBLE_ON),END(_MI_DOUBLE_OFF));
4602   1          
4603   1          if(y == _NOT_SHOW)
4604   1              return;
4605   1          
4606   1          
4607   1          switch(ucItem)
4608   1          {
4609   2          case _MI_DOUBLE_ON:         pStr = sOn[GET_LANGUAGE()];     break;
4610   2          case _MI_DOUBLE_OFF:        pStr = sOff[GET_LANGUAGE()];    break;
4611   2          }
4612   1          
4613   1          DrawAPopupMenuItem(pStr,y,_PM_DOUBLE_ROW_START,_PM_DOUBLE_COL_START,ucState);
4614   1          
4615   1      }
4616          
4617          //---------------------------------------------------------------------------
4618          void EnterDoubleMenu(void)
4619          {
4620   1          BYTE i;
4621   1          BYTE ucMode;
4622   1          
4623   1          CreatePopupMenu(_PM_DOUBLE_ROW_START, _PM_DOUBLE_ROW_HEIGHT);
4624   1          
4625   1          if(GET_OSD_SIZE())
4626   1              ucOsdState = _MI_DOUBLE_ON;
4627   1          else 
4628   1              ucOsdState = _MI_DOUBLE_OFF;
4629   1          
4630   1          for(i=_MI_DOUBLE_ON;i<=_MI_DOUBLE_OFF;i++)
4631   1          {
4632   2              if(i == ucOsdState)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 76  

4633   2                  ucMode = _ST_SELECT;
4634   2              else
4635   2                  ucMode = _ST_NORMAL;
4636   2              
4637   2              DrawDoubleMenuItem(i,ucMode);
4638   2          }
4639   1          
4640   1      }
4641          //---------------------------------------------------------------------------
4642          void ClearDoubleMenu(void)
4643          {
4644   1          ClearPopupMenu(_PM_DOUBLE_ROW_START, _PM_DOUBLE_ROW_HEIGHT);
4645   1      }
4646          //---------------------------------------------------------------------------
4647          
4648          
4649          
4650          
4651          //---------------------------------------------------------------------------
4652          // MainMenu\OSD\Double\Double_On,Double_Off,
4653          // MainMenu\OSD\Double\_MI_DOUBLE_ON,_MI_DOUBLE_OFF,
4654          void MDoubleProc(void)
4655          {
4656   1          switch(ucOsdEventMsg)
4657   1          {
4658   2          case _OE_ADJ_INC:           MDoubleValueAdj(_INC);              break;
4659   2          case _OE_ADJ_DEC:           MDoubleValueAdj(_DEC);              break;
4660   2          case _OE_MENU_NEXT:         MDoubleMenuAdj(_NEXT);              break;
4661   2          case _OE_MENU_PREV:         MDoubleMenuAdj(_PREV);              break;
4662   2          case _OE_ENTER_SUBMENU:     MDoubleEnterSubMenu();              break;
4663   2          case _OE_RETURN_UPMENU:     MDoubleReturnUpMenu();              break;
4664   2              
4665   2          }
4666   1      }
4667          //---------------------------------------------------------------------------
4668          void MDoubleValueAdj(BYTE ucMode)
4669          {
4670   1          // ucMode : _INC or _DEC
4671   1          ucMode = ucMode;        // test code
4672   1      }
4673          //---------------------------------------------------------------------------
4674          void MDoubleMenuAdj(BYTE ucMode)
4675          {
4676   1          // ucMode : _NEXT or _Prev
4677   1          
4678   1          BYTE ucNewItem = AdjustMenuItem(_MI_DOUBLE_ON,_MI_DOUBLE_OFF,ucMode);
4679   1          if(ucNewItem == ucOsdState)
4680   1              return;
4681   1          
4682   1          // 1. Clear Current Menu
4683   1          DrawDoubleMenuItem(ucOsdState,_ST_NORMAL);
4684   1          
4685   1          // 2. Change ucOsdState
4686   1          ucOsdState = ucNewItem;
4687   1          
4688   1          // 3. Draw New Item
4689   1          DrawDoubleMenuItem(ucOsdState,_ST_SELECT);
4690   1          
4691   1      }
4692          //---------------------------------------------------------------------------
4693          void MDoubleEnterSubMenu(void)
4694          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 77  

4695   1          BYTE ucOldSize = GET_OSD_SIZE();
4696   1          
4697   1          switch(ucOsdState)
4698   1          {
4699   2          case _MI_DOUBLE_ON:      SET_OSD_SIZE(1);           break;
4700   2          case _MI_DOUBLE_OFF:     SET_OSD_SIZE(0);           break;
4701   2          }
4702   1          
4703   1          MDoubleReturnUpMenu();   
4704   1          
4705   1          if (ucOldSize == GET_OSD_SIZE())
4706   1              return;
4707   1          
4708   1          COsdFxDisableOsd();
4709   1          if (GET_OSD_SIZE())
4710   1          {
4711   2              SetOSDDouble(0x03 | OSD_WINDOWCHAR_BLENDING);
4712   2          }
4713   1          else
4714   1          {
4715   2              SetOSDDouble(OSD_WINDOWCHAR_BLENDING);
4716   2          }
4717   1          CSetOSDPosition(_MAINMENU_WIDTH, _MAINMENU_HEIGHT, stOsdUserData.OsdHPos, stOsdUserData.OsdVPos);
4718   1      
4719   1          COsdFxEnableOsd();
4720   1          ucOsdEventMsg = _SAVE_EE_SYSTEMDATA_MSG;
4721   1      }
4722          //---------------------------------------------------------------------------
4723          void MDoubleReturnUpMenu(void)
4724          {
4725   1          // 1. Before Return UpMenu
4726   1          ClearDoubleMenu();
4727   1          
4728   1          // 2. Change ucOsdState
4729   1          ucOsdState = _MI_DOUBLE;
4730   1          
4731   1          // 3. Now Return to upmenu
4732   1          DrawOSDPage();
4733   1      }
4734          //---------------------------------------------------------------------------
4735          void COSDHPositionAdj(BYTE ucMode)
4736          {
4737   1          BYTE y;
4738   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  BYTE ucColor;
              #endif
4741   1          
4742   1          // get display line
4743   1          y = GetShowIndex(_MI_OSD_HPOSITION,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));   
4744   1          y = SHOWINDEX_TO_LINE(y);
4745   1          // get display color
4746   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  ucColor = StateColor(_ST_SELECT);
              #endif
4749   1          
4750   1          SET_KEYREPEATENABLE();
4751   1          stOsdUserData.OsdHPos = ValueInRangeChange(0, 100, stOsdUserData.OsdHPos, _NON_LOOP | ucMode);
4752   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,stOsdUserData.OsdHPos,ucColor);
              #endif
4755   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4756   1          OSD_SLIDER(y,stOsdUserData.OsdHPos,_MENU_ADJUST_COLOR);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 78  

4757   1      #endif
4758   1          CSetOSDPosition(_MAINMENU_WIDTH, _MAINMENU_HEIGHT, stOsdUserData.OsdHPos, stOsdUserData.OsdVPos);
4759   1          
4760   1          ucOsdEventMsg = _SAVE_EE_OSDUSERDATA_MSG;            
4761   1      }
4762          //---------------------------------------------------------------------------
4763          void COSDVPositionAdj(BYTE ucMode)
4764          {
4765   1          BYTE y;
4766   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  BYTE ucColor;
              #endif
4769   1          
4770   1          // get display line
4771   1          y = GetShowIndex(_MI_OSD_VPOSITION,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));   
4772   1          y = SHOWINDEX_TO_LINE(y);
4773   1          // get display color
4774   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  ucColor = StateColor(_ST_SELECT);
              #endif
4777   1          
4778   1          SET_KEYREPEATENABLE();
4779   1          stOsdUserData.OsdVPos = ValueInRangeChange(0, 100, stOsdUserData.OsdVPos, _NON_LOOP | ucMode);
4780   1      #if(_KEY_TYPE == _KT_PCB2660_003)
                  OSD_SLIDER(y,stOsdUserData.OsdVPos,ucColor);
              #endif
4783   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4784   1          OSD_SLIDER(y,stOsdUserData.OsdVPos,_MENU_ADJUST_COLOR);
4785   1      #endif
4786   1          
4787   1          CSetOSDPosition(_MAINMENU_WIDTH, _MAINMENU_HEIGHT, stOsdUserData.OsdHPos, stOsdUserData.OsdVPos);
4788   1          
4789   1          ucOsdEventMsg = _SAVE_EE_OSDUSERDATA_MSG;            
4790   1      }
4791          
4792          //---------------------------------------------------------------------------
4793          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4794          void MTransparentProc(void)
4795          {
4796   1          switch(ucOsdEventMsg)
4797   1          {
4798   2          case _OE_ADJ_INC:
4799   2              CTransparentAdj(_INC);
4800   2              break;
4801   2              
4802   2          case _OE_ADJ_DEC:
4803   2              CTransparentAdj(_DEC); 
4804   2              break;
4805   2              
4806   2          case _OE_MENU_NEXT:
4807   2              MTransparentReturnUpMenu();
4808   2              MOSDMenuAdj(_NEXT);               
4809   2              break;
4810   2              
4811   2          case _OE_MENU_PREV:
4812   2              MTransparentReturnUpMenu();
4813   2              MOSDMenuAdj(_PREV);               
4814   2              break;
4815   2              
4816   2          case _OE_ENTER_SUBMENU:     
4817   2              //                              MColorEnterSubMenu();               
4818   2              break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 79  

4819   2              
4820   2          case _OE_RETURN_UPMENU: 
4821   2              MTransparentReturnUpMenu();               
4822   2              break;
4823   2          }
4824   1      }
4825          
4826          //---------------------------------------------------------------------------
4827          void MTransparentReturnUpMenu(void)
4828          {
4829   1          // 1. Before Return UpMenu
4830   1          DrawTransparent(_ST_SELECT);
4831   1          
4832   1          // 2. Change ucOsdState
4833   1          ucOsdState = _MI_TRANSPARENT;
4834   1          
4835   1          // 3. Now Return to upmenu
4836   1          // Insert code to here ...
4837   1      }
4838          #endif
4839          //---------------------------------------------------------------------------
4840          void CTransparentAdj(BYTE ucMode)
4841          {
4842   1          BYTE y;
4843   1          
4844   1          // get display line
4845   1          y = GetShowIndex(_MI_TRANSPARENT,BEGIN(_MI_LANGUAGE),END(_MI_TRANSPARENT));
4846   1          y = SHOWINDEX_TO_LINE(y);
4847   1          
4848   1          stOsdUserData.OsdBlending = ValueInRangeChange(0, 7, stOsdUserData.OsdBlending, _LOOP | ucMode);
4849   1          OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x8C, BYTE_ATTRIB);
4850   1          OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x00, BYTE_DISPLAY);
4851   1          OSDLine(ROW(y), _MSG_COL, LENGTH(10), StateColor(_ST_ADJUST), BYTE_COLOR);
4852   1          if (0 == GET_OSDBLENDING())
4853   1              SUBMENU_RIGHT_TEXTOUT(sOff[GET_LANGUAGE()], y);
4854   1          else
4855   1              CShowNumber(_MSG_COL, y, GET_OSDBLENDING());
4856   1          CScalerSetBit(_OVERLAY_CTRL_6C, 0x23, ((stOsdUserData.OsdBlending & 0x07) << 2));
4857   1          
4858   1          ucOsdEventMsg = _SAVE_EE_OSDUSERDATA_MSG;                        
4859   1      }
4860          //---------------------------------------------------------------------------
4861          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
4862          void MTuningProc(void)
4863          {
4864   1          switch(ucOsdEventMsg)
4865   1          {
4866   2          case _OE_ADJ_INC: 
4867   2              CTuningAdj(_INC);      
4868   2              break;
4869   2              
4870   2          case _OE_ADJ_DEC:           
4871   2              CTuningAdj(_DEC);          
4872   2              break;
4873   2              
4874   2          case _OE_MENU_NEXT:       
4875   2              MTuningReturnUpMenu();
4876   2              MTVMenuAdj(_NEXT);
4877   2              break;
4878   2              
4879   2          case _OE_MENU_PREV:
4880   2              MTuningReturnUpMenu();
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 80  

4881   2              MTVMenuAdj(_PREV);
4882   2              break;
4883   2              
4884   2          case _OE_ENTER_SUBMENU:
4885   2              break;
4886   2              
4887   2          case _OE_RETURN_UPMENU:  
4888   2              MTuningReturnUpMenu();        
4889   2              break;
4890   2          }
4891   1      }
4892          
4893          //---------------------------------------------------------------------------
4894          void MTuningReturnUpMenu(void)
4895          {
4896   1          // 1. Before Return UpMenu
4897   1          DrawTuning(_ST_SELECT);
4898   1          
4899   1          // 2. Change ucOsdState
4900   1          ucOsdState = _MI_TUNING;
4901   1          
4902   1          // 3. Now Return to upmenu
4903   1          // Insert code to here ...
4904   1      }
4905          #endif
4906          //---------------------------------------------------------------------------
4907          void CTuningAdj(BYTE ucMode)
4908          {
4909   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE y;
                  
                  // get display line
                  y = GetShowIndex(_MI_TUNING,BEGIN(ucStartItem),END(ucEndItem));
                  y = SHOWINDEX_TO_LINE(y);
                  
                  SET_KEYREPEATENABLE();                                              
                  CTuningCurrentChannel((bit)ucMode, stTvInfo.CurChn);
                  CShowFreq(CLoadChannelFreq(stTvInfo.CurChn), _MSG_COL, y);
              #else
4920   1          ucMode = ucMode;
4921   1      #endif
4922   1      }
4923          
4924          //---------------------------------------------------------------------------
4925          void CAdjChannel(BYTE ucMode)
4926          {
4927   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE y;
                  
                  // get display line
                  y = GetShowIndex(_MI_CHANNEL,BEGIN(ucStartItem),END(ucEndItem));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  CMuteOn();
                  
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x8C, BYTE_ATTRIB);
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x00, BYTE_DISPLAY);
                  
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 81  

              #if(_FM_DEVICE)
                  if (1 == bFM)
                  {
                      stTvInfo.ucFMCurrCh = ValueInRangeChange(0, CloadMaxChannelNumber(), stTvInfo.ucFMCurrCh, _LOOP | 
             -ucMode);
                      CSetTVChannel(stTvInfo.ucFMCurrCh);
                      CShowNumber(_MSG_COL, y, stTvInfo.CurChn);
                      ucPrevChannel =  stTvInfo.ucFMCurrCh;
                      CSetVolume();
                  }
                  else
              #endif
                  {
                      CModeResetTVMode();
                      stTvInfo.CurChn = ValueInRangeChange(0, CloadMaxChannelNumber(), stTvInfo.CurChn, _LOOP | ucMode);
                      CSetTVChannel(stTvInfo.CurChn);
                      CShowNumber(_MSG_COL, y, stTvInfo.CurChn);
                      ucPrevChannel =  stTvInfo.CurChn;
                  }
                  
                      DrawSystem(_ST_NORMAL);
                  DrawTuning(_ST_NORMAL);
                  DrawSkip(_ST_NORMAL);
                  
                  bChangeChannel = 0;
                  ucOsdEventMsg  = _SAVE_EE_TV_DATA_MSG;
                  CLR_CLEAR_OSD_EN();
              
              #else
4971   1      
4972   1          ucMode = ucMode;
4973   1      
4974   1      #endif    
4975   1      }
4976          
4977          //---------------------------------------------------------------------------
4978          void CAdjustSwap(BYTE ucMode)
4979          {
4980   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE y;
                  
                  // get display line
                  y = GetShowIndex(_MI_SWAP,BEGIN(ucStartItem),END(ucEndItem));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  CMuteOn();
                  
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x8C, BYTE_ATTRIB);
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x00, BYTE_DISPLAY);
                  
                  CModeResetTVMode();
                  stTvInfo.CurChn = ValueInRangeChange(0, CloadMaxChannelNumber(), stTvInfo.CurChn, _LOOP | ucMode);
                  CSetTVChannel(stTvInfo.CurChn);
                  CShowNumber(_MSG_COL, y, stTvInfo.CurChn);
                  //ucPrevChannel =  stTvInfo.CurChn;
                  
                      DrawSystem(_ST_NORMAL);
                  DrawTuning(_ST_NORMAL);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 82  

                  DrawSkip(_ST_NORMAL);
                  
                  bChangeChannel = 0;
                  ucOsdEventMsg  = _SAVE_EE_TV_DATA_MSG;
                  CLR_CLEAR_OSD_EN();
              
              #else
5011   1      
5012   1          ucMode = ucMode;
5013   1      
5014   1      #endif    
5015   1      }
5016          
5017          //---------------------------------------------------------------------------
5018          // MainMenu\TV\Channel,System,AutoSearch,ManualSearch,Tuning,Skip,
5019          // MainMenu\TV\_MI_CHANNEL,_MI_SYSTEM,_MI_AUTOSEARCH,_MI_MANUALSEARCH,_MI_TUNING,_MI_SKIP,
5020          void MTVProc(void)
5021          {
5022   1          switch(ucOsdEventMsg)
5023   1          {
5024   2          case _OE_ADJ_INC:           MTVValueAdj(_INC);                  break;
5025   2          case _OE_ADJ_DEC:           MTVValueAdj(_DEC);                  break;
5026   2          case _OE_MENU_NEXT:         MTVMenuAdj(_NEXT);                  break;
5027   2          case _OE_MENU_PREV:         MTVMenuAdj(_PREV);                  break;
5028   2          case _OE_ENTER_SUBMENU:     MTVEnterSubMenu();                  break;
5029   2          case _OE_RETURN_UPMENU:     MTVReturnUpMenu();                  break;
5030   2              
5031   2          }
5032   1      }
5033          //---------------------------------------------------------------------------
5034          #if(_VIDEO_TV_SUPPORT)
              #if(_NTSC_SEARCH_TABLE)
              void CSystemAdj(BYTE ucMode)
              {
                  BYTE y;
                  
                      ucMode = ucMode;
              
                  // get display line
                  y = GetShowIndex(_MI_SYSTEM,BEGIN(_MI_CHANNEL),END(_MI_SKIP));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  y = SHOWINDEX_TO_LINE(y);
                  
                  if(_GET_TV_TYPE())
                         _SET_TV_TYPE(0);
                      else
                         _SET_TV_TYPE(1);
              
                      ucMode = CloadMaxChannelNumber();
                  if (stTvInfo.CurChn > ucMode || ucPrevChannel > ucMode)
                  {
                          stTvInfo.CurChn = ucMode;
                          ucPrevChannel =  stTvInfo.ucFMCurrCh;
                              DrawTuning(_ST_NORMAL);
                              DrawSkip(_ST_NORMAL);
                  }
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(4), 0x8C, BYTE_ATTRIB);
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(4), 0x00, BYTE_DISPLAY);
                  SUBMENU_RIGHT_TEXTOUT(sTVTypeN[_GET_TV_TYPE()], y);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 83  

                  CEepromSaveTvData();
              }
              #endif
              #endif  // #if(_VIDEO_TV_SUPPORT)
5070          
5071          //---------------------------------------------------------------------------
5072          void MTVValueAdj(BYTE ucMode)
5073          {
5074   1          // ucMode : _INC or _DEC
5075   1          switch(ucOsdState)
5076   1          {
5077   2          case _MI_CHANNEL:           CAdjChannel(ucMode);                break;
5078   2      #if(_VIDEO_TV_SUPPORT)
              #if(_NTSC_SEARCH_TABLE)
                  case _MI_SYSTEM:            CSystemAdj(ucMode);                 break;
              #else
                  case _MI_SYSTEM:            EnterSystemMenu();                  break;
              #endif
              #endif
5085   2          case _MI_AUTOSEARCH:        EnterAutoSearchMenu();              break;
5086   2          case _MI_MANUALSEARCH:      EnterMSearchMenu();                 break;
5087   2          case _MI_TUNING:            CTuningAdj(ucMode);                 break;
5088   2          case _MI_SKIP:              EnterSkipMenu();                    break;
5089   2          case _MI_SWAP:              CAdjustSwap(ucMode);                break;
5090   2          case _MI_AFC:               EnterAFCMenu();                     break;
5091   2          }
5092   1      }
5093          //---------------------------------------------------------------------------
5094          void CSwapSetup(void)
5095          {
5096   1      #if(_VIDEO_TV_SUPPORT)
                  WORD ucSwapFreq        = CLoadChannelFreq(stTvInfo.CurChn);
                  BYTE ucSwapColorSystem = CLoadChannelColorType(stTvInfo.CurChn);
                  BYTE ucSwapSoundSystem = CLoadChannelSoundType(stTvInfo.CurChn);
              
                  if (ucOsdState != _MI_SWAP)
                      return;
              
                  if (ucPrevChannel != stTvInfo.CurChn)
                  {
                      CAdjustBackgroundColor(0x00, 0x00, 0x00);     
                      CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, _BIT5);
                      
                      CSaveChannelFreq(CLoadChannelFreq(ucPrevChannel), stTvInfo.CurChn);
                      CSaveChannelColorType(CLoadChannelColorType(ucPrevChannel), stTvInfo.CurChn);
                      CSaveChannelSoundType(CLoadChannelSoundType(ucPrevChannel), stTvInfo.CurChn);
                      
                      CSaveChannelFreq(ucSwapFreq, ucPrevChannel);
                      CSaveChannelColorType(ucSwapColorSystem, ucPrevChannel);
                      CSaveChannelSoundType(ucSwapSoundSystem, ucPrevChannel);  
                      
                      CSetTVChannel(stTvInfo.CurChn);
                  #if(_FM_DEVICE)
                      if (1 == bFM)
                      {
                          CSetVolume();
                      }
                      else
                  #endif
                      {
                          CModeResetTVMode();
                      }        
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 84  

                      
                      CTimerDelayXms(100);
                      CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, 0x00);
                      bChangeChannel = 0;
                      ucOsdEventMsg  = _SAVE_EE_TV_DATA_MSG;
                      CLR_CLEAR_OSD_EN();
              
                  }
              #endif
5137   1      }
5138          //---------------------------------------------------------------------------
5139          void MTVMenuAdj(BYTE ucMode)
5140          {
5141   1          // ucMode : _NEXT or _Prev
5142   1          BYTE ucNewItem;
5143   1      
5144   1          ucNewItem = AdjustMenuItem(_MI_CHANNEL,_MI_AFC,ucMode);
5145   1          if(ucNewItem == ucOsdState)
5146   1              return;
5147   1      
5148   1          // 1. Clear Current Menu
5149   1          DrawTVPageMenuItem(ucOsdState,_ST_NORMAL);
5150   1      
5151   1          // 2. Change ucOsdState
5152   1          ucOsdState = ucNewItem;
5153   1      
5154   1      #if(_VIDEO_TV_SUPPORT)
                  if (ucOsdState == _MI_SWAP)
                     ucPrevChannel = stTvInfo.CurChn;
              #endif
5158   1              
5159   1          CSetItemStartEnd(DrawTVPage);
5160   1          
5161   1          // 3. Draw New Item
5162   1          DrawTVPageMenuItem(ucOsdState,_ST_SELECT);
5163   1          
5164   1      }
5165          //---------------------------------------------------------------------------
5166          void MTVEnterSubMenu(void)
5167          {
5168   1      
5169   1          // 1. Before Enter SubMenu
5170   1          // Insert code to here ...
5171   1      
5172   1      
5173   1          // 2. Change ucOsdState
5174   1          switch(ucOsdState)
5175   1          {
5176   2              case _MI_CHANNEL:
5177   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5178   2                              DrawChannel(_ST_ADJUST);    
5179   2                              ucOsdState = _MI_OSD_CHANNELADJ;        
5180   2      #endif
5181   2                      break;
5182   2                      
5183   2              case _MI_SYSTEM:
5184   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5185   2                              DrawSystem(_ST_ADJUST);
5186   2                              EnterSystemMenu();              
5187   2      #endif        
5188   2                              ucOsdState = _MI_S_PAL_I;
5189   2                      break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 85  

5190   2                      
5191   2              case _MI_AUTOSEARCH:
5192   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5193   2                      DrawAutoSearch(_ST_ADJUST);
5194   2                      EnterAutoSearchMenu();
5195   2      #endif
5196   2                              ucOsdState = _MI_AUTOSEARCH_OK;                      
5197   2                      break;
5198   2                      
5199   2              case _MI_MANUALSEARCH:
5200   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5201   2                      DrawManualSearch(_ST_ADJUST);
5202   2                      EnterMSearchMenu();              
5203   2      #endif                    
5204   2                              ucOsdState = _MI_MANUALSEARCH_UP;
5205   2                      break;
5206   2              case _MI_TUNING: 
5207   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5208   2                      DrawTuning(_ST_ADJUST);         
5209   2                      ucOsdState = _MI_TUNINGADJ; 
5210   2      #endif        
5211   2                      break;
5212   2                      
5213   2              case _MI_SKIP:      
5214   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5215   2                      DrawSkip(_ST_ADJUST);
5216   2                      EnterSkipMenu();
5217   2      #endif        
5218   2                              ucOsdState = _MI_SKIP_ON;           
5219   2                      break;
5220   2      
5221   2              case _MI_SWAP:              break;
5222   2              case _MI_AFC:               break;
5223   2      
5224   2          }
5225   1      
5226   1          // 3. Now enter sub menu
5227   1          // Insert code to here ...
5228   1      
5229   1      
5230   1      }
5231          //---------------------------------------------------------------------------
5232          void MTVReturnUpMenu(void)
5233          {
5234   1          CSwapSetup();
5235   1      
5236   1          // 1. Before Return UpMenu
5237   1          DrawTVPageMenuItem(ucOsdState,_ST_NORMAL);
5238   1          
5239   1          // 2. Change ucOsdState
5240   1          ucOsdState = _MI_TV;
5241   1          
5242   1          // 3. Now Return to upmenu
5243   1          // Insert code to here ...
5244   1      }
5245          
5246          //---------------------------------------------------------------------------
5247          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
5248          void MChannelProc(void)
5249          {
5250   1          switch(ucOsdEventMsg)
5251   1          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 86  

5252   2          case _OE_ADJ_INC:           
5253   2              CAdjChannel(_INC);               
5254   2              break;
5255   2              
5256   2          case _OE_ADJ_DEC:           
5257   2              CAdjChannel(_DEC);               
5258   2              break;
5259   2              
5260   2          case _OE_MENU_NEXT:    
5261   2              MChannelReturnUpMenu();
5262   2              MTVMenuAdj(_NEXT);
5263   2              break;
5264   2                                      
5265   2          case _OE_MENU_PREV:         
5266   2              MChannelReturnUpMenu();
5267   2              MTVMenuAdj(_PREV);
5268   2              break;
5269   2              
5270   2          case _OE_ENTER_SUBMENU:     
5271   2              break;
5272   2              
5273   2          case _OE_RETURN_UPMENU:     
5274   2              MChannelReturnUpMenu();               
5275   2              break;
5276   2              
5277   2          }
5278   1      }
5279          
5280          //---------------------------------------------------------------------------
5281          void MChannelReturnUpMenu(void)
5282          {
5283   1          // 1. Before Return UpMenu
5284   1          DrawChannel(_ST_SELECT);
5285   1          
5286   1          // 2. Change ucOsdState
5287   1          ucOsdState = _MI_CHANNEL;
5288   1          
5289   1          // 3. Now Return to upmenu
5290   1          // Insert code to here ...
5291   1      }
5292          #endif
5293          
5294          
5295          //---------------------------------------------------------------------------
5296          #define _PM_SYSTEM_ROW_START             4
5297          //#define _PM_LANGUAGE_ROW_HEIGHT          5
5298          #define _PM_SYSTEM_COL_START             1
5299          #if(_VIDEO_TV_SUPPORT)
              
              void DrawSystemMenuItem(BYTE ucItem,BYTE ucState)
              {
                  BYTE y;
                  BYTE *pStr;
                  
                  if(!g_tMenuItem[ucItem].Enable())
                  {
                      ucState = _ST_DISABLE;  
                  }
                  
                  // get display line
                  y = GetShowIndex(ucItem,BEGIN(_MI_S_NTSC_M),END(_MI_S_SECAM_LL));
                  
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 87  

                  if(y == _NOT_SHOW)
                      return;
                  
                  switch(ucItem)
                  {
                  case _MI_S_NTSC_M:          pStr = sNTSC_M;         break;
                  case _MI_S_NTSC_4_BG:       pStr = sNTSC_4_BG;      break;
                  case _MI_S_NTSC_4_DK:       pStr = sNTSC_4_DK;      break;
                  case _MI_S_NTSC_4_I:        pStr = sNTSC_4_I;       break;
                  case _MI_S_TV_PAL_M:        pStr = sPAL_M;          break;
                  case _MI_S_PAL_BG:          pStr = sPAL_BG;         break;
                  case _MI_S_PAL_I:           pStr = sPAL_I;          break;
                  case _MI_S_PAL_DK:          pStr = sPAL_DK;         break;
                  case _MI_S_PAL_N:           pStr = sPAL_N;          break;
                  case _MI_S_SECAM_BG:        pStr = sSECAM_BG;       break;
                  case _MI_S_SECAM_DK:        pStr = sSECAM_DK;       break;
                  case _MI_S_SECAM_L:         pStr = sSECAM_L;        break;
                  case _MI_S_SECAM_LL:        pStr = sSECAM_LL;       break;
                  }
                  
                  DrawAPopupMenuItem(pStr,y,_PM_SYSTEM_ROW_START,_PM_SYSTEM_COL_START,ucState);
                  
              }
              #endif
5338          
5339          //---------------------------------------------------------------------------
5340          void EnterSystemMenu(void)
5341          {
5342   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE i;
                  BYTE ucMode;
                  BYTE ucCount;
                  
                  ucCount = GetShowCount(BEGIN(_MI_S_NTSC_M),END(_MI_S_SECAM_LL));
                  
                  CreatePopupMenu(_PM_SYSTEM_ROW_START, ucCount + 2);
                  
                  ucOsdState = ucTVType + _MI_S_NTSC_M - 1;
                  
                  for(i=_MI_S_NTSC_M;i<=_MI_S_SECAM_LL;i++)
                  {
                      if(i == ucOsdState)
                          ucMode = _ST_SELECT;
                      else
                          ucMode = _ST_NORMAL;
                      
                      DrawSystemMenuItem(i,ucMode);
                  }
              #endif    
5363   1      }
5364          //---------------------------------------------------------------------------
5365          void ClearSystemMenu(void)
5366          {
5367   1          BYTE ucCount;
5368   1          
5369   1          ucCount = GetShowCount(BEGIN(_MI_S_NTSC_M),END(_MI_S_SECAM_LL));
5370   1          
5371   1          ClearPopupMenu(_PM_SYSTEM_ROW_START, ucCount + 2);
5372   1      }
5373          //---------------------------------------------------------------------------
5374          
5375          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 88  

5376          
5377          
5378          //---------------------------------------------------------------------------
5379          // MainMenu\TV\System\S_NTSC_M,S_NTSC_4_BG,S_NTSC_4_DK,S_NTSC_4_I,S_TV_PAL_M,S_PAL_BG,S_PAL_I,S_PAL_DK,S_P
             -AL_N,S_SECAM_BG,S_SECAM_DK,S_SECAM_L,S_SECAM_LL,
5380          // MainMenu\TV\System\_MI_S_NTSC_M,_MI_S_NTSC_4_BG,_MI_S_NTSC_4_DK,_MI_S_NTSC_4_I,_MI_S_TV_PAL_M,_MI_S_PAL
             -_BG,_MI_S_PAL_I,_MI_S_PAL_DK,_MI_S_PAL_N,_MI_S_SECAM_BG,_MI_S_SECAM_DK,_MI_S_SECAM_L,_MI_S_SECAM_LL,
5381          void MSystemProc(void)
5382          {
5383   1          switch(ucOsdEventMsg)
5384   1          {
5385   2          case _OE_ADJ_INC:           MSystemValueAdj(_INC);              break;
5386   2          case _OE_ADJ_DEC:           MSystemValueAdj(_DEC);              break;
5387   2          case _OE_MENU_NEXT:         MSystemMenuAdj(_NEXT);              break;
5388   2          case _OE_MENU_PREV:         MSystemMenuAdj(_PREV);              break;
5389   2          case _OE_ENTER_SUBMENU:     MSystemEnterSubMenu();              break;
5390   2          case _OE_RETURN_UPMENU:     MSystemReturnUpMenu();              break;
5391   2              
5392   2          }
5393   1      }
5394          //---------------------------------------------------------------------------
5395          void MSystemValueAdj(BYTE ucMode)
5396          {
5397   1          // ucMode : _INC or _DEC
5398   1          ucMode = ucMode;        // test code
5399   1      }
5400          //---------------------------------------------------------------------------
5401          void MSystemMenuAdj(BYTE ucMode)
5402          {
5403   1      #if(_VIDEO_TV_SUPPORT)
                  
                  BYTE ucNewItem = AdjustMenuItem(_MI_S_NTSC_M,_MI_S_SECAM_LL,ucMode);
                  if(ucNewItem == ucOsdState)
                      return;
                  
                  // 1. Clear Current Menu
                  DrawSystemMenuItem(ucOsdState,  _ST_NORMAL);
                  
                  // 2. Change ucOsdState
                  ucOsdState = ucNewItem;
                  
                  ucTVType = ucOsdState - _MI_S_NTSC_M + 1;
                  
                  CSaveChannelColorType(stTvInfo.CurChn, ucTVType);
                  gmi_CI2CWriteIfPllDM(ucTVType, _TUNER_MUTE_OFF, _NORMAL_MODE);
                  CSetTvColor(ucTVType);
                  ucTVSyncFailCount = 251;
                  CLR_CLEAR_OSD_EN();
                  
                  OSDClear(ROW(17), HEIGHT(1), COL(14), WIDTH(20), 0x8C, BYTE_ATTRIB);
                  OSDClear(ROW(17), HEIGHT(1), COL(14), WIDTH(20), 0x00, BYTE_DISPLAY);
                  CShowMode(13,17);
                  
                  // 3. Draw New Item
                  DrawSystemMenuItem(ucOsdState,  _ST_SELECT);
              #else
5430   1          ucMode = ucMode;
5431   1      #endif
5432   1      }
5433          //---------------------------------------------------------------------------
5434          void MSystemEnterSubMenu(void)
5435          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 89  

5436   1      #if(_VIDEO_TV_SUPPORT)
                  CSaveChannelColorType(stTvInfo.CurChn,ucOsdState - _MI_S_NTSC_M+1);
              #endif
5439   1          MSystemReturnUpMenu();
5440   1      }
5441          //---------------------------------------------------------------------------
5442          void MSystemReturnUpMenu(void)
5443          {
5444   1          // 1. Before Return UpMenu
5445   1          ClearSystemMenu();
5446   1          
5447   1          // 2. Change ucOsdState
5448   1          ucOsdState = _MI_SYSTEM;
5449   1          
5450   1          // 3. Now Return to upmenu
5451   1          DrawTVPage();
5452   1      }
5453          //---------------------------------------------------------------------------
5454          
5455          
5456          
5457          #define _PM_AUTOSEARCH_ROW_START                    8
5458          #define _PM_AUTOSEARCH_ROW_HEIGHT                   4
5459          #define _PM_AUTOSEARCH_COL_START                    3
5460          
5461          void DrawAutoSearchMenuItem(BYTE ucItem,BYTE ucState)
5462          {
5463   1          BYTE y;
5464   1          BYTE *pStr;
5465   1          
5466   1          if(!g_tMenuItem[ucItem].Enable())
5467   1          {
5468   2              ucState = _ST_DISABLE;  
5469   2          }
5470   1          
5471   1          // get display line
5472   1          y = GetShowIndex(ucItem,BEGIN(_MI_AUTOSEARCH_OK),END(_MI_AUTOSEARCH_CANCEL));
5473   1          
5474   1          if(y == _NOT_SHOW)
5475   1              return;
5476   1          
5477   1          
5478   1          switch(ucItem)
5479   1          {
5480   2          case _MI_AUTOSEARCH_OK:         pStr = sOK[GET_LANGUAGE()];     break;
5481   2          case _MI_AUTOSEARCH_CANCEL:     pStr = sCancel[GET_LANGUAGE()]; break;
5482   2          }
5483   1          
5484   1          DrawAPopupMenuItem(pStr,y,CGetPopupMenuRow(_PM_AUTOSEARCH_ROW_START,_MI_CHANNEL),_PM_AUTOSEARCH_COL_ST
             -ART,ucState);
5485   1          
5486   1      }
5487          
5488          //---------------------------------------------------------------------------
5489          void EnterAutoSearchMenu(void)
5490          {
5491   1          CreatePopupMenu(CGetPopupMenuRow(_PM_AUTOSEARCH_ROW_START,_MI_CHANNEL), _PM_AUTOSEARCH_ROW_HEIGHT);
5492   1          
5493   1          ucOsdState = _MI_AUTOSEARCH_CANCEL;
5494   1          
5495   1          DrawAutoSearchMenuItem(_MI_AUTOSEARCH_OK,_ST_NORMAL);
5496   1          DrawAutoSearchMenuItem(_MI_AUTOSEARCH_CANCEL,_ST_SELECT);   
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 90  

5497   1      }
5498          //---------------------------------------------------------------------------
5499          void ClearAutoSearchMenu(void)
5500          {
5501   1          ClearPopupMenu(CGetPopupMenuRow(_PM_AUTOSEARCH_ROW_START,_MI_CHANNEL), _PM_AUTOSEARCH_ROW_HEIGHT);
5502   1      }
5503          //---------------------------------------------------------------------------
5504          
5505          
5506          //---------------------------------------------------------------------------
5507          // MainMenu\TV\AutoSearch\AutoSearch_OK,AutoSearch_Cancel,
5508          // MainMenu\TV\AutoSearch\_MI_MANUALSEARCH_UP,_MI_MANUALSEARCH_DOWN,
5509          void MAutoSearchProc(void)
5510          {
5511   1          switch(ucOsdEventMsg)
5512   1          {
5513   2          case _OE_ADJ_INC:           MAutoSearchValueAdj(_INC);          break;
5514   2          case _OE_ADJ_DEC:           MAutoSearchValueAdj(_DEC);          break;
5515   2          case _OE_MENU_NEXT:         MAutoSearchMenuAdj(_NEXT);          break;
5516   2          case _OE_MENU_PREV:         MAutoSearchMenuAdj(_PREV);          break;
5517   2          case _OE_ENTER_SUBMENU:     MAutoSearchEnterSubMenu();          break;
5518   2          case _OE_RETURN_UPMENU:     MAutoSearchReturnUpMenu();          break;
5519   2              
5520   2          }
5521   1      }
5522          //---------------------------------------------------------------------------
5523          void MAutoSearchValueAdj(BYTE ucMode)
5524          {
5525   1          // ucMode : _INC or _DEC
5526   1          ucMode = ucMode;  
5527   1      }
5528          //---------------------------------------------------------------------------
5529          void MAutoSearchMenuAdj(BYTE ucMode)
5530          {
5531   1          // ucMode : _NEXT or _Prev
5532   1          
5533   1          BYTE ucNewItem = AdjustMenuItem(_MI_AUTOSEARCH_OK,_MI_AUTOSEARCH_CANCEL,ucMode);
5534   1          if(ucNewItem == ucOsdState)
5535   1              return;
5536   1          
5537   1          // 1. Clear Current Menu
5538   1          DrawAutoSearchMenuItem(ucOsdState,_ST_NORMAL);
5539   1          
5540   1          // 2. Change ucOsdState
5541   1          ucOsdState = ucNewItem;
5542   1          
5543   1          // 3. Draw New Item
5544   1          DrawAutoSearchMenuItem(ucOsdState,_ST_SELECT);
5545   1          
5546   1      }
5547          //---------------------------------------------------------------------------
5548          void MAutoSearchEnterSubMenu(void)
5549          {
5550   1      #if(_VIDEO_TV_SUPPORT)
                  bit fAutoSearch = 0;
                  BYTE y;
                  
                  if(ucOsdState == _MI_AUTOSEARCH_OK)
                      fAutoSearch = 1;
                  
                  MAutoSearchReturnUpMenu();
                  
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 91  

                  // get display line
                  y = GetShowIndex(_MI_AUTOSEARCH, BEGIN(ucStartItem), END(ucEndItem));
                  y = SHOWINDEX_TO_LINE(y);
                  
                  if(fAutoSearch)
                  {
                      ucStartItem = _MI_CHANNEL;
                      ucEndItem   = _MI_SKIP;
                      for(y=0;y<6;y++)
                      {
                          OSDLine(SHOWINDEX_TO_LINE(y), COL(7), LENGTH(38), 0x00, BYTE_DISPLAY);
                          OSDLine(SHOWINDEX_TO_LINE(y), COL(7), LENGTH(38), 0x8C, BYTE_ATTRIB);
                      }
                      DrawTVPage();
                      y = GetShowIndex(_MI_AUTOSEARCH, BEGIN(ucStartItem), END(ucEndItem));
                      y = SHOWINDEX_TO_LINE(y);
                      OSDLine(SHOWINDEX_TO_LINE(0), COL(_MSG_COL), LENGTH(3), StateColor(_ST_SELECT), BYTE_COLOR);
                      CScalerPageSelect(_PAGE8);              
                      CScalerSetBit(_P8_OUTPUT_CTRL_A7, ~_BIT5, _BIT5);
                      CTvAutoSearch();
                      CScalerPageSelect(_PAGE8);              
                      CScalerSetBit(_P8_OUTPUT_CTRL_A7, ~_BIT5, 0x00);
                      
                      OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(10), 0x8C, BYTE_ATTRIB);
                      OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(10), 0x00, BYTE_DISPLAY);
                      
                      OSDLine(SHOWINDEX_TO_LINE(0), COL(_MSG_COL), LENGTH(3), StateColor(_ST_NORMAL), BYTE_COLOR);
                      CShowNumber(_MSG_COL, SHOWINDEX_TO_LINE(0), stTvInfo.CurChn);
                      
                              DrawChannel(_ST_NORMAL);
                      DrawTuning(_ST_NORMAL);
                      DrawSkip(_ST_NORMAL);
                  }
              #endif
5593   1      }
5594          //---------------------------------------------------------------------------
5595          void MAutoSearchReturnUpMenu(void)
5596          {
5597   1          // 1. Before Return UpMenu
5598   1          ClearAutoSearchMenu();
5599   1          
5600   1          // 2. Change ucOsdState
5601   1          ucOsdState = _MI_AUTOSEARCH;
5602   1          
5603   1          // 3. Now Return to upmenu
5604   1          DrawTVPage();
5605   1      }
5606          //---------------------------------------------------------------------------
5607          
5608          
5609          #define _PM_MSEARCH_ROW_START                   10
5610          #define _PM_MSEARCH_ROW_HEIGHT                  4
5611          #define _PM_MSEARCH_COL_START                   0
5612          
5613          void DrawMSearchMenuItem(BYTE ucItem,BYTE ucState)
5614          {
5615   1          BYTE y;
5616   1          BYTE *pStr;
5617   1          
5618   1          if(!g_tMenuItem[ucItem].Enable())
5619   1          {
5620   2              ucState = _ST_DISABLE;  
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 92  

5621   2          }
5622   1          
5623   1          // get display line
5624   1          y = GetShowIndex(ucItem,BEGIN(_MI_MANUALSEARCH_UP),END(_MI_MANUALSEARCH_DOWN));
5625   1          
5626   1          if(y == _NOT_SHOW)
5627   1              return;
5628   1          
5629   1          
5630   1          switch(ucItem)
5631   1          {
5632   2          case _MI_MANUALSEARCH_UP:       pStr = sSearchUP[GET_LANGUAGE()];       break;
5633   2          case _MI_MANUALSEARCH_DOWN:     pStr = sSearchDown[GET_LANGUAGE()];     break;
5634   2          }
5635   1          
5636   1          DrawAPopupMenuItem(pStr,y,CGetPopupMenuRow(_PM_MSEARCH_ROW_START,_MI_CHANNEL),_PM_MSEARCH_COL_START,uc
             -State);
5637   1          
5638   1      }
5639          
5640          //---------------------------------------------------------------------------
5641          void EnterMSearchMenu(void)
5642          {                   
5643   1          CreatePopupMenu(CGetPopupMenuRow(_PM_MSEARCH_ROW_START,_MI_CHANNEL), _PM_MSEARCH_ROW_HEIGHT);
5644   1          
5645   1          ucOsdState = _MI_MANUALSEARCH_UP;
5646   1          
5647   1          DrawMSearchMenuItem(_MI_MANUALSEARCH_UP,_ST_SELECT);
5648   1          DrawMSearchMenuItem(_MI_MANUALSEARCH_DOWN,_ST_NORMAL);  
5649   1      }
5650          //---------------------------------------------------------------------------
5651          void ClearMSearchMenu(void)
5652          {
5653   1          ClearPopupMenu(CGetPopupMenuRow(_PM_MSEARCH_ROW_START,_MI_CHANNEL), _PM_MSEARCH_ROW_HEIGHT);
5654   1      }
5655          //---------------------------------------------------------------------------
5656          
5657          //---------------------------------------------------------------------------
5658          // MainMenu\TV\ManualSearch\ManualSearch_OK,ManualSearch_Cancel,
5659          // MainMenu\TV\ManualSearch\_MI_MANUALSEARCH_UP,_MI_MANUALSEARCH_DOWN,
5660          void MManualSearchProc(void)
5661          {
5662   1          switch(ucOsdEventMsg)
5663   1          {
5664   2          case _OE_ADJ_INC:           MManualSearchValueAdj(_INC);        break;
5665   2          case _OE_ADJ_DEC:           MManualSearchValueAdj(_DEC);        break;
5666   2          case _OE_MENU_NEXT:         MManualSearchMenuAdj(_NEXT);        break;
5667   2          case _OE_MENU_PREV:         MManualSearchMenuAdj(_PREV);        break;
5668   2          case _OE_ENTER_SUBMENU:     MManualSearchEnterSubMenu();        break;
5669   2          case _OE_RETURN_UPMENU:     MManualSearchReturnUpMenu();        break;
5670   2              
5671   2          }
5672   1      }
5673          //---------------------------------------------------------------------------
5674          void MManualSearchValueAdj(BYTE ucMode)
5675          {
5676   1          // ucMode : _INC or _DEC
5677   1          ucMode = ucMode;        // test code
5678   1      }
5679          //---------------------------------------------------------------------------
5680          void MManualSearchMenuAdj(BYTE ucMode)
5681          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 93  

5682   1          // ucMode : _NEXT or _Prev
5683   1          
5684   1          BYTE ucNewItem = AdjustMenuItem(_MI_MANUALSEARCH_UP,_MI_MANUALSEARCH_DOWN,ucMode);
5685   1          if(ucNewItem == ucOsdState)
5686   1              return;
5687   1          
5688   1          // 1. Clear Current Menu
5689   1          DrawMSearchMenuItem(ucOsdState,_ST_NORMAL);
5690   1          
5691   1          // 2. Change ucOsdState
5692   1          ucOsdState = ucNewItem;
5693   1          
5694   1          // 3. Draw New Item
5695   1          DrawMSearchMenuItem(ucOsdState,_ST_SELECT);
5696   1          
5697   1      }
5698          //---------------------------------------------------------------------------
5699          void MManualSearchEnterSubMenu(void)
5700          {
5701   1      #if(_VIDEO_TV_SUPPORT)
                  bit fSearch = 0;
                  BYTE y;
                  
                  switch(ucOsdState)
                  {
                  case _MI_MANUALSEARCH_UP:       fSearch = 1;        break;
                  case _MI_MANUALSEARCH_DOWN:     fSearch = 0;        break;
                  }
                  
                  MManualSearchReturnUpMenu();
                  
                  // get display line
                  y = GetShowIndex(_MI_MANUALSEARCH, BEGIN(ucStartItem), END(ucEndItem));
                  y = SHOWINDEX_TO_LINE(y);
                  
                      CScalerPageSelect(_PAGE8);              
                  CScalerSetBit(_P8_OUTPUT_CTRL_A7, ~_BIT5, _BIT5);
                  CManualSearch(fSearch, stTvInfo.CurChn);
                      CScalerPageSelect(_PAGE8);              
                  CScalerSetBit(_P8_OUTPUT_CTRL_A7, ~_BIT5, 0x00);
                  
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(10), 0x8C, BYTE_ATTRIB);
                  OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(10), 0x00, BYTE_DISPLAY);
                  
                      DrawChannel(_ST_NORMAL);
                  DrawTuning(_ST_NORMAL);
                  DrawSkip(_ST_NORMAL);
                  CTimerDelayXms(200);
              #endif
5731   1      }
5732          //---------------------------------------------------------------------------
5733          void MManualSearchReturnUpMenu(void)
5734          {
5735   1          // 1. Before Return UpMenu
5736   1          ClearMSearchMenu();
5737   1          
5738   1          // 2. Change ucOsdState
5739   1          ucOsdState = _MI_MANUALSEARCH;
5740   1          
5741   1          // 3. Now Return to upmenu
5742   1          DrawTVPage();
5743   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 94  

5744          //---------------------------------------------------------------------------
5745          
5746          #define _PM_SKIP_ROW_START                      12
5747          #define _PM_SKIP_ROW_HEIGHT                     4
5748          #define _PM_SKIP_COL_START                      3
5749          
5750          void DrawSkipMenuItem(BYTE ucItem,BYTE ucState)
5751          {
5752   1          BYTE y;
5753   1          BYTE *pStr;
5754   1          
5755   1          if(!g_tMenuItem[ucItem].Enable())
5756   1          {
5757   2              ucState = _ST_DISABLE;  
5758   2          }
5759   1          
5760   1          // get display line
5761   1          y = GetShowIndex(ucItem,BEGIN(_MI_SKIP_ON),END(_MI_SKIP_OFF));
5762   1          
5763   1          if(y == _NOT_SHOW)
5764   1              return;
5765   1          
5766   1          
5767   1          switch(ucItem)
5768   1          {
5769   2          case _MI_SKIP_ON:           pStr = sOn[GET_LANGUAGE()];     break;
5770   2          case _MI_SKIP_OFF:          pStr = sOff[GET_LANGUAGE()];    break;
5771   2          }
5772   1          
5773   1          DrawAPopupMenuItem(pStr,y,CGetPopupMenuRow(_PM_SKIP_ROW_START,_MI_CHANNEL),_PM_SKIP_COL_START,ucState)
             -;
5774   1      }
5775          //---------------------------------------------------------------------------
5776          void EnterSkipMenu(void)
5777          {
5778   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE i;
                  BYTE ucMode;
                  
                  CreatePopupMenu(CGetPopupMenuRow(_PM_SKIP_ROW_START,_MI_CHANNEL), _PM_SKIP_ROW_HEIGHT);
                  
                  if(CLoadChannelSkip(stTvInfo.CurChn))
                  {
                      ucOsdState = _MI_SKIP_ON;
                  }
                  else
                  {
                      ucOsdState = _MI_SKIP_OFF;
                  }
                  
                  for(i=_MI_SKIP_ON;i<=_MI_SKIP_OFF;i++)
                  {
                      if(i == ucOsdState)
                          ucMode = _ST_SELECT;
                      else
                          ucMode = _ST_NORMAL;
                      
                      DrawSkipMenuItem(i,ucMode);
                  }
              #endif    
5803   1      }
5804          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 95  

5805          void ClearSkipMenu(void)
5806          {                      
5807   1          ClearPopupMenu(CGetPopupMenuRow(_PM_SKIP_ROW_START,_MI_CHANNEL), _PM_SKIP_ROW_HEIGHT);
5808   1      }
5809          //---------------------------------------------------------------------------
5810          
5811          
5812          //---------------------------------------------------------------------------
5813          // MainMenu\TV\Skip\Skip_On,Skip_Off,
5814          // MainMenu\TV\Skip\_MI_SKIP_ON,_MI_SKIP_OFF,
5815          void MSkipProc(void)
5816          {
5817   1          switch(ucOsdEventMsg)
5818   1          {
5819   2          case _OE_ADJ_INC:           MSkipValueAdj(_INC);                break;
5820   2          case _OE_ADJ_DEC:           MSkipValueAdj(_DEC);                break;
5821   2          case _OE_MENU_NEXT:         MSkipMenuAdj(_NEXT);                break;
5822   2          case _OE_MENU_PREV:         MSkipMenuAdj(_PREV);                break;
5823   2          case _OE_ENTER_SUBMENU:     MSkipEnterSubMenu();                break;
5824   2          case _OE_RETURN_UPMENU:     MSkipReturnUpMenu();                break;
5825   2              
5826   2          }
5827   1      }
5828          //---------------------------------------------------------------------------
5829          void MSkipValueAdj(BYTE ucMode)
5830          {
5831   1          // ucMode : _INC or _DEC
5832   1          ucMode = ucMode;        // test code
5833   1      }
5834          //---------------------------------------------------------------------------
5835          void MSkipMenuAdj(BYTE ucMode)
5836          {
5837   1          // ucMode : _NEXT or _Prev
5838   1          
5839   1          BYTE ucNewItem = AdjustMenuItem(_MI_SKIP_ON,_MI_SKIP_OFF,ucMode);
5840   1          if(ucNewItem == ucOsdState)
5841   1              return;
5842   1          
5843   1          // 1. Clear Current Menu
5844   1          DrawSkipMenuItem(ucOsdState,    _ST_NORMAL);
5845   1          
5846   1          // 2. Change ucOsdState
5847   1          ucOsdState = ucNewItem;
5848   1          
5849   1          // 3. Draw New Item
5850   1          DrawSkipMenuItem(ucOsdState,    _ST_SELECT);
5851   1      }
5852          //---------------------------------------------------------------------------
5853          void MSkipEnterSubMenu(void)
5854          {
5855   1      #if(_VIDEO_TV_SUPPORT)
                  bit fSkip = 0;
              
                  switch(ucOsdState)
                  {
                  case _MI_SKIP_ON:           fSkip = 1;          break;
                  case _MI_SKIP_OFF:          fSkip = 0;          break;
                  }
                  
                  CSaveChannelSkip(fSkip, stTvInfo.CurChn);
                  MSkipReturnUpMenu();
              #endif
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 96  

5867   1      }
5868          //---------------------------------------------------------------------------
5869          void MSkipReturnUpMenu(void)
5870          {
5871   1          // 1. Before Return UpMenu
5872   1          ClearSkipMenu();
5873   1          
5874   1          // 2. Change ucOsdState
5875   1          ucOsdState = _MI_SKIP;
5876   1          
5877   1          // 3. Now Return to upmenu
5878   1          DrawTVPage();
5879   1      }
5880          //---------------------------------------------------------------------------
5881          #define _PM_AFC_ROW_START                      12
5882          #define _PM_AFC_ROW_HEIGHT                     4
5883          #define _PM_AFC_COL_START                      3
5884          
5885          #if(_VIDEO_TV_SUPPORT && _TV_AFC)
              void DrawAFCMenuItem(BYTE ucItem,BYTE ucState)
              {
                  BYTE y;
                  BYTE *pStr;
                  
                  if(!g_tMenuItem[ucItem].Enable())
                  {
                      ucState = _ST_DISABLE;  
                  }
                  
                  // get display line
                  y = GetShowIndex(ucItem,BEGIN(_MI_AFC_ON),END(_MI_AFC_OFF));
                  
                  if(y == _NOT_SHOW)
                      return;
                  
                  
                  switch(ucItem)
                  {
                  case _MI_AFC_ON:           pStr = sOn[GET_LANGUAGE()];     break;
                  case _MI_AFC_OFF:          pStr = sOff[GET_LANGUAGE()];    break;
                  }
                  
                  DrawAPopupMenuItem(pStr,y,_PM_AFC_ROW_START,_PM_AFC_COL_START,ucState);
              }
              #endif
5912          
5913          //---------------------------------------------------------------------------
5914          void EnterAFCMenu(void)
5915          {
5916   1      #if(_VIDEO_TV_SUPPORT && _TV_AFC)
                  BYTE i;
                  BYTE ucMode;
              
                  CreatePopupMenu(_PM_AFC_ROW_START, _PM_AFC_ROW_HEIGHT);
                  
                  if(GET_AFC_MODE())
                  {
                      ucOsdState = _MI_AFC_ON;
                  }
                  else
                  {
                      ucOsdState = _MI_AFC_OFF;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 97  

                  }
                  
                  for(i=_MI_AFC_ON;i<=_MI_AFC_OFF;i++)
                  {
                      if(i == ucOsdState)
                          ucMode = _ST_SELECT;
                      else
                          ucMode = _ST_NORMAL;
                      
                      DrawAFCMenuItem(i,ucMode);
                  }
              #endif    
5941   1      }
5942          //---------------------------------------------------------------------------
5943          void ClearAFCMenu(void)
5944          {
5945   1          ClearPopupMenu(_PM_AFC_ROW_START, _PM_AFC_ROW_HEIGHT);
5946   1      }
5947          //---------------------------------------------------------------------------
5948          
5949          
5950          //---------------------------------------------------------------------------
5951          // MainMenu\TV\AFC\AFC_On,AFC_Off,
5952          // MainMenu\TV\AFC\_MI_AFC_ON,_MI_AFC_OFF,
5953          void MAFCProc(void)
5954          {
5955   1          switch(ucOsdEventMsg)
5956   1          {
5957   2          case _OE_ADJ_INC:           MAFCValueAdj(_INC);                break;
5958   2          case _OE_ADJ_DEC:           MAFCValueAdj(_DEC);                break;
5959   2          case _OE_MENU_NEXT:         MAFCMenuAdj(_NEXT);                break;
5960   2          case _OE_MENU_PREV:         MAFCMenuAdj(_PREV);                break;
5961   2          case _OE_ENTER_SUBMENU:     MAFCEnterSubMenu();                break;
5962   2          case _OE_RETURN_UPMENU:     MAFCReturnUpMenu();                break;
5963   2              
5964   2          }
5965   1      }
5966          //---------------------------------------------------------------------------
5967          void MAFCValueAdj(BYTE ucMode)
5968          {
5969   1          // ucMode : _INC or _DEC
5970   1          ucMode = ucMode;        // test code
5971   1      }
5972          //---------------------------------------------------------------------------
5973          void MAFCMenuAdj(BYTE ucMode)
5974          {
5975   1      #if (_TV_AFC)
                  // ucMode : _NEXT or _Prev
                  
                  BYTE ucNewItem = AdjustMenuItem(_MI_AFC_ON,_MI_AFC_OFF,ucMode);
                  if(ucNewItem == ucOsdState)
                      return;
                  
                  // 1. Clear Current Menu
                  DrawAFCMenuItem(ucOsdState,    _ST_NORMAL);
                  
                  // 2. Change ucOsdState
                  ucOsdState = ucNewItem;
                  
                  // 3. Draw New Item
                  DrawAFCMenuItem(ucOsdState,    _ST_SELECT);
              #else
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 98  

5991   1          ucMode = 0;
5992   1      #endif
5993   1      }
5994          //---------------------------------------------------------------------------
5995          void MAFCEnterSubMenu(void)
5996          {
5997   1      #if(_VIDEO_TV_SUPPORT)
                  #if (_TV_AFC)
                  BYTE AFC = 0;
              
                  switch(ucOsdState)
                  {
                  case _MI_AFC_ON:           
                      AFCState = _TV_AFC_START;
                      AFC = 1;          
                      break;
              
                  case _MI_AFC_OFF:          
                      AFC = 0;          
                      break;
                  }
                  
                  SET_AFC_MODE(AFC);
                  ucOsdEventMsg = _SAVE_EE_TV_DATA_MSG;
                  #endif
                  MAFCReturnUpMenu();
              #endif
6018   1      }
6019          //---------------------------------------------------------------------------
6020          void MAFCReturnUpMenu(void)
6021          {
6022   1          // 1. Before Return UpMenu
6023   1          ClearAFCMenu();
6024   1          
6025   1          // 2. Change ucOsdState
6026   1          ucOsdState = _MI_AFC;
6027   1          
6028   1          // 3. Now Return to upmenu
6029   1          DrawTVPage();
6030   1      }
6031          //---------------------------------------------------------------------------
6032          
6033          
6034          //---------------------------------------------------------------------------
6035          // MainMenu\Function\Reset,DisplayRatio,AutoPowerDown,BlueScreen,
6036          // MainMenu\Function\_MI_RESET,_MI_DISPLAYRATIO,_MI_AUTOPOWERDOWN,_MI_BLUESCREEN,_MI_SHARPNESS
6037          void MFunctionProc(void)
6038          {
6039   1          switch(ucOsdEventMsg)
6040   1          {
6041   2          case _OE_ADJ_INC:           MFunctionValueAdj(_INC);            break;
6042   2          case _OE_ADJ_DEC:           MFunctionValueAdj(_DEC);            break;
6043   2          case _OE_MENU_NEXT:         MFunctionMenuAdj(_NEXT);            break;
6044   2          case _OE_MENU_PREV:         MFunctionMenuAdj(_PREV);            break;
6045   2          case _OE_ENTER_SUBMENU:     MFunctionEnterSubMenu();            break;
6046   2          case _OE_RETURN_UPMENU:     MFunctionReturnUpMenu();            break;
6047   2              
6048   2          }
6049   1      }
6050          //---------------------------------------------------------------------------
6051          void MFunctionValueAdj(BYTE ucMode)
6052          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 99  

6053   1          // ucMode : _INC or _DEC   
6054   1          switch(ucOsdState)
6055   1          {
6056   2          case _MI_RESET:             EnterResetMenu();                   break;
6057   2          case _MI_DISPLAYRATIO:      EnterDisplayRatioMenu();            break;
6058   2          case _MI_AUTOPOWERDOWN:     EnterADPMenu();                     break;
6059   2          case _MI_BLUESCREEN:        EnterBlueScreenMenu();              break;
6060   2          case _MI_SHARPNESS:         MSharpnessAdjValue(ucMode);         break;
6061   2          }
6062   1          
6063   1          
6064   1          
6065   1      }
6066          //---------------------------------------------------------------------------
6067          void MFunctionMenuAdj(BYTE ucMode)
6068          {
6069   1          // ucMode : _NEXT or _Prev
6070   1          
6071   1          BYTE ucNewItem = AdjustMenuItem(_MI_RESET,_MI_SHARPNESS,ucMode);
6072   1          if(ucNewItem == ucOsdState)
6073   1              return;
6074   1          
6075   1          // 1. Clear Current Menu
6076   1          DrawFuncPageMenuItem(ucOsdState,_ST_NORMAL);
6077   1          
6078   1          // 2. Change ucOsdState
6079   1          ucOsdState = ucNewItem;
6080   1          
6081   1          // 3. Draw New Item
6082   1          DrawFuncPageMenuItem(ucOsdState,_ST_SELECT);
6083   1          
6084   1      }
6085          //---------------------------------------------------------------------------
6086          void MFunctionEnterSubMenu(void)
6087          {
6088   1      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
6089   1          switch(ucOsdState)
6090   1          {
6091   2          case _MI_RESET:     
6092   2              DrawReset(_ST_ADJUST);
6093   2              EnterResetMenu();
6094   2              ucOsdState = _MI_RESET_CANCEL;          
6095   2              break;
6096   2      
6097   2          case _MI_DISPLAYRATIO:      
6098   2              DrawDisplayRatio(_ST_ADJUST);
6099   2              EnterDisplayRatioMenu();
6100   2              break;
6101   2      
6102   2          case _MI_AUTOPOWERDOWN: 
6103   2              DrawAutoPowerDown(_ST_ADJUST);
6104   2              EnterADPMenu();
6105   2              break;
6106   2      
6107   2          case _MI_BLUESCREEN:
6108   2              DrawBlueScreen(_ST_ADJUST);
6109   2              EnterBlueScreenMenu();
6110   2              break;
6111   2      
6112   2          case _MI_SHARPNESS:
6113   2              DrawSharpness(_ST_ADJUST);
6114   2              ucOsdState = _MI_SHARPNESS_ADJ;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 100 

6115   2              break;
6116   2          }
6117   1      #endif
6118   1          // 3. Now enter sub menu
6119   1          // Insert code to here ...
6120   1          
6121   1      }
6122          //---------------------------------------------------------------------------
6123          void MFunctionReturnUpMenu(void)
6124          {
6125   1          // 1. Before Return UpMenu
6126   1          DrawFuncPageMenuItem(ucOsdState,_ST_NORMAL);
6127   1          
6128   1          // 2. Change ucOsdState
6129   1          ucOsdState = _MI_FUNCTION;
6130   1          
6131   1          // 3. Now Return to upmenu
6132   1          // Insert code to here ...
6133   1      }
6134          //---------------------------------------------------------------------------
6135          #define _PM_RESET_ROW_START                 4
6136          #define _PM_RESET_ROW_HEIGHT                4
6137          #define _PM_RESET_COL_START                 3
6138          
6139          void DrawResetMenuItem(BYTE ucItem,BYTE ucState)
6140          {
6141   1          BYTE y;
6142   1          BYTE *pStr;
6143   1          
6144   1          if(!g_tMenuItem[ucItem].Enable())
6145   1          {
6146   2              ucState = _ST_DISABLE;  
6147   2          }
6148   1          
6149   1          // get display line
6150   1          y = GetShowIndex(ucItem,BEGIN(_MI_RESET_OK),END(_MI_RESET_CANCEL));
6151   1          
6152   1          if(y == _NOT_SHOW)
6153   1              return;
6154   1          
6155   1          
6156   1          switch(ucItem)
6157   1          {
6158   2          case _MI_RESET_OK:          pStr = sOK[GET_LANGUAGE()];     break;
6159   2          case _MI_RESET_CANCEL:      pStr = sCancel[GET_LANGUAGE()]; break;
6160   2          }
6161   1          
6162   1          DrawAPopupMenuItem(pStr,y,_PM_RESET_ROW_START,_PM_RESET_COL_START,ucState);
6163   1          
6164   1      }
6165          
6166          //---------------------------------------------------------------------------
6167          void EnterResetMenu(void)
6168          {
6169   1          CreatePopupMenu(_PM_RESET_ROW_START, _PM_RESET_ROW_HEIGHT);
6170   1          
6171   1          ucOsdState = _MI_RESET_CANCEL;
6172   1          
6173   1          DrawResetMenuItem(_MI_RESET_OK,_ST_NORMAL);
6174   1          DrawResetMenuItem(_MI_RESET_CANCEL,_ST_SELECT); 
6175   1      }
6176          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 101 

6177          void ClearResetMenu(void)
6178          {
6179   1          ClearPopupMenu(_PM_RESET_ROW_START, _PM_RESET_ROW_HEIGHT);
6180   1      }
6181          //---------------------------------------------------------------------------
6182          
6183          
6184          
6185          //---------------------------------------------------------------------------
6186          // MainMenu\Function\Reset\Reset_OK,Reset_Cancel,
6187          // MainMenu\Function\Reset\_MI_RESET_OK,_MI_RESET_CANCEL,
6188          void MResetProc(void)
6189          {
6190   1          switch(ucOsdEventMsg)
6191   1          {
6192   2          case _OE_ADJ_INC:           MResetValueAdj(_INC);               break;
6193   2          case _OE_ADJ_DEC:           MResetValueAdj(_DEC);               break;
6194   2          case _OE_MENU_NEXT:         MResetMenuAdj(_NEXT);               break;
6195   2          case _OE_MENU_PREV:         MResetMenuAdj(_PREV);               break;
6196   2          case _OE_ENTER_SUBMENU:     MResetEnterSubMenu();               break;
6197   2          case _OE_RETURN_UPMENU:     MResetReturnUpMenu();               break;
6198   2              
6199   2          }
6200   1      }
6201          //---------------------------------------------------------------------------
6202          void MResetValueAdj(BYTE ucMode)
6203          {
6204   1          // ucMode : _INC or _DEC
6205   1          ucMode = ucMode;        // test code
6206   1      }
6207          //---------------------------------------------------------------------------
6208          void MResetMenuAdj(BYTE ucMode)
6209          {
6210   1          // ucMode : _NEXT or _Prev
6211   1          
6212   1          BYTE ucNewItem = AdjustMenuItem(_MI_RESET_OK,_MI_RESET_CANCEL,ucMode);
6213   1          if(ucNewItem == ucOsdState)
6214   1              return;
6215   1          
6216   1          // 1. Clear Current Menu
6217   1          DrawResetMenuItem(ucOsdState,_ST_NORMAL);
6218   1          
6219   1          // 2. Change ucOsdState
6220   1          ucOsdState = ucNewItem;
6221   1          
6222   1          // 3. Draw New Item
6223   1          DrawResetMenuItem(ucOsdState,_ST_SELECT);
6224   1          
6225   1      }
6226          //---------------------------------------------------------------------------
6227          void MResetEnterSubMenu(void)
6228          {
6229   1          bit fDoReset = 0;
6230   1          
6231   1          if(ucOsdState == _MI_RESET_OK)
6232   1              fDoReset = 1;
6233   1          
6234   1          if(fDoReset)
6235   1          {
6236   2              CDoReset();
6237   2          }
6238   1          MResetReturnUpMenu();
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 102 

6239   1      }
6240          //---------------------------------------------------------------------------
6241          void MResetReturnUpMenu(void)
6242          {
6243   1          // 1. Before Return UpMenu
6244   1          ClearResetMenu();
6245   1          
6246   1          // 2. Change ucOsdState
6247   1          ucOsdState = _MI_RESET;
6248   1          
6249   1          // 3. Now Return to upmenu
6250   1          DrawFuncPage();
6251   1      }
6252          //---------------------------------------------------------------------------
6253          
6254          
6255          
6256          #define _PM_DISPLAYRATIO_ROW_START                  6
6257          #define _PM_DISPLAYRATIO_ROW_HEIGHT                                     5
6258          #define _PM_DISPLAYRATIO_COL_START                  3
6259          
6260          void DrawDisplayRatioMenuItem(BYTE ucItem,BYTE ucState)
6261          {
6262   1          BYTE y;
6263   1          BYTE *pStr;
6264   1          
6265   1          if(!g_tMenuItem[ucItem].Enable())
6266   1          {
6267   2              ucState = _ST_DISABLE;  
6268   2          }
6269   1          
6270   1          // get display line
6271   1              y = GetShowIndex(ucItem,BEGIN(_MI_DISPLAYRATIO_FULL),END(_MI_DISPLAYRATIO_AUTO));
6272   1      
6273   1              if(y == _NOT_SHOW)
6274   1                      return;
6275   1      
6276   1      
6277   1              switch(ucItem)
6278   1              {
6279   2                      case _MI_DISPLAYRATIO_FULL:             
6280   2                              pStr = s16_9;                                   
6281   2                              break;
6282   2                              
6283   2                      case _MI_DISPLAYRATIO_4_3:              
6284   2                              pStr = s4_3;                                    
6285   2                              break;
6286   2      
6287   2                      case _MI_DISPLAYRATIO_AUTO:
6288   2                              pStr = sAuto;
6289   2                              break;
6290   2              }
6291   1              
6292   1          DrawAPopupMenuItem(pStr,y,_PM_DISPLAYRATIO_ROW_START,_PM_DISPLAYRATIO_COL_START,ucState);
6293   1          
6294   1      }
6295          
6296          //---------------------------------------------------------------------------
6297          void EnterDisplayRatioMenu(void)
6298          {
6299   1          BYTE i;
6300   1          BYTE ucMode;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 103 

6301   1          
6302   1          CreatePopupMenu(_PM_DISPLAYRATIO_ROW_START, _PM_DISPLAYRATIO_ROW_HEIGHT);
6303   1          
6304   1          if(GET_DISPLAYMODE() == _DISPMODE_FULL)
6305   1          {
6306   2              ucOsdState = _MI_DISPLAYRATIO_FULL;
6307   2          }
6308   1              else if(GET_DISPLAYMODE() == _DISPMODE_43)
6309   1              {
6310   2                      ucOsdState = _MI_DISPLAYRATIO_4_3;
6311   2              }
6312   1              else
6313   1              {
6314   2                      ucOsdState = _MI_DISPLAYRATIO_AUTO;
6315   2              }
6316   1      
6317   1      //      for(i=_MI_DISPLAYRATIO_FULL;i<=_MI_DISPLAYRATIO_4_3;i++)
6318   1              for(i=_MI_DISPLAYRATIO_FULL;i<=_MI_DISPLAYRATIO_AUTO;i++)
6319   1          {
6320   2              if(i == ucOsdState)
6321   2              {
6322   3                  ucMode = _ST_SELECT;
6323   3              }
6324   2              else
6325   2              {   
6326   3                  ucMode = _ST_NORMAL;
6327   3              }
6328   2              
6329   2              DrawDisplayRatioMenuItem(i,     ucMode);
6330   2          }
6331   1      }
6332          //---------------------------------------------------------------------------
6333          void ClearDisplayRatioMenu(void)
6334          {
6335   1          ClearPopupMenu(_PM_DISPLAYRATIO_ROW_START, _PM_DISPLAYRATIO_ROW_HEIGHT);
6336   1      }
6337          //---------------------------------------------------------------------------
6338          
6339          
6340          //---------------------------------------------------------------------------
6341          // MainMenu\Function\DisplayRatio\DisplayRatio_Full,DisplayRatio_4_3,
6342          // MainMenu\Function\DisplayRatio\_MI_DISPLAYRATIO_FULL,_MI_DISPLAYRATIO_4_3,
6343          void MDisplayRatioProc(void)
6344          {
6345   1          switch(ucOsdEventMsg)
6346   1          {
6347   2          case _OE_ADJ_INC:           MDisplayRatioValueAdj(_INC);        break;
6348   2          case _OE_ADJ_DEC:           MDisplayRatioValueAdj(_DEC);        break;
6349   2          case _OE_MENU_NEXT:         MDisplayRatioMenuAdj(_NEXT);        break;
6350   2          case _OE_MENU_PREV:         MDisplayRatioMenuAdj(_PREV);        break;
6351   2          case _OE_ENTER_SUBMENU:     MDisplayRatioEnterSubMenu();        break;
6352   2          case _OE_RETURN_UPMENU:     MDisplayRatioReturnUpMenu();        break;
6353   2              
6354   2          }
6355   1      }
6356          //---------------------------------------------------------------------------
6357          void MDisplayRatioValueAdj(BYTE ucMode)
6358          {
6359   1          // ucMode : _INC or _DEC
6360   1          ucMode = ucMode;        // test code
6361   1      }
6362          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 104 

6363          void MDisplayRatioMenuAdj(BYTE ucMode)
6364          {
6365   1          // ucMode : _NEXT or _Prev
6366   1          
6367   1          BYTE ucNewItem = AdjustMenuItem(_MI_DISPLAYRATIO_FULL,_MI_DISPLAYRATIO_AUTO,ucMode);
6368   1          if(ucNewItem == ucOsdState)
6369   1              return;
6370   1          
6371   1          // 1. Clear Current Menu
6372   1          DrawDisplayRatioMenuItem(ucOsdState,_ST_NORMAL);
6373   1          
6374   1          // 2. Change ucOsdState
6375   1          ucOsdState = ucNewItem;
6376   1          
6377   1          // 3. Draw New Item
6378   1          DrawDisplayRatioMenuItem(ucOsdState,_ST_SELECT);
6379   1      }
6380          //---------------------------------------------------------------------------
6381          void MDisplayRatioEnterSubMenu(void)
6382          {
6383   1          switch(ucOsdState)
6384   1          {
6385   2              case _MI_DISPLAYRATIO_FULL:       
6386   2                      SET_DISPLAYMODE(_DISPMODE_FULL);        
6387   2                      break;
6388   2                      
6389   2              case _MI_DISPLAYRATIO_4_3:        
6390   2                      SET_DISPLAYMODE(_DISPMODE_43);  
6391   2                      break;
6392   2      
6393   2              case _MI_DISPLAYRATIO_AUTO:
6394   2                      SET_DISPLAYMODE(_DISPMODE_AUTO);        
6395   2                      break;
6396   2          }
6397   1          
6398   1          MDisplayRatioReturnUpMenu();
6399   1          
6400   1          CLR_CLEAR_OSD_EN();
6401   1          CEepromSaveSystemData();
6402   1      
6403   1          CPowerLightPowerOff();        
6404   1          CMuteOn();
6405   1      /*    
6406   1              bDoAspectRatioFlag = _TRUE;
6407   1              if (bSourceVideo())
6408   1          {
6409   1                      CVideoDisplaySet();
6410   1          }
6411   1              else
6412   1          {
6413   1                      if(0)//GET_INPUTSOURCE_TYPE() == _SOURCE_DVI)
6414   1                      {
6415   1                              stModeInfo.IHWidth = HDMI_H_Width;
6416   1                              stModeInfo.IVHeight = HDMI_V_Height;
6417   1                      }
6418   1                      CModeDisplayActiveMode();
6419   1              }
6420   1              bDoAspectRatioFlag = _FALSE;
6421   1          CPowerLightPowerOn(); */       
6422   1          ucTVSyncFailCount = 250;
6423   1          CModeResetMode();
6424   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 105 

6425          //---------------------------------------------------------------------------
6426          void MDisplayRatioReturnUpMenu(void)
6427          {
6428   1          // 1. Before Return UpMenu
6429   1          ClearDisplayRatioMenu();
6430   1          
6431   1          // 2. Change ucOsdState
6432   1          ucOsdState = _MI_DISPLAYRATIO;
6433   1          
6434   1          // 3. Now Return to upmenu
6435   1          DrawFuncPage();
6436   1      }
6437          //---------------------------------------------------------------------------
6438          
6439          //---------------------------------------------------------------------------
6440          
6441          
6442          #define _PM_ADP_ROW_START                       4
6443          #define _PM_ADP_ROW_HEIGHT                      11
6444          #define _PM_ADP_COL_START                       1
6445          
6446          void DrawADPMenuItem(BYTE ucItem,BYTE ucState)
6447          {
6448   1          BYTE y;
6449   1          BYTE *pStr;
6450   1          
6451   1          if(!g_tMenuItem[ucItem].Enable())
6452   1          {
6453   2              ucState = _ST_DISABLE;  
6454   2          }
6455   1          
6456   1          // get display line
6457   1          y = GetShowIndex(ucItem,BEGIN(_MI_AUTOPOWERDOWN_OFF),END(_MI_APD_120));
6458   1          
6459   1          if(y == _NOT_SHOW)
6460   1              return;
6461   1          
6462   1          switch(ucItem)
6463   1          {
6464   2          case _MI_AUTOPOWERDOWN_OFF: pStr = sOff[GET_LANGUAGE()];    break;
6465   2          case _MI_APD_15:            pStr = s15Min[GET_LANGUAGE()];  break;
6466   2          case _MI_APD_30:            pStr = s30Min[GET_LANGUAGE()];  break;
6467   2          case _MI_APD_45:            pStr = s45Min[GET_LANGUAGE()];  break;
6468   2          case _MI_APD_60:            pStr = s60Min[GET_LANGUAGE()];  break;
6469   2          case _MI_APD_75:            pStr = s75Min[GET_LANGUAGE()];  break;
6470   2          case _MI_APD_90:            pStr = s90Min[GET_LANGUAGE()];  break;
6471   2          case _MI_APD_105:           pStr = s105Min[GET_LANGUAGE()]; break;
6472   2          case _MI_APD_120:           pStr = s120Min[GET_LANGUAGE()]; break;
6473   2          }
6474   1          
6475   1          DrawAPopupMenuItem(pStr,y,_PM_ADP_ROW_START,_PM_ADP_COL_START,ucState);
6476   1      }
6477          //---------------------------------------------------------------------------
6478          void EnterADPMenu(void)
6479          {
6480   1          BYTE i;
6481   1          BYTE ucMode;
6482   1          
6483   1          CreatePopupMenu(_PM_ADP_ROW_START, _PM_ADP_ROW_HEIGHT);
6484   1          
6485   1          switch(_GET_POWER_DOWN_TIME())
6486   1          {
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 106 

6487   2          case 0x00:          ucOsdState = _MI_AUTOPOWERDOWN_OFF;     break;
6488   2          case 0x01:          ucOsdState = _MI_APD_15;                break;
6489   2          case 0x02:          ucOsdState = _MI_APD_30;                break;
6490   2          case 0x03:          ucOsdState = _MI_APD_45;                break;
6491   2          case 0x04:          ucOsdState = _MI_APD_60;                break;
6492   2          case 0x05:          ucOsdState = _MI_APD_75;                break;
6493   2          case 0x06:          ucOsdState = _MI_APD_90;                break;
6494   2          case 0x07:          ucOsdState = _MI_APD_105;               break;
6495   2          case 0x08:          ucOsdState = _MI_APD_120;               break;
6496   2          }
6497   1          
6498   1          
6499   1          for(i=_MI_AUTOPOWERDOWN_OFF;i<=_MI_APD_120;i++)
6500   1          {
6501   2              if(i == ucOsdState)
6502   2                  ucMode = _ST_SELECT;
6503   2              else
6504   2                  ucMode = _ST_NORMAL;
6505   2              
6506   2              DrawADPMenuItem(i,ucMode);
6507   2          }
6508   1          
6509   1      }
6510          //---------------------------------------------------------------------------
6511          void ClearADPMenu(void)
6512          {
6513   1          ClearPopupMenu(_PM_ADP_ROW_START, _PM_ADP_ROW_HEIGHT);
6514   1      }
6515          //---------------------------------------------------------------------------
6516          
6517          
6518          
6519          
6520          // MainMenu\Function\AutoPowerDown\AutoPowerDown_Off,APD_15,APD_30,APD_45,APD_60,APD_75,APD_90,
6521          // MainMenu\Function\AutoPowerDown\_MI_AUTOPOWERDOWN_OFF,_MI_APD_15,_MI_APD_30,_MI_APD_45,_MI_APD_60,_MI_A
             -PD_75,_MI_APD_90,
6522          void MAutoPowerDownProc(void)
6523          {
6524   1          switch(ucOsdEventMsg)
6525   1          {
6526   2          case _OE_ADJ_INC:           MAutoPowerDownValueAdj(_INC);       break;
6527   2          case _OE_ADJ_DEC:           MAutoPowerDownValueAdj(_DEC);       break;
6528   2          case _OE_MENU_NEXT:         MAutoPowerDownMenuAdj(_NEXT);       break;
6529   2          case _OE_MENU_PREV:         MAutoPowerDownMenuAdj(_PREV);       break;
6530   2          case _OE_ENTER_SUBMENU:     MAutoPowerDownEnterSubMenu();       break;
6531   2          case _OE_RETURN_UPMENU:     MAutoPowerDownReturnUpMenu();       break;
6532   2              
6533   2          }
6534   1      }
6535          //---------------------------------------------------------------------------
6536          void MAutoPowerDownValueAdj(BYTE ucMode)
6537          {
6538   1          // ucMode : _INC or _DEC
6539   1          ucMode = ucMode;        // test code
6540   1      }
6541          //---------------------------------------------------------------------------
6542          void MAutoPowerDownMenuAdj(BYTE ucMode)
6543          {
6544   1          // ucMode : _NEXT or _Prev
6545   1          
6546   1          BYTE ucNewItem = AdjustMenuItem(_MI_AUTOPOWERDOWN_OFF,_MI_APD_120,ucMode);
6547   1          if(ucNewItem == ucOsdState)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 107 

6548   1              return;
6549   1          
6550   1          // 1. Clear Current Menu
6551   1          DrawADPMenuItem(ucOsdState, _ST_NORMAL);
6552   1          
6553   1          // 2. Change ucOsdState
6554   1          ucOsdState = ucNewItem;
6555   1          
6556   1          // 3. Draw New Item
6557   1          DrawADPMenuItem(ucOsdState, _ST_SELECT);
6558   1      }
6559          //---------------------------------------------------------------------------
6560          void MAutoPowerDownEnterSubMenu(void)
6561          {
6562   1      #if(_VIDEO_TV_SUPPORT)
                  _SET_POWER_DOWN_TIME(ucOsdState - _MI_AUTOPOWERDOWN_OFF);
                  MAutoPowerDownReturnUpMenu();
                  ucOsdEventMsg = _SAVE_EE_TV_DATA_MSG;
                  
                  ucAutoPowerDownTime = _GET_POWER_DOWN_TIME() * 15;
                  if (0 == ucAutoPowerDownTime) // Auto power down time off
                  {
                      ucAutoPowerDownTime = 0xff;
                  }
                  
                  ucMinuteCount = 0;  // Reset count
              #endif
6575   1      }
6576          //---------------------------------------------------------------------------
6577          void MAutoPowerDownReturnUpMenu(void)
6578          {
6579   1          // 1. Before Return UpMenu
6580   1          ClearADPMenu();
6581   1          
6582   1          // 2. Change ucOsdState
6583   1          ucOsdState = _MI_AUTOPOWERDOWN;
6584   1          
6585   1          // 3. Now Return to upmenu
6586   1          DrawFuncPage();
6587   1      }
6588          //---------------------------------------------------------------------------
6589          
6590          //#define _PM_BLUESCREEN_ROW_START                      10
6591          #define _PM_BLUESCREEN_ROW_HEIGHT                       4
6592          #define _PM_BLUESCREEN_COL_START                        3
6593          
6594          void DrawBlueScreenMenuItem(BYTE ucItem,BYTE ucState)
6595          {
6596   1          BYTE y;
6597   1          BYTE *pStr;
6598   1          
6599   1          BYTE ucBlueScreenRowStart;
6600   1          
6601   1          if(!g_tMenuItem[ucItem].Enable())
6602   1          {
6603   2              ucState = _ST_DISABLE;  
6604   2          }
6605   1          
6606   1          // get display line
6607   1          y = GetShowIndex(ucItem,BEGIN(_MI_BLUESCREEN_ON),END(_MI_BLUESCREEN_OFF));
6608   1          
6609   1          if(y == _NOT_SHOW)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 108 

6610   1              return;
6611   1          
6612   1          
6613   1          switch(ucItem)
6614   1          {
6615   2          case _MI_BLUESCREEN_ON:         pStr = sOn[GET_LANGUAGE()];     break;
6616   2          case _MI_BLUESCREEN_OFF:        pStr = sOff[GET_LANGUAGE()];    break;
6617   2          }
6618   1          
6619   1          ucBlueScreenRowStart = GetShowIndex(_MI_BLUESCREEN,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
6620   1          
6621   1          ucBlueScreenRowStart = SHOWINDEX_TO_LINE(ucBlueScreenRowStart);
6622   1          DrawAPopupMenuItem(pStr,y,ucBlueScreenRowStart,_PM_BLUESCREEN_COL_START,ucState);
6623   1          
6624   1      }
6625          //---------------------------------------------------------------------------
6626          void EnterBlueScreenMenu(void)
6627          {
6628   1          BYTE i;
6629   1          BYTE ucMode;
6630   1          
6631   1          BYTE ucBlueScreenRowStart = GetShowIndex(_MI_BLUESCREEN,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
6632   1          ucBlueScreenRowStart = SHOWINDEX_TO_LINE(ucBlueScreenRowStart);
6633   1          
6634   1          CreatePopupMenu(ucBlueScreenRowStart, _PM_BLUESCREEN_ROW_HEIGHT);
6635   1          
6636   1          if(_GET_BLUE_BACKGROUND())
6637   1              ucOsdState = _MI_BLUESCREEN_ON;
6638   1          else ucOsdState = _MI_BLUESCREEN_OFF;
6639   1          
6640   1          for(i=_MI_BLUESCREEN_ON;i<=_MI_BLUESCREEN_OFF;i++)
6641   1          {
6642   2              if(i == ucOsdState)
6643   2                  ucMode = _ST_SELECT;
6644   2              else
6645   2                  ucMode = _ST_NORMAL;
6646   2              
6647   2              DrawBlueScreenMenuItem(i,ucMode);
6648   2          }
6649   1          
6650   1      }
6651          //---------------------------------------------------------------------------
6652          void ClearBlueScreenMenu(void)
6653          {
6654   1          BYTE ucBlueScreenRowStart = GetShowIndex(_MI_BLUESCREEN,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
6655   1          ucBlueScreenRowStart = SHOWINDEX_TO_LINE(ucBlueScreenRowStart);
6656   1          ClearPopupMenu(ucBlueScreenRowStart, _PM_BLUESCREEN_ROW_HEIGHT);
6657   1      }
6658          //---------------------------------------------------------------------------
6659          
6660          
6661          //---------------------------------------------------------------------------
6662          // MainMenu\Function\BlueScreen\BlueScreen_On,BlueScreen_Off,
6663          // MainMenu\Function\BlueScreen\_MI_BLUESCREEN_ON,_MI_BLUESCREEN_OFF,
6664          void MBlueScreenProc(void)
6665          {
6666   1          switch(ucOsdEventMsg)
6667   1          {
6668   2          case _OE_ADJ_INC:           MBlueScreenValueAdj(_INC);          break;
6669   2          case _OE_ADJ_DEC:           MBlueScreenValueAdj(_DEC);          break;
6670   2          case _OE_MENU_NEXT:         MBlueScreenMenuAdj(_NEXT);          break;
6671   2          case _OE_MENU_PREV:         MBlueScreenMenuAdj(_PREV);          break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 109 

6672   2          case _OE_ENTER_SUBMENU:     MBlueScreenEnterSubMenu();          break;
6673   2          case _OE_RETURN_UPMENU:     MBlueScreenReturnUpMenu();          break;
6674   2              
6675   2          }
6676   1      }
6677          //---------------------------------------------------------------------------
6678          void MBlueScreenValueAdj(BYTE ucMode)
6679          {
6680   1          // ucMode : _INC or _DEC
6681   1          ucMode = ucMode;        // test code
6682   1      }
6683          //---------------------------------------------------------------------------
6684          void MBlueScreenMenuAdj(BYTE ucMode)
6685          {
6686   1          // ucMode : _NEXT or _Prev
6687   1          
6688   1          BYTE ucNewItem = AdjustMenuItem(_MI_BLUESCREEN_ON,_MI_BLUESCREEN_OFF,ucMode);
6689   1          if(ucNewItem == ucOsdState)
6690   1              return;
6691   1          
6692   1          // 1. Clear Current Menu
6693   1          DrawBlueScreenMenuItem(ucOsdState,_ST_NORMAL);
6694   1          
6695   1          // 2. Change ucOsdState
6696   1          ucOsdState = ucNewItem;
6697   1          
6698   1          // 3. Draw New Item
6699   1          DrawBlueScreenMenuItem(ucOsdState,_ST_SELECT);
6700   1      }
6701          //---------------------------------------------------------------------------
6702          void MBlueScreenEnterSubMenu(void)
6703          {
6704   1          switch(ucOsdState)
6705   1          {
6706   2          case _MI_BLUESCREEN_ON:     _SET_BLUE_BACKGROUND(1);            break;
6707   2          case _MI_BLUESCREEN_OFF:    _SET_BLUE_BACKGROUND(0);            break;
6708   2          }
6709   1          
6710   1          ucOsdEventMsg = _SAVE_EE_SYSTEMDATA_MSG;
6711   1          MBlueScreenReturnUpMenu();
6712   1      }
6713          //---------------------------------------------------------------------------
6714          void MBlueScreenReturnUpMenu(void)
6715          {
6716   1          // 1. Before Return UpMenu
6717   1          ClearBlueScreenMenu();
6718   1          
6719   1          // 2. Change ucOsdState
6720   1          ucOsdState = _MI_BLUESCREEN;
6721   1          
6722   1          // 3. Now Return to upmenu
6723   1          DrawFuncPage();
6724   1      }
6725          
6726          //---------------------------------------------------------------------------
6727          void MSharpnessAdjValue(BYTE ucMode)
6728          {
6729   1          BYTE y;
6730   1          BYTE ucTemp = GET_PEAKING_CORING();
6731   1                                            
6732   1          SET_KEYREPEATENABLE();
6733   1          // get display line
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 110 

6734   1          y = GetShowIndex(_MI_SHARPNESS,BEGIN(_MI_RESET),END(_MI_SHARPNESS));
6735   1          
6736   1          if(y == _NOT_SHOW)
6737   1              return;
6738   1          
6739   1          y = SHOWINDEX_TO_LINE(y);
6740   1          
6741   1          OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x8C, BYTE_ATTRIB);
6742   1          OSDClear(ROW(y), HEIGHT(1), COL(_MSG_COL), WIDTH(3), 0x00, BYTE_DISPLAY);
6743   1          
6744   1          ucTemp = ValueInRangeChange(0, 100, ucTemp, _NON_LOOP | ucMode);
6745   1          SET_PEAKING_CORING(ucTemp);
6746   1          
6747   1          // draw
6748   1          OSDLine(ROW(y), _MSG_COL, LENGTH(10), StateColor(_ST_ADJUST), BYTE_COLOR);
6749   1          
6750   1          CShowNumber(_MSG_COL, y, ucTemp);
6751   1          CAdjustPeakingCoding();
6752   1      
6753   1          ucOsdEventMsg = _SAVE_EE_SYSTEMDATA_MSG;
6754   1      }
6755          
6756          
6757          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
6758          //---------------------------------------------------------------------------
6759          // MainMenu\Sound\Volume\VolumeAdj
6760          // MainMenu\Sound\Volume\_MI_VOLUMEADJ
6761          void MSharpnessProc(void)
6762          {
6763   1          switch(ucOsdEventMsg)
6764   1          {
6765   2          case _OE_ADJ_INC:           
6766   2              MSharpnessAdjValue(_INC);               
6767   2              break;
6768   2              
6769   2          case _OE_ADJ_DEC:           
6770   2              MSharpnessAdjValue(_DEC);               
6771   2              break;
6772   2              
6773   2          case _OE_MENU_NEXT:
6774   2              MSharpnessReturnUpMenu();
6775   2              MFunctionMenuAdj(_NEXT);
6776   2              break;
6777   2              
6778   2          case _OE_MENU_PREV:
6779   2              MSharpnessReturnUpMenu();
6780   2              MFunctionMenuAdj(_PREV);
6781   2              break;
6782   2              
6783   2          case _OE_ENTER_SUBMENU:     
6784   2              
6785   2              break;
6786   2              
6787   2          case _OE_RETURN_UPMENU:     
6788   2              MSharpnessReturnUpMenu(); 
6789   2              break;
6790   2              
6791   2          }
6792   1      }
6793          
6794          //---------------------------------------------------------------------------
6795          void MSharpnessReturnUpMenu(void)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 111 

6796          {
6797   1          // 1. Before Return UpMenu
6798   1          DrawSharpness(_ST_SELECT);
6799   1          
6800   1          // 2. Change ucOsdState
6801   1          ucOsdState = _MI_SHARPNESS;
6802   1          
6803   1          // 3. Now Return to upmenu
6804   1          // Insert code to here ...
6805   1      }
6806          #endif
6807          
6808          //---------------------------------------------------------------------------
6809          // MainMenu\Sound\Volume,Balance,Bass,Treble,SRS,BBE,
6810          // MainMenu\Sound\_MI_VOLUME,_MI_BALANCE,_MI_BASS,_MI_TREBLE,_MI_SRS,_MI_BBE,
6811          void MSoundProc(void)
6812          {
6813   1          switch(ucOsdEventMsg)
6814   1          {
6815   2          case _OE_ADJ_INC:           MSoundValueAdj(_INC);               break;
6816   2          case _OE_ADJ_DEC:           MSoundValueAdj(_DEC);               break;
6817   2          case _OE_MENU_NEXT:         MSoundMenuAdj(_NEXT);               break;
6818   2          case _OE_MENU_PREV:         MSoundMenuAdj(_PREV);               break;
6819   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
6820   2          case _OE_ENTER_SUBMENU:     MSoundEnterSubMenu();               break;
6821   2      #endif
6822   2          case _OE_RETURN_UPMENU:     MSoundReturnUpMenu();               break;
6823   2              
6824   2          }
6825   1      }
6826          //---------------------------------------------------------------------------
6827          void MSoundValueAdj(BYTE ucMode)
6828          {
6829   1          // ucMode : _INC or _DEC
6830   1          switch(ucOsdState)
6831   1          {
6832   2          case _MI_VOLUME:            VolumeAdjust(ucMode);               break;
6833   2          case _MI_BALANCE:           CBalanceAdjust(ucMode);             break;
6834   2          case _MI_BASS:              CBassAdjust(ucMode);                break;
6835   2          case _MI_TREBLE:            CTrebleAdjust(ucMode);              break;
6836   2          case _MI_SRS:                                                   break;
6837   2          case _MI_BBE:                                                   break;
6838   2          }
6839   1          
6840   1          
6841   1          
6842   1      }
6843          //---------------------------------------------------------------------------
6844          void MSoundMenuAdj(BYTE ucMode)
6845          {
6846   1          // ucMode : _NEXT or _Prev
6847   1          
6848   1          BYTE ucNewItem = AdjustMenuItem(_MI_VOLUME,_MI_BBE,ucMode);
6849   1          if(ucNewItem == ucOsdState)
6850   1              return;
6851   1          
6852   1          // 1. Clear Current Menu
6853   1          DrawSoundPageMenuItem(ucOsdState,_ST_NORMAL);
6854   1          
6855   1          // 2. Change ucOsdState
6856   1          ucOsdState = ucNewItem;
6857   1          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 112 

6858   1          // 3. Draw New Item
6859   1          DrawSoundPageMenuItem(ucOsdState,_ST_SELECT);
6860   1          
6861   1      }
6862          
6863          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
6864          //---------------------------------------------------------------------------
6865          void MSoundEnterSubMenu(void)
6866          {
6867   1          // 1. Before Enter SubMenu
6868   1          // Insert code to here ...
6869   1          
6870   1          
6871   1          // 2. Change ucOsdState
6872   1          switch(ucOsdState)
6873   1          {
6874   2          case _MI_VOLUME:
6875   2              DrawVolume(_ST_ADJUST);
6876   2              ucOsdState = _MI_VOLUMEADJ;
6877   2              break;
6878   2          case _MI_BALANCE:
6879   2              DrawBalance(_ST_ADJUST);
6880   2              ucOsdState = _MI_BALANCEADJ;
6881   2              break;
6882   2          case _MI_BASS:
6883   2              DrawBass(_ST_ADJUST);
6884   2              ucOsdState = _MI_BASSADJ;
6885   2              break;
6886   2          case _MI_TREBLE:
6887   2              DrawTreble(_ST_ADJUST);
6888   2              ucOsdState = _MI_TREBLEADJ;
6889   2              break;
6890   2          case _MI_SRS:
6891   2              //DrawSRS(_ST_ADJUST);
6892   2              //ucOsdState = _MI_SRSADJ;
6893   2              break;
6894   2          case _MI_BBE:
6895   2              //DrawBBE(_ST_ADJUST);
6896   2              //ucOsdState = _MI_BBEADJ;
6897   2              break;
6898   2          }    
6899   1      }
6900          #endif
6901          
6902          //---------------------------------------------------------------------------
6903          void MSoundReturnUpMenu(void)
6904          {
6905   1          // 1. Before Return UpMenu
6906   1          DrawSoundPageMenuItem(ucOsdState,_ST_NORMAL);
6907   1          
6908   1          // 2. Change ucOsdState
6909   1          ucOsdState = _MI_SOUND;
6910   1          
6911   1          // 3. Now Return to upmenu
6912   1          // Insert code to here ...
6913   1      }
6914          
6915          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
6916          //---------------------------------------------------------------------------
6917          // MainMenu\Sound\Volume\VolumeAdj
6918          // MainMenu\Sound\Volume\_MI_VOLUMEADJ
6919          void MVolumeProc(void)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 113 

6920          {
6921   1          switch(ucOsdEventMsg)
6922   1          {
6923   2          case _OE_ADJ_INC:           
6924   2              MVolumeValueAdj(_INC);               
6925   2              break;
6926   2              
6927   2          case _OE_ADJ_DEC:           
6928   2              MVolumeValueAdj(_DEC);               
6929   2              break;
6930   2              
6931   2          case _OE_MENU_NEXT:
6932   2              MVolumeReturnUpMenu();
6933   2              MSoundMenuAdj(_NEXT);
6934   2              break;
6935   2              
6936   2          case _OE_MENU_PREV:
6937   2              MVolumeReturnUpMenu();
6938   2              MSoundMenuAdj(_PREV);
6939   2              break;
6940   2              
6941   2          case _OE_ENTER_SUBMENU:     
6942   2              break;
6943   2              
6944   2          case _OE_RETURN_UPMENU:     
6945   2              MVolumeReturnUpMenu(); 
6946   2              break;
6947   2              
6948   2          }
6949   1      }
6950          
6951          //---------------------------------------------------------------------------
6952          void MVolumeValueAdj(BYTE ucMode)
6953          {
6954   1          VolumeAdjust(ucMode);
6955   1      }
6956          
6957          //---------------------------------------------------------------------------
6958          void MVolumeReturnUpMenu(void)
6959          {
6960   1          // 1. Before Return UpMenu
6961   1          DrawVolume(_ST_SELECT);
6962   1          
6963   1          // 2. Change ucOsdState
6964   1          ucOsdState = _MI_VOLUME;
6965   1          
6966   1          // 3. Now Return to upmenu
6967   1          // Insert code to here ...
6968   1      }
6969          
6970          //---------------------------------------------------------------------------
6971          // MainMenu\Sound\Balance\BalanceAdj
6972          // MainMenu\Sound\Balance\_MI_BALANCEADJ
6973          void MBalanceProc(void)
6974          {
6975   1          switch(ucOsdEventMsg)
6976   1          {
6977   2          case _OE_ADJ_INC:           
6978   2              MBalanceValueAdj(_INC);               
6979   2              break;
6980   2              
6981   2          case _OE_ADJ_DEC:           
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 114 

6982   2              MBalanceValueAdj(_DEC);               
6983   2              break;
6984   2              
6985   2          case _OE_MENU_NEXT:         
6986   2              MBalanceReturnUpMenu();
6987   2              MSoundMenuAdj(_NEXT);               
6988   2              break;
6989   2              
6990   2          case _OE_MENU_PREV:         
6991   2              MBalanceReturnUpMenu();
6992   2              MSoundMenuAdj(_PREV);               
6993   2              break;
6994   2              
6995   2          case _OE_ENTER_SUBMENU:     
6996   2              break;
6997   2              
6998   2          case _OE_RETURN_UPMENU:     
6999   2              MBalanceReturnUpMenu();               
7000   2              break;
7001   2              
7002   2          }
7003   1      }
7004          
7005          //---------------------------------------------------------------------------
7006          void MBalanceValueAdj(BYTE ucMode)
7007          {
7008   1          CBalanceAdjust(ucMode);
7009   1      }
7010          
7011          //---------------------------------------------------------------------------
7012          void MBalanceReturnUpMenu(void)
7013          {
7014   1          // 1. Before Return UpMenu
7015   1          DrawBalance(_ST_SELECT);
7016   1          
7017   1          // 2. Change ucOsdState
7018   1          ucOsdState = _MI_BALANCE;
7019   1          
7020   1          // 3. Now Return to upmenu
7021   1          // Insert code to here ...
7022   1      }
7023          
7024          //---------------------------------------------------------------------------
7025          // MainMenu\Sound\Bass\BassAdj
7026          // MainMenu\Sound\Bass\_MI_BASSADJ
7027          void MBassProc(void)
7028          {
7029   1          switch(ucOsdEventMsg)
7030   1          {
7031   2          case _OE_ADJ_INC:           
7032   2              MBassValueAdj(_INC);               
7033   2              break;
7034   2              
7035   2          case _OE_ADJ_DEC:           
7036   2              MBassValueAdj(_DEC);               
7037   2              break;
7038   2              
7039   2          case _OE_MENU_NEXT:         
7040   2              MBassReturnUpMenu();
7041   2              MSoundMenuAdj(_NEXT);               
7042   2              break;
7043   2              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 115 

7044   2          case _OE_MENU_PREV:         
7045   2              MBassReturnUpMenu();
7046   2              MSoundMenuAdj(_PREV);               
7047   2              break;
7048   2              
7049   2          case _OE_ENTER_SUBMENU:    
7050   2              break;
7051   2              
7052   2          case _OE_RETURN_UPMENU:     
7053   2              MBassReturnUpMenu();              
7054   2              break;
7055   2              
7056   2          }
7057   1      }
7058          
7059          //---------------------------------------------------------------------------
7060          void MBassValueAdj(BYTE ucMode)
7061          {
7062   1          CBassAdjust(ucMode);
7063   1      }
7064          
7065          //---------------------------------------------------------------------------
7066          void MBassReturnUpMenu(void)
7067          {
7068   1          // 1. Before Return UpMenu
7069   1          DrawBass(_ST_SELECT);
7070   1          
7071   1          // 2. Change ucOsdState
7072   1          ucOsdState = _MI_BASS;
7073   1          
7074   1          // 3. Now Return to upmenu
7075   1          // Insert code to here ...
7076   1      }
7077          
7078          //---------------------------------------------------------------------------
7079          // MainMenu\Sound\Treble\TrebleAdj
7080          // MainMenu\Sound\Treble\_MI_TREBLEADJ
7081          void MTrebleProc(void)
7082          {
7083   1          switch(ucOsdEventMsg)
7084   1          {
7085   2          case _OE_ADJ_INC:           
7086   2              MTrebleValueAdj(_INC);               
7087   2              break;
7088   2              
7089   2          case _OE_ADJ_DEC:           
7090   2              MTrebleValueAdj(_DEC);               
7091   2              break;
7092   2              
7093   2          case _OE_MENU_NEXT:         
7094   2              MTrebleReturnUpMenu();
7095   2              MSoundMenuAdj(_NEXT);              
7096   2              break;
7097   2              
7098   2          case _OE_MENU_PREV:         
7099   2              MTrebleReturnUpMenu();
7100   2              MSoundMenuAdj(_PREV);
7101   2              break;
7102   2              
7103   2          case _OE_ENTER_SUBMENU:     
7104   2              
7105   2              break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 116 

7106   2          case _OE_RETURN_UPMENU:     
7107   2              MTrebleReturnUpMenu();               
7108   2              break;
7109   2              
7110   2          }
7111   1      }
7112          
7113          //---------------------------------------------------------------------------
7114          void MTrebleValueAdj(BYTE ucMode)
7115          {
7116   1          CTrebleAdjust(ucMode);
7117   1      }
7118          
7119          //---------------------------------------------------------------------------
7120          void MTrebleReturnUpMenu(void)
7121          {
7122   1          // 1. Before Return UpMenu
7123   1          DrawTreble(_ST_SELECT);
7124   1          
7125   1          // 2. Change ucOsdState
7126   1          ucOsdState = _MI_TREBLE;
7127   1          
7128   1          // 3. Now Return to upmenu
7129   1          // Insert code to here ...
7130   1      }
7131          #endif
7132          
7133          //---------------------------------------------------------------------------
7134          
7135          #if(_CHANGE_SOURCE_METHOD == _CHANGE_SOURCE_METHOD_0)
7136          void DrawSourceMenuItem(BYTE ucItem,BYTE ucState)
7137          {
7138   1          BYTE y;
7139   1          BYTE ucColor;
7140   1          BYTE code *pStr;
7141   1          
7142   1          // get display line
7143   1          y = GetShowIndex(ucItem,BEGIN(_MI_SOURCE_VGA),END(_MI_SOURCE_TV));
7144   1          
7145   1          if(y == _NOT_SHOW)
7146   1              return;
7147   1          
7148   1          // get display color
7149   1          ucColor = StateColor(ucState);
7150   1          
7151   1          y = SHOWINDEX_TO_LINE1(y);
7152   1          
7153   1          // set color
7154   1          SUBMENU_LINECOLOR1(y,ucColor);
7155   1          // draw menu item 
7156   1          
7157   1          switch(ucItem)
7158   1          {
7159   2          case _MI_SOURCE_VGA:            pStr = sVGA;        break;
7160   2          case _MI_SOURCE_DVI:            pStr = sDVI;        break;
7161   2          case _MI_SOURCE_HDMI:           pStr = sHDMI;       break;
7162   2          case _MI_SOURCE_YPBPR:          pStr = sYPBPR;      break;
7163   2          case _MI_SOURCE_SV:             pStr = sSVideo;     break;
7164   2          case _MI_SOURCE_AV:             pStr = sAV;         break;
7165   2          case _MI_SOURCE_TV:             pStr = sTV;         break;
7166   2          }
7167   1          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 117 

7168   1          
7169   1          SUBMENU_TEXTOUT1(pStr,y);
7170   1          
7171   1          // draw select line
7172   1          if(ucState == _ST_SELECT)
7173   1          {
7174   2              DRAW_SUBMENU_SELLINE1(y + 1);
7175   2          }
7176   1          else
7177   1          {
7178   2              CLEAR_SUBMENU_SELLINE1(y + 1);
7179   2          }
7180   1      }
7181          
7182          //---------------------------------------------------------------------------
7183          #define _SOURCE_MENU_WIDTH              (12 * 12 - 4)           
7184          #define _SOURCE_MENU_HEIGHT(n)          ((2+(n * 2)) * 18 + 4)
7185          
7186          void DrawSourceMenu(void)
7187          {
7188   1          BYTE i;
7189   1          BYTE ucMode;
7190   1          BYTE ucShowCount = GetShowCount(BEGIN(_MI_SOURCE_VGA),END(_MI_SOURCE_TV));
7191   1          
7192   1          if (ucCurrState == _SLEEP_STATE)
7193   1          {
7194   2              ucTVSyncFailCount = 250;
7195   2              CModeResetMode();
7196   2              ucCurrState = _NOSIGNAL_STATE;
7197   2              CPowerPanelOn();
7198   2              CPowerLightPowerOn();
7199   2          }
7200   1          
7201   1          InitOsdFrame();
7202   1          OSDClear(ROW(14), HEIGHT(1), COL(0), WIDTH(46), 0x8C, BYTE_ATTRIB);
7203   1          OSDClear(ROW(14), HEIGHT(1), COL(0), WIDTH(46), 0x00, BYTE_DISPLAY);
7204   1          OSDClear(ROW(14), HEIGHT(1), COL(0), WIDTH(46), 0x20, BYTE_COLOR);
7205   1          SetOSDDouble((GET_OSD_SIZE() ? 0x03 : 0x00) | OSD_WINDOWCHAR_BLENDING);   
7206   1         
7207   1          for(i=0;i<ucShowCount;i++)
7208   1          {
7209   2              ucMode = (i * 2) + 2;
7210   2              SETCOLOR_SUBMENU_SELLINE1(ucMode);
7211   2          }
7212   1          
7213   1          switch(_GET_INPUT_SOURCE())
7214   1          {
7215   2          case _SOURCE_VGA:           ucOsdState = _MI_SOURCE_VGA;        break;
7216   2          case _SOURCE_DVI:           ucOsdState = _MI_SOURCE_DVI;        break;
7217   2          case _SOURCE_HDMI:          ucOsdState = _MI_SOURCE_HDMI;       break;
7218   2          case _SOURCE_YPBPR:         ucOsdState = _MI_SOURCE_YPBPR;      break;
7219   2          case _SOURCE_VIDEO_SV:      ucOsdState = _MI_SOURCE_SV;         break;
7220   2          case _SOURCE_VIDEO_AV:      ucOsdState = _MI_SOURCE_AV;         break;
7221   2          case _SOURCE_VIDEO_TV:      ucOsdState = _MI_SOURCE_TV;         break;
7222   2          }
7223   1          
7224   1          for(i=_MI_SOURCE_VGA;i<=_MI_SOURCE_TV;i++)
7225   1          {
7226   2              if(i == ucOsdState)
7227   2                  ucMode = _ST_SELECT;
7228   2              else 
7229   2                  ucMode = _ST_NORMAL;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 118 

7230   2              
7231   2              DrawSourceMenuItem(i,ucMode);   
7232   2          }
7233   1          
7234   1          // Draw Window
7235   1          COsdFxDrawWindow(0,0,                                       //WORD usXStart,WORD usYStart,  
7236   1              _SOURCE_MENU_WIDTH,_SOURCE_MENU_HEIGHT(ucShowCount),    //WORD usXEnd,WORD usYEnd,  
7237   1              tMainWindowStyle);                                      //BYTE *pStyle)
7238   1          
7239   1          i = 0;
7240   1          ucMode = 0;
7241   1          if (!GET_OSD_SIZE())
7242   1          {
7243   2              i = 3;
7244   2              ucMode = 3;
7245   2          }
7246   1          
7247   1          OSDPosition(_SOURCE_MENU_WIDTH,_SOURCE_MENU_HEIGHT(ucShowCount),0+i,0+ucMode,0x03);
7248   1          COsdFxEnableOsd();
7249   1      }
7250          
7251          //---------------------------------------------------------------------------
7252          // MainMenu\Source\VGA,DVI,HDMI,SV,AV,TV,
7253          // MainMenu\Source\_MI_SOURCE_VGA,_MI_SOURCE_DVI,_MI_SOURCE_HDMI,_MI_SOURCE_SV,_MI_SOURCE_AV,_MI_SOURCE_TV
             -,
7254          void MSourceProc(void)
7255          {
7256   1          switch(ucOsdEventMsg)
7257   1          {
7258   2          case _OE_ADJ_INC:           MSourceValueAdj(_INC);              break;
7259   2          case _OE_ADJ_DEC:           MSourceValueAdj(_DEC);              break;
7260   2          case _OE_MENU_NEXT:         MSourceMenuAdj(_NEXT);              break;
7261   2          case _OE_MENU_PREV:         MSourceMenuAdj(_PREV);              break;
7262   2      #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
7263   2          case _OE_ENTER_SUBMENU:     MSourceEnterSubMenu();              break;
7264   2      #endif
7265   2          case _OE_RETURN_UPMENU:     MSourceReturnUpMenu();              break;
7266   2              
7267   2          }
7268   1          
7269   1      }
7270          
7271          //---------------------------------------------------------------------------
7272          void MSourceValueAdj(BYTE ucMode)
7273          {
7274   1          // ucMode : _INC or _DEC
7275   1          ucMode = _GET_INPUT_SOURCE();
7276   1          
7277   1          switch(ucOsdState)
7278   1          {
7279   2          case _MI_SOURCE_VGA:        _SET_INPUT_SOURCE(_SOURCE_VGA);         break;
7280   2          case _MI_SOURCE_DVI:        _SET_INPUT_SOURCE(_SOURCE_DVI);         break;
7281   2          case _MI_SOURCE_HDMI:       _SET_INPUT_SOURCE(_SOURCE_HDMI);        break;
7282   2          case _MI_SOURCE_YPBPR:      _SET_INPUT_SOURCE(_SOURCE_YPBPR);       break;
7283   2          case _MI_SOURCE_SV:         _SET_INPUT_SOURCE(_SOURCE_VIDEO_SV);    break;
7284   2          case _MI_SOURCE_AV:         _SET_INPUT_SOURCE(_SOURCE_VIDEO_AV);    break;
7285   2          case _MI_SOURCE_TV:         _SET_INPUT_SOURCE(_SOURCE_VIDEO_TV);    break;
7286   2          }
7287   1          
7288   1          COsdDispOsdTimerEvent();
7289   1          if(ucMode != _GET_INPUT_SOURCE())
7290   1          {                
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 119 

7291   2              ucCurrState   = _SEARCH_STATE;
7292   2              ucOsdEventMsg = _CHANGE_SOURCE_MSG;        
7293   2          }
7294   1      }
7295          
7296          //---------------------------------------------------------------------------
7297          void MSourceMenuAdj(BYTE ucMode)
7298          {
7299   1          // ucMode : _NEXT or _Prev
7300   1          
7301   1          BYTE ucNewItem = AdjustMenuItem(_MI_SOURCE_VGA,_MI_SOURCE_TV,ucMode);
7302   1          if(ucNewItem == ucOsdState)
7303   1              return;
7304   1          
7305   1          // 1. Clear Current Menu
7306   1          DrawSourceMenuItem(ucOsdState,_ST_NORMAL);
7307   1          
7308   1          // 2. Change ucOsdState
7309   1          ucOsdState = ucNewItem;
7310   1          
7311   1          // 3. Draw New Item
7312   1          DrawSourceMenuItem(ucOsdState,_ST_SELECT);
7313   1          
7314   1      }
7315          
7316          #if(_KEY_TYPE == _KT_PCB2660_003_5KEY)
7317          //---------------------------------------------------------------------------
7318          void MSourceEnterSubMenu(void)
7319          {
7320   1          // 1. Before Enter SubMenu
7321   1          // Insert code to here ...
7322   1          BYTE ucMode = _GET_INPUT_SOURCE();
7323   1          
7324   1          
7325   1          // 2. Change ucOsdState
7326   1          switch(ucOsdState)
7327   1          {
7328   2          case _MI_SOURCE_VGA:
7329   2              _SET_INPUT_SOURCE(_SOURCE_VGA);
7330   2              break;
7331   2              
7332   2          case _MI_SOURCE_DVI:
7333   2              _SET_INPUT_SOURCE(_SOURCE_DVI);
7334   2              break;
7335   2              
7336   2          case _MI_SOURCE_HDMI:
7337   2              _SET_INPUT_SOURCE(_SOURCE_HDMI);
7338   2              break;
7339   2              
7340   2          case _MI_SOURCE_YPBPR:                                                
7341   2              _SET_INPUT_SOURCE(_SOURCE_YPBPR);
7342   2              break;
7343   2              
7344   2          case _MI_SOURCE_SV:
7345   2              _SET_INPUT_SOURCE(_SOURCE_VIDEO_SV);
7346   2              break;
7347   2              
7348   2          case _MI_SOURCE_AV:
7349   2              _SET_INPUT_SOURCE(_SOURCE_VIDEO_AV);
7350   2              break;
7351   2              
7352   2          case _MI_SOURCE_TV:
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 120 

7353   2              _SET_INPUT_SOURCE(_SOURCE_VIDEO_TV);
7354   2              break;
7355   2          }
7356   1          
7357   1          // 3. Now enter sub menu
7358   1          // Insert code to here ...
7359   1          
7360   1          COsdDispOsdTimerEvent();
7361   1          if(ucMode != _GET_INPUT_SOURCE())
7362   1          {                
7363   2              ucOsdEventMsg = _CHANGE_SOURCE_MSG;        
7364   2          }
7365   1          
7366   1      }
7367          #endif
7368          
7369          //---------------------------------------------------------------------------
7370          void MSourceReturnUpMenu(void)
7371          {
7372   1          // 1. Before Return UpMenu
7373   1          // Insert code to here ...
7374   1          
7375   1          // 2. Change ucOsdState
7376   1          // ucOsdState = _MI_MENU_NONE;
7377   1          // COsdFxDisableOsd();
7378   1          COsdDispOsdTimerEvent();
7379   1          // 3. Now Return to upmenu
7380   1          // Insert code to here ...
7381   1      }
7382          //---------------------------------------------------------------------------
7383          #endif // #if(_CHANGE_SOURCE_METHOD == _CHANGE_SOURCE_METHOD_0)
7384          
7385          
7386          #define _SHORT_CUT_MENU_WIDTH               (27 * 12)
7387          #define _SHORT_CUT_MENU_HEIGHT              (6 * 18)
7388          
7389          #define SC_MENU_TEXTOUT(str)                CCenterTextout(str,ROW(1),2,23)
7390          #define SC_SLIDER(value)                    OSDSlider(ROW(3), COL(3), LENGTH(17), value, 100, 0x10)
7391          
7392          //---------------------------------------------------------------------------
7393          void DrawShortCuteMenu(void)
7394          {
7395   1          InitOsdFrame();
7396   1          SetOSDDouble((GET_OSD_SIZE() ? 0x03 : 0x00) | OSD_WINDOWCHAR_BLENDING);   
7397   1          
7398   1          // Draw Top Line
7399   1          OSDLine(ROW(2), COL(2), LENGTH(23), 0xA6, THE_BYTE0);
7400   1          OSDLine(ROW(2), COL(2), LENGTH(23), 0xA4, THE_BYTE1);
7401   1          OSDLine(ROW(2), COL(2), LENGTH(23), 0x11, THE_BYTE2);
7402   1          
7403   1          // Draw Bottom Line
7404   1          OSDLine(ROW(4), COL(2), LENGTH(23), 0xA6, THE_BYTE0);
7405   1          OSDLine(ROW(4), COL(2), LENGTH(23), 0xA4, THE_BYTE1);
7406   1          OSDLine(ROW(4), COL(2), LENGTH(23), 0x11, THE_BYTE2);
7407   1          
7408   1          // Draw Window
7409   1          COsdFxDrawWindow(0,0,                               //WORD usXStart,WORD usYStart,  
7410   1              _SHORT_CUT_MENU_WIDTH,_SHORT_CUT_MENU_HEIGHT,       //WORD usXEnd,WORD usYEnd,  
7411   1              tMainWindowStyle);                  //BYTE *pStyle)
7412   1          
7413   1          CSetOSDPosition(_SHORT_CUT_MENU_WIDTH, _SHORT_CUT_MENU_HEIGHT, 50, 100);   
7414   1      }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 121 

7415          
7416          //---------------------------------------------------------------------------
7417          void EnterSCBright(void)
7418          {
7419   1          ucOsdState = _MI_SC_BRIGHTNESS;
7420   1          DrawShortCuteMenu();
7421   1          SC_MENU_TEXTOUT(sBrightness[GET_LANGUAGE()]);
7422   1          SC_SLIDER(stConBriData.Brightness);
7423   1          COsdFxEnableOsd();
7424   1          SET_KEYREPEATENABLE();
7425   1      }
7426          
7427          //---------------------------------------------------------------------------
7428          void EnterSCVolume(void)
7429          {
7430   1          ucOsdState = _MI_SC_VOLUME;
7431   1          DrawShortCuteMenu();
7432   1          SC_MENU_TEXTOUT(sVolume[GET_LANGUAGE()]);
7433   1          SC_SLIDER(GET_VOLUME());
7434   1          COsdFxEnableOsd();
7435   1          SET_KEYREPEATENABLE();
7436   1          CLR_AUDIO_MUTE();
7437   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
7438   1          if (_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV && bTVNoSignal == 1)
7439   1              return;
7440   1      
7441   1          CSetVolume();
7442   1      }
7443          
7444          //---------------------------------------------------------------------------
7445          #if(_VIDEO_TV_SUPPORT)
              #define _INPUT_NO_NUMBER       0
              #define _INPUT_ONE_NUMBER      1
              #define _INPUT_TWO_NUMBER      2
              #define _INPUT_THREE_NUMBER    3
              WORD iInpuNumCount = 0;
              void EnterSCInputNum(void)
              {
                  BYTE ucInputState = GET_INPUTCH_STATE() + 1;
                  
                  COsdLoad1BitFont(FntInputState,0x7A,1,tFntVolumeCharWidth);
                  
                  // iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
                  // Reset input number and state
                  ucCurrentInputNumber = 0;
                  // 0: no input number   1: input one number     2: input two number    3: input three number
                  ucCurrentInputState  = _INPUT_NO_NUMBER;  
                  
                  if (ucInputState > 3)
                  {   // Input state err reset input state to input one channel -
                      ucInputState = 1;
                      SET_INPUTCH_STATE(0);
                      CEepromSaveTvData();
                  }
                  
                  ucOsdState = _MI_SC_INPUT_CH_NUM;
                  bChangeChannel = 0;
                  COsdFxDisableOsd();
              #if(_LOGO_ENABLE)
                  if (bLoadLogoFont)
                  {       
                      SetOsdMap(tUserMenuOsdMap);
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 122 

                      
                      // Load global font 
                      // insert code to here 
                      COsdLoad1BitFont(FntGlobal,0x00,0x5F,tGlobalCharWidth);
                      CScalerLoadHardwareVLCFont(FntMainIcon,0x80 * 2);
                      
                      //Load Languege Font
                      LoadLanguageFont();
                      bLoadLogoFont = 0;
                  }
              #endif
              
                  SetOSDDouble(0x03);
                  SetOsdMap(tMsgOsdMap);
                  
                  // Init OSD Ram
                  OSDClear(0, 8, 0, 10, 0x8C, BYTE_ATTRIB);
                  OSDClear(0, 8, 0, 10, 0x00, BYTE_DISPLAY);
                  OSDClear(0, 8, 0, 10, 0xF0, BYTE_COLOR);
                  
                  COsdFxCodeWrite(ucCloseAllWindow);
                  
                  OSDPosition(_MAINMENU_WIDTH,_MAINMENU_HEIGHT,64,1,0x03);
                  
                  Gotoxy(1, 0, BYTE_DISPLAY);         
                  for(; ucInputState > 0; ucInputState--)
                      OutputChar(0x7A);  // Show "-"
                  
                  
                  COsdFxEnableOsd();
                  CTimerReactiveTimerEvent(SEC(20),COsdDispOsdTimerEvent);
                  bOSDTimeOut   = 0;
                  iInpuNumCount = 0;
              }
              #endif
7512          //---------------------------------------------------------------------------
7513          
7514          void MScBrightnessProc(void)
7515          {
7516   1          switch(ucOsdEventMsg)
7517   1          {
7518   2          case _OE_ADJ_INC:           MScBrgithnessValueAdj(_INC);              break;
7519   2          case _OE_ADJ_DEC:           MScBrgithnessValueAdj(_DEC);              break;
7520   2          case _OE_RETURN_UPMENU:     MScBrgithnessReturnUpMenu();              break;
7521   2              
7522   2          }
7523   1          
7524   1      }
7525          
7526          //---------------------------------------------------------------------------
7527          void MScBrgithnessValueAdj(BYTE ucMode)
7528          {
7529   1          // ucMode : _INC or _DEC
7530   1          SET_KEYREPEATENABLE();
7531   1          stConBriData.Brightness = ValueInRangeChange(0, 100, stConBriData.Brightness, _NON_LOOP | ucMode);
7532   1          CAdjustBrightness();
7533   1          ucOsdEventMsg = _SAVE_EE_COLORPROC0_MSG;
7534   1          
7535   1          SC_SLIDER(stConBriData.Brightness);    
7536   1      }
7537          
7538          //---------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 123 

7539          void MScBrgithnessReturnUpMenu(void)
7540          {
7541   1          ucOsdState = _MI_MENU_NONE;
7542   1          COsdFxDisableOsd();
7543   1      }
7544          
7545          //---------------------------------------------------------------------------
7546          void MScVolumeProc(void)
7547          {
7548   1          switch(ucOsdEventMsg)
7549   1          {
7550   2          case _OE_ADJ_INC:           MScVolumeValueAdj(_INC);              break;
7551   2          case _OE_ADJ_DEC:           MScVolumeValueAdj(_DEC);              break;
7552   2          case _OE_RETURN_UPMENU:     MScVolumeReturnUpMenu();              break;
7553   2              
7554   2          }
7555   1      }
7556          
7557          //---------------------------------------------------------------------------
7558          void MScVolumeValueAdj(BYTE ucMode)
7559          {
7560   1          // ucMode : _INC or _DEC
7561   1          SET_KEYREPEATENABLE();
7562   1          stAudioData.Volume = ValueInRangeChange(0, 100, stAudioData.Volume, _NON_LOOP | ucMode);
7563   1          ucOsdEventMsg = _SAVE_EE_AUDIO_DATA_MSG;
7564   1          SC_SLIDER(GET_VOLUME()); 
7565   1          if (_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV && bTVNoSignal == 1)
7566   1              return;
7567   1          CSetVolume();
7568   1      }
7569          //---------------------------------------------------------------------------
7570          void MScVolumeReturnUpMenu(void)
7571          {
7572   1          ucOsdState = _MI_MENU_NONE;
7573   1          COsdFxDisableOsd();
7574   1      }
7575          
7576          //---------------------------------------------------------------------------
7577          void MScInputChNumProc(void)
7578          {
7579   1      #if(_VIDEO_TV_SUPPORT)
                  BYTE idata ucInputState = GET_INPUTCH_STATE() + 1;
                  
                  iInpuNumCount++;
              
                  if (iInpuNumCount > 900)
                      ucOsdEventMsg = _OE_RETURN_UPMENU;
              
                  switch(ucOsdEventMsg)
                  {        
                  case _OE_SC_INPUT_NUM0:
                  case _OE_SC_INPUT_NUM1:
                  case _OE_SC_INPUT_NUM2:
                  case _OE_SC_INPUT_NUM3:
                  case _OE_SC_INPUT_NUM4:
                  case _OE_SC_INPUT_NUM5:
                  case _OE_SC_INPUT_NUM6:
                  case _OE_SC_INPUT_NUM7:
                  case _OE_SC_INPUT_NUM8:
                  case _OE_SC_INPUT_NUM9:
                      SInceptNumber(ucOsdEventMsg - _OE_SC_INPUT_NUM0);
                      iInpuNumCount = 0;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 124 

                      break;
                      
                  case _OE_SC_INPUT_CHANGE_CH:
                      //            iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
                      ucInputState = ValueInRangeChange(1, 3, ucInputState, _LOOP | 0x01);
                      SET_INPUTCH_STATE(ucInputState-1);
                      CEepromSaveTvData();
                      
                      // Reset input number and state
                      ucCurrentInputNumber = 0;
                      // 0: no input number   1: input one number     2: input two number    3: input three number
                      ucCurrentInputState  = 0;
                      iInpuNumCount        = 0;
                      break;
                      
                  case _OE_RETURN_UPMENU:
                      if (_INPUT_NO_NUMBER == ucCurrentInputState)
                          COsdDispOsdTimerEvent();
                      else
                          ucInputState = ucCurrentInputState;
                      break;
                  }
                  
                  SShowCurrentInputState(ucInputState);
                  
                  if (ucInputState == ucCurrentInputState)
                  {
                      BYTE ucMaxChannel = CloadMaxChannelNumber();
                      
                      CMuteOn();
                      COsdDispOsdTimerEvent();
                      CModeResetTVMode();
                      CTimerDelayXms(200);
                      
              #if(_FM_DEVICE)
                      if (1 == bFM)
                      {
                          ucPrevChannel =  stTvInfo.ucFMCurrCh;
                          stTvInfo.ucFMCurrCh = (ucCurrentInputNumber > ucMaxChannel) ? ucMaxChannel : ucCurrentInputNum
             -ber;
                          CSetTVChannel(stTvInfo.ucFMCurrCh);
                          CShowTVNumber(stTvInfo.ucFMCurrCh, _SHOW_CH_TV_NUMBER);
                      }
                      else
              #endif   
                      {
                          ucPrevChannel =  stTvInfo.CurChn;
                          stTvInfo.CurChn = (ucCurrentInputNumber > ucMaxChannel) ? ucMaxChannel : ucCurrentInputNumber;
                          CSetTVChannel(stTvInfo.CurChn);
                          //            CShowTVNumber(stTvInfo.CurChn,_SHOW_CH_TV_NUMBER | _SHOW_CH_TV_TYPE | _SHOW_CH_S
             -OUND_TYPE);
                          gmi_CI2CWriteIfPllDM(ucTVType, _TUNER_MUTE_OFF, _NORMAL_MODE);
                      }
                      
                      ucOsdEventMsg = _SAVE_EE_TV_DATA_MSG;
                  }
                  
              //    CTimerReactiveTimerEvent(SEC(10), COsdDispOsdTimerEvent);
                  bOSDTimeOut = 0;
              #endif
7659   1      }
7660          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 125 

7661          #if(_VIDEO_TV_SUPPORT)
              //---------------------------------------------------------------------------
              void SInceptNumber(const WORD ucNumber)
              {
                  switch(ucCurrentInputState)
                  { 
                  case _INPUT_NO_NUMBER: // not input number
                      ucCurrentInputNumber = ucNumber;
                      ucCurrentInputState  = _INPUT_ONE_NUMBER;
                      break;
                      
                  case _INPUT_ONE_NUMBER: // Input on number alrady
                  case _INPUT_TWO_NUMBER: // Input two number alrady
                      ucCurrentInputNumber = (ucCurrentInputNumber*10) + ucNumber;
                      ucCurrentInputState  = (ucCurrentInputState == _INPUT_TWO_NUMBER) ? _INPUT_THREE_NUMBER : _INPUT_T
             -WO_NUMBER;
                      break;
                      /*
                      case _INPUT_TWO_NUMBER: // Input two number alrady
                      ucCurrentInputNumber = (ucCurrentInputNumber*10) + ucNumber;
                      ucCurrentInputState  = _INPUT_THREE_NUMBER;
                      break;*/
                  }
              }
              
              //---------------------------------------------------------------------------
              void SShowCurrentInputState(BYTE ucInputState)
              {
                  Gotoxy(1, 0, BYTE_DISPLAY); 
                  
                  switch(ucCurrentInputState)
                  {
                  case _INPUT_NO_NUMBER: // not input number
                      for(;ucInputState > 0;ucInputState--)
                          OutputChar(0x7A);  // Show "-"
                      OutputChar(0x01);  // Show " "
                      OutputChar(0x01);  // Show " "
                      break;
                      
                  case _INPUT_ONE_NUMBER: // Input on number alrady
                      CShowNumber1(ucCurrentInputNumber,1);
                      break;
                      
                  case _INPUT_TWO_NUMBER: // Input two number alrady
                      CShowNumber1(ucCurrentInputNumber,2);
                      break;
                      
                  case _INPUT_THREE_NUMBER: // Input three number alrady
                      CShowNumber1(ucCurrentInputNumber,3);
                      break;
                  }
              }
              
              //---------------------------------------------------------------------------
              bit CKeyStopAutoSearch(void)
              {
                  if (_MENU_KEY_MASK == CKeyScan() || _MENU_KEY_MESSAGE == CIRKeyScan())
                      return 1;
                  
                  return 0;
              }
              
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 126 

              //-----------------------------------------------------------------------
              void CShowAutoSerachTotal(BYTE ucSearchTotal)
              {
                  CShowNumber(_MSG_COL, SHOWINDEX_TO_LINE(0), ucSearchTotal);    
              }
              
              //-----------------------------------------------------------------------
              void CShowFreq(WORD iFreqN, BYTE x, BYTE y)
              {
                  DWORD lFreqTemp = 0;
                  BYTE  xx = 6;
                  
                  // Get PIF freq
              #if(_IF_PLL_DE_CHIP == _IF_PLL_DE_1338)  
                  if (bFM)
                      lFreqTemp = (((float)iFreqN/_FM_TUNER_BP) - ((float)_PIF_FREQ/1000))*100;
                  else
              #endif
                      lFreqTemp = (((float)iFreqN/_TUNER_BP) - ((float)_PIF_FREQ/1000))*100;
                  
                  iFreqN = lFreqTemp/100;  // MHz
                  Gotoxy(x, y, BYTE_DISPLAY);
                  CShowNumber1(iFreqN, 0);
                  OutputChar(0x5F); // "."
                  if (iFreqN < 100)
                      xx = 5;
                  
                  iFreqN = lFreqTemp%100;  // KHz
                  CShowNumber1(iFreqN, 2);
                  
                  CTextOutEx(sMhz, x+xx, y);
              }     
              
              //-----------------------------------------------------------------------
              void CShowAutoSearchSliderInOSD(WORD ucCurrentValue)
              {
                  BYTE ucY;
                  
                  ucY = (ucOsdState == _MI_AUTOSEARCH) ? SHOWINDEX_TO_LINE(2) : SHOWINDEX_TO_LINE(3);
                  CShowFreq(ucCurrentValue, _MSG_COL, ucY);
              }
              #endif
7764          
7765          //---------------------------------------------------------------------------
7766          void CShowVGAMode(BYTE x,BYTE y)
7767          {
7768   1          if (stModeInfo.IVFreq == 0) 
7769   1              return;
7770   1      
7771   1          Gotoxy(x, y, BYTE_DISPLAY);
7772   1          CShowNumber1(stModeInfo.IHWidth, 0);
7773   1          OutputChar(0x2D);  // "X"
7774   1          CShowNumber1(stModeInfo.IVHeight, 0);
7775   1          OutputChar(0x01);  // " "
7776   1          CShowNumber1((stModeInfo.IVFreq/10), 0);
7777   1          OutputChar(0x19);  // "H"
7778   1          OutputChar(0x2F);  // "Z"
7779   1          OutputChar(0x01);  // " "
7780   1      }
7781          //---------------------------------------------------------------------------
7782          #if(_HDMI_SUPPORT == _ON)
7783          
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 127 

7784          
7785          BYTE code s480I[] = {0x34,0x38,0x30,0x1A,0x00};
7786          BYTE code s480P[] = {0x34,0x38,0x30,0x23,0x00};
7787          BYTE code s576I[] = {0x35,0x37,0x36,0x1A,0x00};
7788          BYTE code s576P[] = {0x35,0x37,0x36,0x23,0x00};
7789          BYTE code s720P[] = {0x37,0x32,0x30,0x23,0x00};
7790          BYTE code s1080I[] = {0x31,0x30,0x38,0x30,0x1A,0x00};
7791          BYTE code s1080P[] = {0x31,0x30,0x38,0x30,0x23,0x00};
7792          
7793          void CShowHDMIMode(BYTE x,BYTE y,bit bShowTable)
7794          {        
7795   1          if (stModeInfo.IVFreq == 0) 
7796   1              return;
7797   1      
7798   1          if(bShowTable)
7799   1          {
7800   2              BYTE *p;
7801   2              
7802   2              switch(ucHDMIMode)
7803   2              {
7804   3              case _HM_480I:      p = s480I;      break;
7805   3              case _HM_480P:      p = s480P;      break;      
7806   3              case _HM_576I:      p = s576I;      break;
7807   3              case _HM_576P:      p = s576P;      break;
7808   3              case _HM_720P:      p = s720P;      break;
7809   3              case _HM_1080I:     p = s1080I;     break;
7810   3              case _HM_1080P:     
7811   3              default:            p = s1080P;     break;
7812   3              }
7813   2              if(x)
7814   2              {
7815   3                  x = 19 - StrLen(p)/2;
7816   3                  CTextOutEx(p, x, y);
7817   3                  return;
7818   3              }
7819   2              
7820   2              CTextOutEx(p, x, y);
7821   2          }
7822   1          else
7823   1          {         
7824   2              WORD ucLen;
7825   2              WORD IHWidth_Tmp,IVHeight_Tmp;
7826   2          
7827   2              IHWidth_Tmp  = stModeInfo.IHWidth;
7828   2              IVHeight_Tmp = stModeInfo.IVHeight;
7829   2          
7830   2              CScalerPageSelect(_PAGE2);
7831   2              CScalerGetDataPortByte(_P2_HDMI_ADDR_PORT_C9, _P2_HDMI_VCR_50, 1, pData, _NON_AUTOINC);
7832   2              stModeInfo.IVHeight = HDMI_V_Height;
7833   2          
7834   2              if((pData[0]&0x0F) == 0x01)                     // 2 times
7835   2                      stModeInfo.IHWidth = HDMI_H_Width*2;
7836   2              else if((pData[0]&0x0F) == 0x03)        // 4 times
7837   2                      stModeInfo.IHWidth = HDMI_H_Width*4;
7838   2              else
7839   2                  stModeInfo.IHWidth = HDMI_H_Width;
7840   2          
7841   2              ucLen = stModeInfo.IVHeight;
7842   2              CScalerRead(_IPV_ACT_LEN_H_1A, 1, pData, _AUTOINC);
7843   2          
7844   2              if (pData[0] & _BIT5)
7845   2                      ucLen = stModeInfo.IVHeight*2;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 128 

7846   2          
7847   2              if (GET_INTERLACE_MODE())
7848   2              {
7849   3                      if(stModeInfo.IVFreq>=598 && stModeInfo.IVFreq<=599)                    //60Hz
7850   3                              stModeInfo.IVFreq += 2;
7851   3                      else if(stModeInfo.IVFreq>=498 && stModeInfo.IVFreq<=499)       //50Hz
7852   3                              stModeInfo.IVFreq += 2;
7853   3              }
7854   2          
7855   2              Gotoxy(x, y, BYTE_DISPLAY);
7856   2              CShowNumber1((stModeInfo.IHWidth > 1920) ? 1920 : stModeInfo.IHWidth, 0);
7857   2              OutputChar(0x2D);  // "X"
7858   2              CShowNumber1((ucLen > 1200) ? 1200 : ucLen, 0);
7859   2              OutputChar(0x2D);  // "X"
7860   2              CShowNumber1(stModeInfo.IVFreq/10, 0);
7861   2              OutputChar(0x19);  // "H"
7862   2              OutputChar(0x2F);  // "Z"
7863   2              OutputChar(0x01);  // " "
7864   2          
7865   2              stModeInfo.IHWidth  = IHWidth_Tmp;
7866   2              stModeInfo.IVHeight = IVHeight_Tmp;
7867   2          }
7868   1      }
7869          #endif
7870          
7871          //---------------------------------------------------------------------------
7872          void CShowMode(BYTE x,BYTE y)
7873          {
7874   1          switch(_GET_INPUT_SOURCE())
7875   1          {
7876   2              #if(_HDMI_SUPPORT == _ON)
7877   2          case _SOURCE_HDMI:
7878   2      //    case _SOURCE_DVI: 
7879   2              if(ucHDMIMode == _HM_OTHER)
7880   2              {
7881   3                  CShowHDMIMode(x,y,0);
7882   3              }
7883   2              else
7884   2              {
7885   3                  CShowHDMIMode(x,y,1);
7886   3              }
7887   2              break;
7888   2              #endif 
7889   2           
7890   2              #if(1)//_HDMI_SUPPORT == _OFF)
7891   2          case _SOURCE_DVI: 
7892   2              #endif 
7893   2          case _SOURCE_VGA:
7894   2              CShowVGAMode(x,y);     
7895   2              break;
7896   2      
7897   2              #if(_YPBPR_SUPPORT == _ON)
                  case _SOURCE_YPBPR:
                      if (stModeInfo.ModeCurr < _MAX_YPBPR_MODE)
                      {
                          if(!x)
                              CTextOutEx(sYPbPrMode[stModeInfo.ModeCurr], x,y);
                          else
                              CTextOutEx(sYPbPrMode[stModeInfo.ModeCurr], (19 - StrLen(sYPbPrMode[stModeInfo.ModeCurr])/
             -2), y);
                      }
                      break;
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 129 

                      #endif
7908   2              
7909   2              #if(_VIDEO_SUPPORT == _ON)
7910   2          case _SOURCE_VIDEO_AV:
7911   2          case _SOURCE_VIDEO_SV:
7912   2          case _SOURCE_VIDEO_YUV:
7913   2          case _SOURCE_VIDEO_SCART:
7914   2          case _SOURCE_VIDEO_TV:
7915   2              if(ucVideoType == ZNTSC || ucVideoType == ZNTSC_443 || ucVideoType == ZNTSC_50)
7916   2              {
7917   3                  if(!x)
7918   3                      CTextOutEx(sNTSC, x,y);
7919   3                  else
7920   3                      CTextOutEx(sNTSC, (19 - StrLen(sNTSC)/2), y);
7921   3              }
7922   2              else
7923   2              {
7924   3                  if(!x)
7925   3                      CTextOutEx(sPAL, x,y);
7926   3                  else
7927   3                      CTextOutEx(sPAL, (19 - StrLen(sPAL)/2), y);
7928   3              }
7929   2              break;
7930   2              #endif
7931   2              
7932   2              #if(0)//_VIDEO_TV_SUPPORT)
                  case _SOURCE_VIDEO_TV:
                      {
                          //CShowNumber(0, 1, stTvInfo.CurChn);
                          if(!x)
                              CTextOutEx(sTVType[ucTVType], x,y);
                          else
                              CTextOutEx(sTVType[ucTVType], (19 - StrLen(sTVType[ucTVType])/2), y);
                      }
                      break;
                      #endif
7943   2          }
7944   1      }    
7945          
7946          //---------------------------------------------------------------------------
7947          #define _MSG_WIDTH                  (20 * 12 + 4)   
7948          #define _MSG_HEIGHT                 (2 * 18)
7949          void CDisplayCurrentSourceMessage(void)
7950          {
7951   1          BYTE *pStr;
7952   1          
7953   1          ucOsdState = _MI_MENU_NONE;
7954   1          COsdFxDisableOsd();
7955   1      #if(_LOGO_ENABLE)
                  if (bLoadLogoFont)
                  {       
                      SetOsdMap(tUserMenuOsdMap);
                      
                      // Load global font 
                      // insert code to here 
                      COsdLoad1BitFont(FntGlobal,0x00,0x5F,tGlobalCharWidth);
                      CScalerLoadHardwareVLCFont(FntMainIcon,0x80 * 2);
                      
                      //Load Languege Font
                      LoadLanguageFont();
                      bLoadLogoFont = 0;
                  }
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 130 

              #endif
7970   1          
7971   1          SetOsdMap(tMsgOsdMap);
7972   1          COsdFxCodeWrite(ucCloseAllWindow);
7973   1          
7974   1          // Init osd
7975   1          // insert code to here
7976   1          OSDClear(ROW(0), HEIGHT(8), COL(0), WIDTH(20), 0x8C, BYTE_ATTRIB);
7977   1          OSDClear(ROW(0), HEIGHT(8), COL(0), WIDTH(20), 0x00, BYTE_DISPLAY);
7978   1          OSDClear(ROW(0), HEIGHT(8), COL(0), WIDTH(20), 0xF0, BYTE_COLOR);
7979   1          SetOSDDouble(0x03);   
7980   1          OSDPosition(_OSD_DOUBLE_WIDTH(_MSG_WIDTH), _OSD_DOUBLE_HEIGHT(_MSG_HEIGHT), 0, 0, 0x03);
7981   1          
7982   1          // TextOut
7983   1          switch(_GET_INPUT_SOURCE())
7984   1          {
7985   2          case _SOURCE_VGA:           pStr = sVGA;        break;
7986   2          case _SOURCE_DVI:           pStr = sDVI;        break;
7987   2          case _SOURCE_HDMI:          pStr = sHDMI;       break;
7988   2          case _SOURCE_YPBPR:         pStr = sYPBPR;      break;
7989   2          case _SOURCE_VIDEO_SV:      pStr = sSVideo;     break;
7990   2          case _SOURCE_VIDEO_AV:      pStr = sAV;         break;
7991   2              case _SOURCE_VIDEO_TV:          
7992   2              CShowNumber(0, 1, stTvInfo.CurChn);
7993   2              pStr = sTV;                     
7994   2              break;
7995   2              }
7996   1              CTextOutEx(pStr,ROW(0),0);
7997   1      
7998   1          CShowMode(0, 2);
7999   1      
8000   1          CTimerReactiveTimerEvent(SEC(5), COsdDispOsdTimerEvent);
8001   1          COsdFxEnableOsd();
8002   1          bOSDTimeOut  = 0;
8003   1      #if(_SLEEP_FUNC)
                  bOSDOnScreen = 1;
              #endif
8006   1          
8007   1      }
8008          
8009          //---------------------------------------------------------------------------
8010          void CSetOSDPosition(WORD OSDWidth, WORD OSDHeight, BYTE PosX, BYTE PosY)
8011          {
8012   1          if (GET_OSD_SIZE())
8013   1              OSDPosition(_OSD_DOUBLE_WIDTH(OSDWidth), _OSD_DOUBLE_HEIGHT(OSDHeight), PosX, PosY, 0x03);
8014   1          else
8015   1              OSDPosition(OSDWidth, OSDHeight, PosX, PosY, 0x03);
8016   1      }
8017          
8018          //----------------------------------------------------------------------------------------------------
8019          #define _SLIDER_BEGIN                           0x04
8020          void OSDSlider(BYTE row, BYTE col, BYTE length, BYTE value, BYTE range,BYTE color) small
8021          {
8022   1          unsigned int bound;
8023   1          unsigned char i,c;
8024   1          OSDLine(row, col, length + 6, color, THE_BYTE2);   // Set Slider Attribute. 4 extra columns for space/
             -numbers/space
8025   1          bound   = length * value;
8026   1          
8027   1          Gotoxy(col,row,THE_BYTE1);
8028   1          OutputChar(_SLIDER_BEGIN);          // Left Border
8029   1          for (i = 1; i <= length; i++)
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 131 

8030   1          {
8031   2              if (bound)
8032   2              {
8033   3                  if(bound >= range)
8034   3                  {
8035   4                      c       = _SLIDER_BEGIN + 7;
8036   4                      bound   = bound - range;
8037   4                  }
8038   3                  else
8039   3                  {
8040   4                      color   = (bound << 4) / range;
8041   4                      bound   = 0;
8042   4                      if (4 > color)                    c = _SLIDER_BEGIN + 2;
8043   4                      else if (7 > color)               c = _SLIDER_BEGIN + 3;
8044   4                      else if (10 > color)              c = _SLIDER_BEGIN + 4;
8045   4                      else if (13 > color)              c = _SLIDER_BEGIN + 5;
8046   4                      else                              c = _SLIDER_BEGIN + 6;
8047   4                  }
8048   3              }
8049   2              else
8050   2              {
8051   3                  c = _SLIDER_BEGIN + 1;
8052   3              }
8053   2              OutputChar(c);
8054   2          }
8055   1          OutputChar(_SLIDER_BEGIN + 8);    // Right Border
8056   1          CShowNumber(col + length + 2, row,value);
8057   1      }                                      
8058          
8059          //----------------------------------------------------------------------------------------------------
8060          void CSetItemStartEnd(void (*ReDrawPageProc)(void))
8061          {
8062   1          BYTE temp = 0;
8063   1      
8064   1          // Find current item start and end
8065   1          if (ucOsdState < ucStartItem)
8066   1          {
8067   2              ucStartItem = ucOsdState;
8068   2              ucEndItem   = ucStartItem + 5;
8069   2              temp = 1;
8070   2          }
8071   1          else if (ucOsdState - ucStartItem > 5)
8072   1          {
8073   2              ucStartItem = ucOsdState - 5;
8074   2              ucEndItem   = ucStartItem + 5;
8075   2              temp = 1;
8076   2          }
8077   1      
8078   1          if (temp)
8079   1          {
8080   2              // clear sub menu
8081   2              for(temp=0; temp<6; temp++)
8082   2              {
8083   3                  OSDLine(SHOWINDEX_TO_LINE(temp), COL(7), LENGTH(38), 0x00, BYTE_DISPLAY);
8084   3                  OSDLine(SHOWINDEX_TO_LINE(temp), COL(7), LENGTH(38), 0x8C, BYTE_ATTRIB);
8085   3              }
8086   2              // ReDraw page
8087   2              ReDrawPageProc();
8088   2          }
8089   1      }
8090          
8091          //----------------------------------------------------------------------------------------------------
C51 COMPILER V7.20   OSDMENUFUNC003                                                        10/05/2015 09:30:13 PAGE 132 

8092          BYTE CGetPopupMenuRow(BYTE ucBaseRowStart, ucFirstItem)
8093          {
8094   1          BYTE ucTemp = ucBaseRowStart-((ucStartItem-ucFirstItem)*2);
8095   1      
8096   1          return ucTemp;
8097   1      } 
8098          
8099          #if(_CHINESE_FONT_TYPE == _CHINESE_1_FONT && _LOGO_ENABLE)
              //----------------------------------------------------------
              void LoadLanguageFont(void)
              {
                  // load language font
              
                      switch(GET_LANGUAGE())
                      {
                      #if(LNG_JAP_EN)
                              case LNG_JAP:
                          COsdLoad1BitFont(FntJap,0x80,0x57,tFntJapCharWidth);
                          break;
                  #endif
                  #if(LNG_KOR_EN)
                      case LNG_KOR:
                          COsdLoad1BitFont(FntKor,0x80,0x68,tFntKorCharWidth);
                          break;
                  #endif
                  #if(LNG_RUS_EN)
                              case LNG_RUS:
                                      COsdLoad1BitFont(FntRus,0x80,0x21,tFntRusCharWidth);
                          break;
                  #endif
              #if(_CHINESE_FONT_TYPE == _CHINESE_1_FONT)
                  #if(LNG_CHI_S_EN)
                              case LNG_CHI_S:
                                      COsdLoad1BitFontWidth12(tFntChiGlobal,0x80,0x34);
                                      COsdLoad1BitFontWidth12(tFntChiS,0xC0,0x1D);
                          break;
                  #endif
                  #if(LNG_CHI_T_EN)
                              case LNG_CHI_T:
                                      COsdLoad1BitFontWidth12(tFntChiGlobal,0x80,0x34);
                                      COsdLoad1BitFontWidth12(tFntChiT,0xC0,0x1D);
                          break;
                  #endif
              #endif
                      }
              
              }  
              #endif
8140          
8141          #endif      //#if(_OSD_TYPE == _OSD003)


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  18365    ----
   CONSTANT SIZE    =     37    ----
   XDATA SIZE       =   ----     342
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----       1
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

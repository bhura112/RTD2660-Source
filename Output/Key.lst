C51 COMPILER V7.20   KEY                                                                   10/05/2015 09:30:07 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Output\Key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Keys\Key.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Output
                    -\Key.lst) OBJECT(.\Output\Key.obj)

line level    source

   1          //----------------------------------------------------------------------------------------------------
   2          // ID Code      : Key.c No.0001
   3          // Update Note  : 
   4          //
   5          //----------------------------------------------------------------------------------------------------
   6          
   7          #define __KEY__
   8          
   9          #include "Core\Header\include.h"
  10                         
  11          //--------------------------------------------------
  12          // Description  : Key scan process     
  13          // Input Value  : None
  14          // Output Value : None
  15          //--------------------------------------------------
  16          void CKeyHandler(void)
  17          {
  18   1          // Clear the key message
  19   1          ucKeyMessage = _NONE_KEY_MESSAGE;
  20   1          
  21   1          if(CKeyScanReady())// || _ACTIVE_STATE != ucCurrState)
  22   1          {
  23   2              // Store previous key state
  24   2              ucKeyStatePrev = ucKeyStateCurr;
  25   2              
  26   2              // Get current key state
  27   2              ucKeyStateCurr = CKeyScan();
  28   2                 
  29   2              // Power key process, return if power key is pressed
  30   2              if(CKeyPowerKeyProc())
  31   2                  return;
  32   2              
  33   2              // Convert key state to key message, store in (ucKeyNotify)
  34   2              CKeyMessageProc();
  35   2      
  36   2              #if(_REMOTE_CONTROLLER != _IR_NONE) 
  37   2              {
  38   3                  if(ucKeyMessage == _NONE_KEY_MESSAGE)
  39   3                  {        
  40   4                     ucKeyMessage = CIRKeyScan();
  41   4                                               
  42   4                     if (ucKeyMessage != _NONE_KEY_MESSAGE)
  43   4                        ucPrevKey = ucKeyMessage;                   
  44   4                  }
  45   3              }
  46   2              #endif
  47   2          }
  48   1          
  49   1              #if(_DEBUG_TOOL == _ISP_FOR_RTD3580D_EMCU)
  50   1          GetVirtualKey();
  51   1          
  52   1          if(ucKeyMessage == _POWER_KEY_MESSAGE)
  53   1              SET_POWERSWITCH();
  54   1              #endif
C51 COMPILER V7.20   KEY                                                                   10/05/2015 09:30:07 PAGE 2   

  55   1      
  56   1          // debug info
  57   1          //if(ucKeyMessage != _NONE_KEY_MESSAGE)
  58   1              //      CUartPrintf("KeyMessage:",ucKeyMessage);
  59   1      }
  60          
  61          //--------------------------------------------------
  62          // Description  : Check power key process
  63          // Input Value  : None
  64          // Output Value : None
  65          //--------------------------------------------------
  66          /*
  67          void CKeyCheckPowerKey(void)
  68          {
  69              // Store previous key state
  70              ucKeyStatePrev = ucKeyStateCurr;
  71              
  72              // Get current key state
  73              ucKeyStateCurr = CKeyScan();
  74              
  75              // Power key process
  76              CKeyPowerKeyProc();
  77          }
  78          */
  79          //--------------------------------------------------
  80          // Description  : Initial key status
  81          // Input Value  : None
  82          // Output Value : None
  83          //--------------------------------------------------
  84          void CKeyInitial(void)
  85          {
  86   1              CLR_KEYSCANREADY();
  87   1          CLR_KEYSCANSTART();
  88   1      }
  89          
  90          //--------------------------------------------------
  91          // Description  : Key scan ready process. We wait 0.02 sec in order to keep the keypad debounce
  92          // Input Value  : None
  93          // Output Value : None
  94          //--------------------------------------------------
  95          bit CKeyScanReady(void)
  96          {
  97   1          if(GET_KEYSCANSTART() && GET_KEYSCANREADY())
  98   1          {
  99   2                      CLR_KEYSCANSTART();  //
 100   2                      CLR_KEYSCANREADY();  //
 101   2              return _TRUE;
 102   2          }
 103   1          else if(!GET_KEYSCANSTART())
 104   1          {
 105   2              // Wait 0.02 sec in order to keep the keypad debounce
 106   2              SET_KEYSCANSTART();
 107   2              //CTimerReactiveTimerEvent(SEC(0.02), CKeyScanReadyTimerEvent);
 108   2              CTimerReactiveTimerEvent(SEC(0.09), CKeyScanReadyTimerEvent);
 109   2              
 110   2              return _FALSE;
 111   2          }
 112   1          else
 113   1          {
 114   2              return _FALSE;
 115   2          }  
 116   1      }
C51 COMPILER V7.20   KEY                                                                   10/05/2015 09:30:07 PAGE 3   

 117          
 118          //--------------------------------------------------
 119          // Description  : Key scan ready timer event
 120          // Input Value  : None
 121          // Output Value : None
 122          //--------------------------------------------------
 123          void CKeyScanReadyTimerEvent(void)
 124          {
 125   1          SET_KEYSCANREADY();
 126   1      }
 127          
 128          //--------------------------------------------------
 129          // Description  : Key repeat enable timer event
 130          // Input Value  : None
 131          // Output Value : None
 132          //--------------------------------------------------
 133          void CKeyRepeatEnableTimerEvent(void)
 134          {
 135   1          SET_KEYREPEATSTART();
 136   1      }
 137          
 138          //--------------------------------------------------
 139          // Description  : Key message translation
 140          // Input Value  : ucKeyMask     --> Key mask
 141          //                ucKeyMsg      --> Key message
 142          // Output Value : None
 143          //--------------------------------------------------
 144          void CKeyMessageConvert(BYTE ucKeyMask, BYTE ucKeyMsg)
 145          {
 146   1          if((ucKeyStatePrev ^ ucKeyStateCurr) == ucKeyMask)
 147   1          {
 148   2              ucKeyMessage = ucKeyMsg;
 149   2          }
 150   1          else
 151   1          { 
 152   2              if(GET_KEYREPEATENABLE())
 153   2              {
 154   3                  if(GET_KEYREPEATSTART())
 155   3                  {
 156   4                      ucKeyMessage = ucKeyMsg;
 157   4                      //CLR_KEYREPEATSTART();
 158   4                  }
 159   3                  else
 160   3                  {
 161   4                      CTimerActiveTimerEvent(SEC(_KEY_REPEAT_START_TIME),CKeyRepeatEnableTimerEvent);
 162   4                  }
 163   3              }
 164   2          }
 165   1      }
 166          
 167          //--------------------------------------------------
 168          // Description  : Power key process
 169          // Input Value  : None
 170          // Output Value : Return _TRUE if power key is pressed
 171          //--------------------------------------------------
 172          bit CKeyPowerKeyProc(void)
 173          {
 174   1          if(ucKeyStateCurr == _POWER_KEY_MASK)
 175   1          {
 176   2              if((ucKeyStatePrev ^ ucKeyStateCurr) == _POWER_KEY_MASK)
 177   2              {
 178   3                  CTimerDelayXms(25);
C51 COMPILER V7.20   KEY                                                                   10/05/2015 09:30:07 PAGE 4   

 179   3                  ucKeyStateCurr = CKeyScan();
 180   3                  
 181   3                  if((ucKeyStatePrev ^ ucKeyStateCurr) == _POWER_KEY_MASK)
 182   3                  {
 183   4                      CKeyPowerKeyMix();
 184   4                      SET_POWERSWITCH();
 185   4                      return _TRUE;
 186   4                  }
 187   3              }
 188   2          }
 189   1          
 190   1          return _FALSE;
 191   1      }
 192          //--------------------------------------------------
 193          // Description  : We can add some settings here while combo key with power key
 194          // Input Value  : None
 195          // Output Value : None
 196          //--------------------------------------------------
 197          void CKeyPowerKeyMix(void)
 198          {
 199   1      /*
 200   1          switch(ucKeyStateCurr)
 201   1          {
 202   1      
 203   1              default:
 204   1                  break;
 205   1          }
 206   1      */
 207   1      }
 208          
 209          //--------------------------------------------------
 210          #if(_FUNC_EN_CHK_KEY_DOWN)
              BYTE CheckKeyDown(BYTE KeyMask,BYTE Cnt)
              {
                  BYTE i = 0;
                  while(i < Cnt)
                  {
                      if(CKeyScan() == KeyMask)
                      {
                          return 1;
                      }
                      CTimerDelayXms(20);
                      i++;
                  }
                  return 0;
              }
              #endif
 226          
 227          //--------------------------------------------------
 228          #if(_FUNC_EN_CHK_KEY_UP)
              BYTE CheckKeyUp(BYTE KeyMask,BYTE Cnt)
              {
                  BYTE i = 0;
                  while(i < Cnt)
                  {
                      if(CKeyScan() != KeyMask)
                      {
                          return 1;
                      }
                      CTimerDelayXms(20);
                      i++;
                  }
C51 COMPILER V7.20   KEY                                                                   10/05/2015 09:30:07 PAGE 5   

                  return 0;
              }
              #endif
 244          
 245          #if(_KEY_SCAN_TYPE == _KEY_SCAN_AD)
 246          //--------------------------------------------------
 247          // Description  : Get key status
 248          // Input Value  : None
 249          // Output Value : Return Key status
 250          //--------------------------------------------------
 251          void CGetADCValue(BYTE *pBuf)
 252          {
 253   1              BYTE xdata *p;
 254   1          BYTE i = 0;
 255   1      
 256   1              MCU_ADC_ACONTROL_FF08 = 0x82;                   //start adc convert(STRT_ADC_ACKT=1) 
 257   1      
 258   1              while(MCU_ADC_ACONTROL_FF08 & 0x80)
 259   1              {
 260   2                      _nop_();
 261   2              }
 262   1      
 263   1      #if(AD_KEY0 != MCU_ADC_NONE)
                      p = (0xFF09 + AD_KEY0);                 
                      pBuf[i] = *p;
                  i++;
              #endif
 268   1      
 269   1      #if(AD_KEY1 != MCU_ADC_NONE)
 270   1              p = (0xFF09 + AD_KEY1);                 
 271   1              pBuf[i] = *p;
 272   1          i++;
 273   1      #endif
 274   1      
 275   1      #if(AD_KEY2 != MCU_ADC_NONE)
                      p = (0xFF09 + AD_KEY2);                 
                      pBuf[i] = *p;
                  i++;
              #endif
 280   1      
 281   1      #if(AD_KEY3 != MCU_ADC_NONE)
                      p = (0xFF09 + AD_KEY3);                 
                      pBuf[i] = *p;
                  i++;
              #endif
 286   1      
 287   1      #if(AD_KEY4 != MCU_ADC_NONE)
                      p = (0xFF09 + AD_KEY4);                 
                      pBuf[i] = *p;
              #endif
 291   1      
 292   1              pBuf[0] >>= 2;
 293   1              pBuf[1] >>= 2;
 294   1              pBuf[2] >>= 2;
 295   1              pBuf[3] >>= 2;
 296   1              pBuf[4] >>= 2;
 297   1      }
 298          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    332    ----
C51 COMPILER V7.20   KEY                                                                   10/05/2015 09:30:07 PAGE 6   

   CONSTANT SIZE    =    258    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      4    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V7.20   MCU                                                                   10/05/2015 09:30:22 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE MCU
OBJECT MODULE PLACED IN .\Output\Mcu.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Core\code\mcu\Mcu.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Output\Mcu.lst) OBJECT(.\Output\Mcu.obj)

line level    source

   1          //----------------------------------------------------------------------------------------------------
   2          // ID Code      : Mcu.c No.0002
   3          // Update Note  :
   4          //
   5          //----------------------------------------------------------------------------------------------------
   6          
   7          #define __MCU__
   8          
   9          #include  "Core\Header\Include.h"
  10          
  11          #if(_MCU_TYPE == _REALTEK_RTD3580D_EMCU)
  12          /**
  13          * CMcuInitial
  14          * Initialize the MCU _REALTEK_RTD3580D_EMCU
  15          * @param <none>
  16          * @return {none}
  17          *
  18          */
  19          void CMcuInitial(void)
  20          {
  21   1          IE      = 0x00;                         // Disable all interrupts
  22   1          TMOD    = 0x11;                         // Program Timer0 & Timer1 to Mode#1
  23   1          TR0     = 0;                            // Stop Timer0
  24   1          TF0     = 0;                            // Clear Timer0 Overflow Bit
  25   1          TL0     = _TIMER0_COUNT_LBYTE;          // Load Timer0 low-byte   (for 1ms)
  26   1          TH0     = _TIMER0_COUNT_HBYTE;          // Load Timer0 high-byte  (for 1ms)
  27   1          TR1     = 0;                            // Stop Timer1
  28   1          TF1     = 0;                            // Clear Timer1 Overflow Bit
  29   1          IE      = 0x8a;                         // Enable interrupts of Timer0
  30   1      
  31   1              MCU_WATCHDOG_TIMER_FFEA         = 0x00;         //dis wdt, wdt default enable
  32   1          MCU_WATCHDOG_TIMER_FFEA             |= 0x40;        //clr wdt.//eric 20070627
  33   1          MCU_CTRL_FFED                               = 0x80;                 //FlashDIV=1
  34   1          MCU_HDMI_DDC_ENA_FF2C               = 0x00;                 //disable HDMI DDC channel
  35   1      
  36   1          MCU_COMMON_INST_EN_FF60             = 0x68;              
  37   1          MCU_COMMON_OP_CODE_FF61             = 0x01;             // wrsr
  38   1          MCU_FLASH_PROG_ISP0_FF64    = 0x0c;            // state reg
  39   1          MCU_COMMON_INST_EN_FF60             = 0x68 | 0x01;    
  40   1      
  41   1      //Gary for Interior HDMI  DDC   20070711
  42   1      // HDMI DDC connected to DDC2
  43   1      #if ( (_HDMI_EDID==_ON) && (_HDMI_DDC_CHANNEL_SELECT==_DDC2) )
  44   1                        
  45   1          MCU_DVI_DDC_ENA_FF1E        = 0x02;
  46   1              MCU_HDMI_DDC_ENA_FF2C   = 0x00;  //disable HDMI DDC channel
  47   1          MCU_DDCRAM_PART_FF21        = 0x2b;  //addcram_st=2(0xfd00),dddcram_st=20(0xfd80),hddcram_st=3 
  48   1          
  49   1      // HDMI DDC connected to DDC3
  50   1      #elif( (_HDMI_EDID==_ON) && (_HDMI_DDC_CHANNEL_SELECT==_DDC3) )
              
                      MCU_DVI_DDC_ENA_FF1E    = 0x00;  //disable DVI DDC channel
                      MCU_HDMI_DDC_ENA_FF2C   = 0x02;  
                      MCU_DDCRAM_PART_FF21    = 0x3a;  //addcram_st=3(0xFd80),dddcram_st=2(0xfd80),hddcram_st=2(0xfe00)       
C51 COMPILER V7.20   MCU                                                                   10/05/2015 09:30:22 PAGE 2   

              
              #else
                      
                      MCU_DVI_DDC_ENA_FF1E    = 0x00;  //Disable DVI DDC channel
                      MCU_HDMI_DDC_ENA_FF2C   = 0x00;  //disable HDMI DDC channel
                  MCU_DDCRAM_PART_FF21        = 0x3f;  //addcram_st=3,dddcram_st=3,hddcram_st=3 (Xram=640 Byte) 
              
              #endif  
  63   1      
  64   1      #if (_VGA_EDID == _ON)
                      MCU_VGA_DDC_ENA_FF1B    = 0x02;  
              #else
  67   1              MCU_VGA_DDC_ENA_FF1B    = 0x00;   //Disable ADC DDC channel
  68   1      #endif
  69   1      
  70   1          MCU_PIN_SHARE_CTRL04_FF9A |= 0x05;          //P6.6/P6.7 opendrain output for I2C master 
  71   1              MCU_PORT_READ_CTRL_FFC0 = 0xfd;                 //read All GPIO value from bus,except p3 
  72   1              
  73   1              MCU_BANK_SWITCH_CTRL_FFFC = 0x0B;               // enable global XFR & enable bank switching func(Pbank)
  74   1              MCU_BANK_START_FFFD       = 0x01;
  75   1              MCU_BANK_SEL_FFFE         = 0x00;
  76   1      
  77   1              MCU_CLOCK_CTRL_FFEE             |= 0x40;                    //keep mcu peripheral running while mcu stopped by spi flash access
  78   1              
  79   1          #if (_MCU_PWM_SUPPORT)
  80   1          {
  81   2              MCU_PWML_FF46   |= 0x80;                                // PWM_W_DB_EN  
  82   2              MCU_PWM_EN_FF48 = _MCU_PWM_SUPPORT;         // PWM output enable
  83   2                      MCU_PWM_CK_FF49 = _BIT0;                                // second stage output
  84   2      
  85   2                      if (_MCU_PWM0_SUPPORT == _ON)
  86   2                      {
  87   3                              MCU_PWM03_M_FF3B                = 0;    //_MCU_PWM0_FIRST_STAGE_DIV;
  88   3                              MCU_PWM01_N_MSB_FF3D    = 0;    //(_MCU_PWM0_SECOND_STAGE_DIV >> 4) & 0x0f;
  89   3                              MCU_PWM0_N_LSB_FF3E             = 66;   //(_MCU_PWM0_SECOND_STAGE_DIV >> 0) & 0xff;
  90   3                      }
  91   2          }
  92   1          #endif
  93   1      
  94   1      #if(_FAST_READ == _ON)
                      CMCUSetFlashClk();
              #endif // End of #if(_FAST_READ == _ON)
  97   1      
  98   1              MCU_COMMON_INST_EN_FF60 = 0x68;         //Write after WREN & Write_No=1
  99   1              MCU_COMMON_OP_CODE_FF61 = 0x01;         //Instruction Code(WRSR:0x01)
 100   1              MCU_FLASH_PROG_ISP0_FF64 = 0x80;        //write byte(SRWD=1) 
 101   1              MCU_COMMON_INST_EN_FF60 |= 0x01;        //com_inst_en
 102   1      }
 103          
 104          #if(_FAST_READ == _ON)
              void CMCUSetFlashClk(void)
              {
                 //   M2PLL Enable
                  MCU_SCA_INF_CTRL_FFF3 = 0x20; //BWR data enable, Non_INC
                  MCU_SCA_INF_ADDR_FFF4 = 0x9f; //DDC_addr
                  MCU_SCA_INF_DATA_FFF5 = 0x01; //DDC_data, page-1
                  MCU_SCA_INF_ADDR_FFF4 = 0xE4; //M2-PLL Reg Ctrl Address
                  MCU_SCA_INF_DATA_FFF5 = 0x00; //Enable M2PLL
              
                  //  Power-saving mode Enable
                  MCU_SCA_INF_ADDR_FFF4 = 0x01; //DDC_addr- Host Ctrl
                  MCU_SCA_INF_DATA_FFF5 = 0x00; //DDC_data - Disable power-saving mode
C51 COMPILER V7.20   MCU                                                                   10/05/2015 09:30:22 PAGE 3   

              
                  //  M2PLL output enable
                  MCU_SCA_INF_ADDR_FFF4 = 0xE0; //M2-PLL-CTRL0
                  MCU_SCA_INF_DATA_FFF5 = 0x82; //M2PLL output enable
                  
                  //  Enable FastRead mode
                  MCU_CEN_CTRL_FF76 = ( ((0x3)<<4) | ((0x1)<<2) | ((0x1)<<0) );  //ChipEnable Timing Setup
              
              #if (_TURBO_MODE==_ON)
                  MCU_FAST_READ_OP_CODE_FF6B = 0x3B;  //Fast Dual data read for winbond flash only
                  MCU_READ_INSTRUCTION_FF6C |= ( ((0x2)<<6) | ((0x1)<<5) | ((0x0)<<4) | ((0x0)<<2) | ((0x0)<<0) ); //Fas
             -t Read mode, DI@half cycle, Dout@one cycle
              #else
                  MCU_FAST_READ_OP_CODE_FF6B = 0x0B;  //Fast Read for all kind of flash
                  MCU_READ_INSTRUCTION_FF6C |= ( ((0x1)<<6) | ((0x1)<<5) | ((0x0)<<4) | ((0x0)<<2) | ((0x0)<<0) ); //Fas
             -t Read mode, DI@half cycle, Dout@one cycle
              #endif   
               
                  CMCUFlashClkDiv(_FLASH_CLK_DIV);    //Flash CLK
                  CMCUClkDiv(_MCU_CLK_DIV);      //MCU=FlashClk/2
                  MCU_CTRL_FFED |= 0x02; //Switch to PLL
              }
              
              
              void CMCUFlashClkDiv(BYTE clkdiv) // _FlashClkDiv(x=0-15): SPI Flash Clock Generator (OSC/PLL°£¥HDIV:from 
             -0~15) 
              { 
                  clkdiv &= 0x0F;
                  clkdiv = (clkdiv << 2);
                  clkdiv |= (MCU_CTRL_FFED & 0xC3);
                  MCU_CTRL_FFED = clkdiv;     
              }
              
              void CMCUClkDiv(BYTE clkdiv)  // _MCUClkDiv(x=0-15): 8051 Clock Generator (Flash_Clk/DIV:from 0~15)
              { 
                  clkdiv &= 0x0F;
                  clkdiv = (clkdiv << 2);
                  clkdiv |= (MCU_CLOCK_CTRL_FFEE & 0xC3);
                  MCU_CLOCK_CTRL_FFEE = clkdiv;     
              }
              #endif //End of #if(_FAST_READ == _ON)
 155          
 156          #endif
 157          
 158          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    164    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
